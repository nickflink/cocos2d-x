#include "lua_cocos2dx_auto.hpp"
#include "cocos2d.h"
#include "SimpleAudioEngine.h"
#include "tolua_fix.h"
#include "LuaBasicConversions.h"



static int lua_cocos2dx_Action_startWithTarget(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Action* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Action",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Action*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Action_startWithTarget'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Node* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->startWithTarget(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Action_startWithTarget'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Action_setOriginalTarget(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Action* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Action",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Action*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Action_setOriginalTarget'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Node* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->setOriginalTarget(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Action_setOriginalTarget'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Action_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Action* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Action",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Action*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Action_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Action* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"Action");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Action_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Action_getOriginalTarget(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Action* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Action",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Action*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Action_getOriginalTarget'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Node* ret = cobj->getOriginalTarget();
		tolua_pushusertype(tolua_S,ret,"Node");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Action_getOriginalTarget'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Action_stop(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Action* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Action",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Action*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Action_stop'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->stop();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Action_stop'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Action_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Action* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Action",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Action*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Action_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Action_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Action_getTarget(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Action* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Action",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Action*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Action_getTarget'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Node* ret = cobj->getTarget();
		tolua_pushusertype(tolua_S,ret,"Node");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Action_getTarget'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Action_step(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Action* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Action",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Action*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Action_step'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->step(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Action_step'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Action_setTag(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Action* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Action",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Action*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Action_setTag'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		int arg0;
		ok &= luaval_to_int32(tolua_S, 2,(int*)&arg0);
		if(!ok)
			return 0;
		cobj->setTag(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Action_setTag'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Action_getTag(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Action* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Action",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Action*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Action_getTag'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		int ret = cobj->getTag();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Action_getTag'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Action_setTarget(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Action* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Action",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Action*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Action_setTarget'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Node* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->setTarget(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Action_setTarget'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Action_isDone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Action* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Action",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Action*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Action_isDone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->isDone();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Action_isDone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Action_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Action* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Action",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Action*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Action_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Action* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"Action");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Action_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Action_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (Action)");
	return 0;
}

int lua_register_cocos2dx_Action(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"Action");
	tolua_cclass(tolua_S,"Action","Action","",NULL);

	tolua_beginmodule(tolua_S,"Action");
		tolua_function(tolua_S,"startWithTarget",lua_cocos2dx_Action_startWithTarget);
		tolua_function(tolua_S,"setOriginalTarget",lua_cocos2dx_Action_setOriginalTarget);
		tolua_function(tolua_S,"clone",lua_cocos2dx_Action_clone);
		tolua_function(tolua_S,"getOriginalTarget",lua_cocos2dx_Action_getOriginalTarget);
		tolua_function(tolua_S,"stop",lua_cocos2dx_Action_stop);
		tolua_function(tolua_S,"update",lua_cocos2dx_Action_update);
		tolua_function(tolua_S,"getTarget",lua_cocos2dx_Action_getTarget);
		tolua_function(tolua_S,"step",lua_cocos2dx_Action_step);
		tolua_function(tolua_S,"setTag",lua_cocos2dx_Action_setTag);
		tolua_function(tolua_S,"getTag",lua_cocos2dx_Action_getTag);
		tolua_function(tolua_S,"setTarget",lua_cocos2dx_Action_setTarget);
		tolua_function(tolua_S,"isDone",lua_cocos2dx_Action_isDone);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_Action_reverse);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_FiniteTimeAction_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::FiniteTimeAction* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"FiniteTimeAction",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::FiniteTimeAction*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_FiniteTimeAction_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::FiniteTimeAction* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"FiniteTimeAction");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FiniteTimeAction_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_FiniteTimeAction_setDuration(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::FiniteTimeAction* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"FiniteTimeAction",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::FiniteTimeAction*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_FiniteTimeAction_setDuration'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setDuration(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FiniteTimeAction_setDuration'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_FiniteTimeAction_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::FiniteTimeAction* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"FiniteTimeAction",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::FiniteTimeAction*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_FiniteTimeAction_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::FiniteTimeAction* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"FiniteTimeAction");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FiniteTimeAction_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_FiniteTimeAction_getDuration(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::FiniteTimeAction* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"FiniteTimeAction",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::FiniteTimeAction*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_FiniteTimeAction_getDuration'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getDuration();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FiniteTimeAction_getDuration'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_FiniteTimeAction_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (FiniteTimeAction)");
	return 0;
}

int lua_register_cocos2dx_FiniteTimeAction(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"FiniteTimeAction");
	tolua_cclass(tolua_S,"FiniteTimeAction","FiniteTimeAction","Action",NULL);

	tolua_beginmodule(tolua_S,"FiniteTimeAction");
		tolua_function(tolua_S,"clone",lua_cocos2dx_FiniteTimeAction_clone);
		tolua_function(tolua_S,"setDuration",lua_cocos2dx_FiniteTimeAction_setDuration);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_FiniteTimeAction_reverse);
		tolua_function(tolua_S,"getDuration",lua_cocos2dx_FiniteTimeAction_getDuration);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_Speed_setInnerAction(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Speed* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Speed",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Speed*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Speed_setInnerAction'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::ActionInterval* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"ActionInterval",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::ActionInterval*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->setInnerAction(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Speed_setInnerAction'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Speed_startWithTarget(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Speed* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Speed",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Speed*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Speed_startWithTarget'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Node* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->startWithTarget(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Speed_startWithTarget'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Speed_getSpeed(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Speed* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Speed",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Speed*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Speed_getSpeed'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getSpeed();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Speed_getSpeed'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Speed_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Speed* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Speed",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Speed*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Speed_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Speed* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"Speed");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Speed_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Speed_stop(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Speed* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Speed",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Speed*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Speed_stop'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->stop();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Speed_stop'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Speed_step(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Speed* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Speed",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Speed*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Speed_step'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->step(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Speed_step'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Speed_setSpeed(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Speed* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Speed",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Speed*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Speed_setSpeed'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setSpeed(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Speed_setSpeed'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Speed_initWithAction(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Speed* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Speed",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Speed*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Speed_initWithAction'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		cocos2d::ActionInterval* arg0;
		double arg1;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"ActionInterval",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::ActionInterval*)tolua_tousertype(tolua_S,2,0);
		};
		ok &= luaval_to_number(tolua_S, 3,&arg1);
		if(!ok)
			return 0;
		bool ret = cobj->initWithAction(arg0, arg1);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Speed_initWithAction'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Speed_getInnerAction(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Speed* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Speed",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Speed*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Speed_getInnerAction'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::ActionInterval* ret = cobj->getInnerAction();
		tolua_pushusertype(tolua_S,ret,"ActionInterval");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Speed_getInnerAction'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Speed_isDone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Speed* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Speed",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Speed*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Speed_isDone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->isDone();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Speed_isDone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Speed_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Speed* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Speed",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Speed*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Speed_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Speed* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"Speed");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Speed_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Speed_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"Speed",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 2) {
		cocos2d::ActionInterval* arg0;
		double arg1;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"ActionInterval",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::ActionInterval*)tolua_tousertype(tolua_S,2,0);
		};
		ok &= luaval_to_number(tolua_S, 3,&arg1);
		if(!ok)
			return 0;
		cocos2d::Speed* ret = cocos2d::Speed::create(arg0, arg1);
		tolua_pushusertype(tolua_S,ret,"Speed");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Speed_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_Speed_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Speed* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::Speed();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"Speed");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Speed_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_Speed_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (Speed)");
	return 0;
}

int lua_register_cocos2dx_Speed(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"Speed");
	tolua_cclass(tolua_S,"Speed","Speed","Action",NULL);

	tolua_beginmodule(tolua_S,"Speed");
		tolua_function(tolua_S,"setInnerAction",lua_cocos2dx_Speed_setInnerAction);
		tolua_function(tolua_S,"startWithTarget",lua_cocos2dx_Speed_startWithTarget);
		tolua_function(tolua_S,"getSpeed",lua_cocos2dx_Speed_getSpeed);
		tolua_function(tolua_S,"clone",lua_cocos2dx_Speed_clone);
		tolua_function(tolua_S,"stop",lua_cocos2dx_Speed_stop);
		tolua_function(tolua_S,"step",lua_cocos2dx_Speed_step);
		tolua_function(tolua_S,"setSpeed",lua_cocos2dx_Speed_setSpeed);
		tolua_function(tolua_S,"initWithAction",lua_cocos2dx_Speed_initWithAction);
		tolua_function(tolua_S,"getInnerAction",lua_cocos2dx_Speed_getInnerAction);
		tolua_function(tolua_S,"isDone",lua_cocos2dx_Speed_isDone);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_Speed_reverse);
		tolua_function(tolua_S,"new",lua_cocos2dx_Speed_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_Speed_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_Follow_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Follow* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Follow",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Follow*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Follow_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Follow* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"Follow");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Follow_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Follow_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Follow* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Follow",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Follow*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Follow_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Follow* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"Follow");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Follow_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Follow_initWithTarget(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Follow* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Follow",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Follow*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Follow_initWithTarget'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Node* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		bool ret = cobj->initWithTarget(arg0);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	if (argc == 2) {
		cocos2d::Node* arg0;
		cocos2d::Rect arg1;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		ok &= luaval_to_rect(tolua_S, 3, &arg1);
		if(!ok)
			return 0;
		bool ret = cobj->initWithTarget(arg0, arg1);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Follow_initWithTarget'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Follow_stop(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Follow* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Follow",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Follow*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Follow_stop'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->stop();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Follow_stop'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Follow_setBoudarySet(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Follow* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Follow",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Follow*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Follow_setBoudarySet'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setBoudarySet(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Follow_setBoudarySet'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Follow_step(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Follow* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Follow",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Follow*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Follow_step'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->step(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Follow_step'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Follow_isDone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Follow* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Follow",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Follow*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Follow_isDone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->isDone();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Follow_isDone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Follow_isBoundarySet(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Follow* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Follow",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Follow*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Follow_isBoundarySet'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->isBoundarySet();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Follow_isBoundarySet'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Follow_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"Follow",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 1) {
		cocos2d::Node* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cocos2d::Follow* ret = cocos2d::Follow::create(arg0);
		tolua_pushusertype(tolua_S,ret,"Follow");
	    return 1;
	}
	if (argc == 2) {
		cocos2d::Node* arg0;
		cocos2d::Rect arg1;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		ok &= luaval_to_rect(tolua_S, 3, &arg1);
		if(!ok)
			return 0;
		cocos2d::Follow* ret = cocos2d::Follow::create(arg0, arg1);
		tolua_pushusertype(tolua_S,ret,"Follow");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Follow_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_Follow_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Follow* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::Follow();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"Follow");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Follow_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_Follow_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (Follow)");
	return 0;
}

int lua_register_cocos2dx_Follow(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"Follow");
	tolua_cclass(tolua_S,"Follow","Follow","Action",NULL);

	tolua_beginmodule(tolua_S,"Follow");
		tolua_function(tolua_S,"reverse",lua_cocos2dx_Follow_reverse);
		tolua_function(tolua_S,"clone",lua_cocos2dx_Follow_clone);
		tolua_function(tolua_S,"initWithTarget",lua_cocos2dx_Follow_initWithTarget);
		tolua_function(tolua_S,"stop",lua_cocos2dx_Follow_stop);
		tolua_function(tolua_S,"setBoudarySet",lua_cocos2dx_Follow_setBoudarySet);
		tolua_function(tolua_S,"step",lua_cocos2dx_Follow_step);
		tolua_function(tolua_S,"isDone",lua_cocos2dx_Follow_isDone);
		tolua_function(tolua_S,"isBoundarySet",lua_cocos2dx_Follow_isBoundarySet);
		tolua_function(tolua_S,"new",lua_cocos2dx_Follow_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_Follow_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_GLProgram_fragmentShaderLog(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::GLProgram* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"GLProgram",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::GLProgram*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_GLProgram_fragmentShaderLog'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		const char* ret = cobj->fragmentShaderLog();
		tolua_pushstring(tolua_S,(const char*)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_GLProgram_fragmentShaderLog'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_GLProgram_addAttribute(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::GLProgram* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"GLProgram",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::GLProgram*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_GLProgram_addAttribute'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		const char* arg0;
		unsigned int arg1;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		ok &= luaval_to_uint32(tolua_S, 3,&arg1);
		if(!ok)
			return 0;
		cobj->addAttribute(arg0, arg1);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_GLProgram_addAttribute'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_GLProgram_setUniformLocationWithMatrix4fv(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::GLProgram* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"GLProgram",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::GLProgram*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_GLProgram_setUniformLocationWithMatrix4fv'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 3) {
		int arg0;
		float* arg1;
		unsigned int arg2;
		ok &= luaval_to_int32(tolua_S, 2,(int*)&arg0);
		#pragma warning NO CONVERSION TO NATIVE FOR float*;
		ok &= luaval_to_uint32(tolua_S, 4,&arg2);
		if(!ok)
			return 0;
		cobj->setUniformLocationWithMatrix4fv(arg0, arg1, arg2);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 3);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_GLProgram_setUniformLocationWithMatrix4fv'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_GLProgram_getUniformLocationForName(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::GLProgram* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"GLProgram",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::GLProgram*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_GLProgram_getUniformLocationForName'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		const char* arg0;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		if(!ok)
			return 0;
		int ret = cobj->getUniformLocationForName(arg0);
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_GLProgram_getUniformLocationForName'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_GLProgram_use(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::GLProgram* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"GLProgram",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::GLProgram*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_GLProgram_use'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->use();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_GLProgram_use'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_GLProgram_vertexShaderLog(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::GLProgram* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"GLProgram",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::GLProgram*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_GLProgram_vertexShaderLog'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		const char* ret = cobj->vertexShaderLog();
		tolua_pushstring(tolua_S,(const char*)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_GLProgram_vertexShaderLog'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_GLProgram_initWithVertexShaderByteArray(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::GLProgram* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"GLProgram",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::GLProgram*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_GLProgram_initWithVertexShaderByteArray'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		const char* arg0;
		const char* arg1;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp); arg1 = arg1_tmp.c_str();
		if(!ok)
			return 0;
		bool ret = cobj->initWithVertexShaderByteArray(arg0, arg1);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_GLProgram_initWithVertexShaderByteArray'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_GLProgram_initWithVertexShaderFilename(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::GLProgram* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"GLProgram",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::GLProgram*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_GLProgram_initWithVertexShaderFilename'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		const char* arg0;
		const char* arg1;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp); arg1 = arg1_tmp.c_str();
		if(!ok)
			return 0;
		bool ret = cobj->initWithVertexShaderFilename(arg0, arg1);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_GLProgram_initWithVertexShaderFilename'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_GLProgram_setUniformsForBuiltins(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::GLProgram* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"GLProgram",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::GLProgram*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_GLProgram_setUniformsForBuiltins'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->setUniformsForBuiltins();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_GLProgram_setUniformsForBuiltins'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_GLProgram_setUniformLocationWith3i(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::GLProgram* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"GLProgram",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::GLProgram*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_GLProgram_setUniformLocationWith3i'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 4) {
		int arg0;
		int arg1;
		int arg2;
		int arg3;
		ok &= luaval_to_int32(tolua_S, 2,(int*)&arg0);
		ok &= luaval_to_int32(tolua_S, 3,(int*)&arg1);
		ok &= luaval_to_int32(tolua_S, 4,(int*)&arg2);
		ok &= luaval_to_int32(tolua_S, 5,(int*)&arg3);
		if(!ok)
			return 0;
		cobj->setUniformLocationWith3i(arg0, arg1, arg2, arg3);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 4);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_GLProgram_setUniformLocationWith3i'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_GLProgram_setUniformLocationWith3iv(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::GLProgram* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"GLProgram",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::GLProgram*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_GLProgram_setUniformLocationWith3iv'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 3) {
		int arg0;
		int* arg1;
		unsigned int arg2;
		ok &= luaval_to_int32(tolua_S, 2,(int*)&arg0);
		#pragma warning NO CONVERSION TO NATIVE FOR int*;
		ok &= luaval_to_uint32(tolua_S, 4,&arg2);
		if(!ok)
			return 0;
		cobj->setUniformLocationWith3iv(arg0, arg1, arg2);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 3);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_GLProgram_setUniformLocationWith3iv'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_GLProgram_updateUniforms(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::GLProgram* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"GLProgram",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::GLProgram*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_GLProgram_updateUniforms'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->updateUniforms();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_GLProgram_updateUniforms'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_GLProgram_setUniformLocationWith4iv(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::GLProgram* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"GLProgram",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::GLProgram*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_GLProgram_setUniformLocationWith4iv'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 3) {
		int arg0;
		int* arg1;
		unsigned int arg2;
		ok &= luaval_to_int32(tolua_S, 2,(int*)&arg0);
		#pragma warning NO CONVERSION TO NATIVE FOR int*;
		ok &= luaval_to_uint32(tolua_S, 4,&arg2);
		if(!ok)
			return 0;
		cobj->setUniformLocationWith4iv(arg0, arg1, arg2);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 3);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_GLProgram_setUniformLocationWith4iv'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_GLProgram_link(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::GLProgram* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"GLProgram",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::GLProgram*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_GLProgram_link'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->link();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_GLProgram_link'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_GLProgram_setUniformLocationWith2iv(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::GLProgram* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"GLProgram",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::GLProgram*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_GLProgram_setUniformLocationWith2iv'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 3) {
		int arg0;
		int* arg1;
		unsigned int arg2;
		ok &= luaval_to_int32(tolua_S, 2,(int*)&arg0);
		#pragma warning NO CONVERSION TO NATIVE FOR int*;
		ok &= luaval_to_uint32(tolua_S, 4,&arg2);
		if(!ok)
			return 0;
		cobj->setUniformLocationWith2iv(arg0, arg1, arg2);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 3);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_GLProgram_setUniformLocationWith2iv'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_GLProgram_reset(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::GLProgram* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"GLProgram",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::GLProgram*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_GLProgram_reset'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->reset();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_GLProgram_reset'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_GLProgram_setUniformLocationWith4i(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::GLProgram* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"GLProgram",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::GLProgram*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_GLProgram_setUniformLocationWith4i'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 5) {
		int arg0;
		int arg1;
		int arg2;
		int arg3;
		int arg4;
		ok &= luaval_to_int32(tolua_S, 2,(int*)&arg0);
		ok &= luaval_to_int32(tolua_S, 3,(int*)&arg1);
		ok &= luaval_to_int32(tolua_S, 4,(int*)&arg2);
		ok &= luaval_to_int32(tolua_S, 5,(int*)&arg3);
		ok &= luaval_to_int32(tolua_S, 6,(int*)&arg4);
		if(!ok)
			return 0;
		cobj->setUniformLocationWith4i(arg0, arg1, arg2, arg3, arg4);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 5);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_GLProgram_setUniformLocationWith4i'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_GLProgram_setUniformLocationWith1i(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::GLProgram* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"GLProgram",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::GLProgram*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_GLProgram_setUniformLocationWith1i'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		int arg0;
		int arg1;
		ok &= luaval_to_int32(tolua_S, 2,(int*)&arg0);
		ok &= luaval_to_int32(tolua_S, 3,(int*)&arg1);
		if(!ok)
			return 0;
		cobj->setUniformLocationWith1i(arg0, arg1);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_GLProgram_setUniformLocationWith1i'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_GLProgram_setUniformLocationWith2i(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::GLProgram* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"GLProgram",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::GLProgram*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_GLProgram_setUniformLocationWith2i'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 3) {
		int arg0;
		int arg1;
		int arg2;
		ok &= luaval_to_int32(tolua_S, 2,(int*)&arg0);
		ok &= luaval_to_int32(tolua_S, 3,(int*)&arg1);
		ok &= luaval_to_int32(tolua_S, 4,(int*)&arg2);
		if(!ok)
			return 0;
		cobj->setUniformLocationWith2i(arg0, arg1, arg2);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 3);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_GLProgram_setUniformLocationWith2i'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_GLProgram_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::GLProgram* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::GLProgram();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"GLProgram");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_GLProgram_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_GLProgram_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (GLProgram)");
	return 0;
}

int lua_register_cocos2dx_GLProgram(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"GLProgram");
	tolua_cclass(tolua_S,"GLProgram","GLProgram","",NULL);

	tolua_beginmodule(tolua_S,"GLProgram");
		tolua_function(tolua_S,"getFragmentShaderLog",lua_cocos2dx_GLProgram_fragmentShaderLog);
		tolua_function(tolua_S,"addAttribute",lua_cocos2dx_GLProgram_addAttribute);
		tolua_function(tolua_S,"setUniformLocationWithMatrix4fv",lua_cocos2dx_GLProgram_setUniformLocationWithMatrix4fv);
		tolua_function(tolua_S,"getUniformLocationForName",lua_cocos2dx_GLProgram_getUniformLocationForName);
		tolua_function(tolua_S,"use",lua_cocos2dx_GLProgram_use);
		tolua_function(tolua_S,"getVertexShaderLog",lua_cocos2dx_GLProgram_vertexShaderLog);
		tolua_function(tolua_S,"initWithString",lua_cocos2dx_GLProgram_initWithVertexShaderByteArray);
		tolua_function(tolua_S,"init",lua_cocos2dx_GLProgram_initWithVertexShaderFilename);
		tolua_function(tolua_S,"setUniformsForBuiltins",lua_cocos2dx_GLProgram_setUniformsForBuiltins);
		tolua_function(tolua_S,"setUniformLocationWith3i",lua_cocos2dx_GLProgram_setUniformLocationWith3i);
		tolua_function(tolua_S,"setUniformLocationWith3iv",lua_cocos2dx_GLProgram_setUniformLocationWith3iv);
		tolua_function(tolua_S,"updateUniforms",lua_cocos2dx_GLProgram_updateUniforms);
		tolua_function(tolua_S,"setUniformLocationWith4iv",lua_cocos2dx_GLProgram_setUniformLocationWith4iv);
		tolua_function(tolua_S,"link",lua_cocos2dx_GLProgram_link);
		tolua_function(tolua_S,"setUniformLocationWith2iv",lua_cocos2dx_GLProgram_setUniformLocationWith2iv);
		tolua_function(tolua_S,"reset",lua_cocos2dx_GLProgram_reset);
		tolua_function(tolua_S,"setUniformLocationWith4i",lua_cocos2dx_GLProgram_setUniformLocationWith4i);
		tolua_function(tolua_S,"setUniformLocationI32",lua_cocos2dx_GLProgram_setUniformLocationWith1i);
		tolua_function(tolua_S,"setUniformLocationWith2i",lua_cocos2dx_GLProgram_setUniformLocationWith2i);
		tolua_function(tolua_S,"new",lua_cocos2dx_GLProgram_constructor);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_Touch_getPreviousLocationInView(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Touch* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Touch",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Touch*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Touch_getPreviousLocationInView'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Point ret = cobj->getPreviousLocationInView();
		point_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Touch_getPreviousLocationInView'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Touch_getLocation(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Touch* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Touch",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Touch*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Touch_getLocation'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Point ret = cobj->getLocation();
		point_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Touch_getLocation'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Touch_getDelta(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Touch* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Touch",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Touch*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Touch_getDelta'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Point ret = cobj->getDelta();
		point_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Touch_getDelta'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Touch_getStartLocationInView(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Touch* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Touch",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Touch*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Touch_getStartLocationInView'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Point ret = cobj->getStartLocationInView();
		point_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Touch_getStartLocationInView'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Touch_getStartLocation(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Touch* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Touch",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Touch*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Touch_getStartLocation'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Point ret = cobj->getStartLocation();
		point_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Touch_getStartLocation'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Touch_getID(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Touch* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Touch",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Touch*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Touch_getID'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		int ret = cobj->getID();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Touch_getID'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Touch_setTouchInfo(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Touch* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Touch",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Touch*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Touch_setTouchInfo'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 3) {
		int arg0;
		double arg1;
		double arg2;
		ok &= luaval_to_int32(tolua_S, 2,(int*)&arg0);
		ok &= luaval_to_number(tolua_S, 3,&arg1);
		ok &= luaval_to_number(tolua_S, 4,&arg2);
		if(!ok)
			return 0;
		cobj->setTouchInfo(arg0, arg1, arg2);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 3);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Touch_setTouchInfo'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Touch_getLocationInView(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Touch* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Touch",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Touch*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Touch_getLocationInView'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Point ret = cobj->getLocationInView();
		point_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Touch_getLocationInView'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Touch_getPreviousLocation(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Touch* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Touch",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Touch*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Touch_getPreviousLocation'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Point ret = cobj->getPreviousLocation();
		point_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Touch_getPreviousLocation'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Touch_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Touch* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::Touch();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"Touch");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Touch_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_Touch_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (Touch)");
	return 0;
}

int lua_register_cocos2dx_Touch(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"Touch");
	tolua_cclass(tolua_S,"Touch","Touch","",NULL);

	tolua_beginmodule(tolua_S,"Touch");
		tolua_function(tolua_S,"getPreviousLocationInView",lua_cocos2dx_Touch_getPreviousLocationInView);
		tolua_function(tolua_S,"getLocation",lua_cocos2dx_Touch_getLocation);
		tolua_function(tolua_S,"getDelta",lua_cocos2dx_Touch_getDelta);
		tolua_function(tolua_S,"getStartLocationInView",lua_cocos2dx_Touch_getStartLocationInView);
		tolua_function(tolua_S,"getStartLocation",lua_cocos2dx_Touch_getStartLocation);
		tolua_function(tolua_S,"getId",lua_cocos2dx_Touch_getID);
		tolua_function(tolua_S,"setTouchInfo",lua_cocos2dx_Touch_setTouchInfo);
		tolua_function(tolua_S,"getLocationInView",lua_cocos2dx_Touch_getLocationInView);
		tolua_function(tolua_S,"getPreviousLocation",lua_cocos2dx_Touch_getPreviousLocation);
		tolua_function(tolua_S,"new",lua_cocos2dx_Touch_constructor);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_Set_count(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Set* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Set",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Set*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Set_count'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		int ret = cobj->count();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Set_count'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Set_addObject(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Set* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Set",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Set*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Set_addObject'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Object* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Object",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Object*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->addObject(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Set_addObject'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Set_mutableCopy(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Set* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Set",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Set*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Set_mutableCopy'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Set* ret = cobj->mutableCopy();
		tolua_pushusertype(tolua_S,ret,"Set");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Set_mutableCopy'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Set_anyObject(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Set* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Set",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Set*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Set_anyObject'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Object* ret = cobj->anyObject();
		tolua_pushusertype(tolua_S,ret,"Object");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Set_anyObject'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Set_removeAllObjects(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Set* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Set",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Set*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Set_removeAllObjects'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->removeAllObjects();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Set_removeAllObjects'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Set_removeObject(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Set* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Set",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Set*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Set_removeObject'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Object* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Object",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Object*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->removeObject(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Set_removeObject'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Set_copy(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Set* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Set",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Set*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Set_copy'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Set* ret = cobj->copy();
		tolua_pushusertype(tolua_S,ret,"Set");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Set_copy'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Set_containsObject(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Set* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Set",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Set*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Set_containsObject'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Object* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Object",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Object*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		bool ret = cobj->containsObject(arg0);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Set_containsObject'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Set_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"Set",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 0) {
		if(!ok)
			return 0;
		cocos2d::Set* ret = cocos2d::Set::create();
		tolua_pushusertype(tolua_S,ret,"Set");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Set_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_Set_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (Set)");
	return 0;
}

int lua_register_cocos2dx_Set(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"Set");
	tolua_cclass(tolua_S,"Set","Set","",NULL);

	tolua_beginmodule(tolua_S,"Set");
		tolua_function(tolua_S,"count",lua_cocos2dx_Set_count);
		tolua_function(tolua_S,"addObject",lua_cocos2dx_Set_addObject);
		tolua_function(tolua_S,"mutableCopy",lua_cocos2dx_Set_mutableCopy);
		tolua_function(tolua_S,"anyObject",lua_cocos2dx_Set_anyObject);
		tolua_function(tolua_S,"removeAllObjects",lua_cocos2dx_Set_removeAllObjects);
		tolua_function(tolua_S,"removeObject",lua_cocos2dx_Set_removeObject);
		tolua_function(tolua_S,"copy",lua_cocos2dx_Set_copy);
		tolua_function(tolua_S,"containsObject",lua_cocos2dx_Set_containsObject);
		tolua_function(tolua_S,"create", lua_cocos2dx_Set_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_Texture2D_getShaderProgram(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Texture2D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Texture2D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Texture2D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Texture2D_getShaderProgram'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::GLProgram* ret = cobj->getShaderProgram();
		tolua_pushusertype(tolua_S,ret,"GLProgram");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Texture2D_getShaderProgram'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Texture2D_getMaxT(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Texture2D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Texture2D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Texture2D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Texture2D_getMaxT'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getMaxT();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Texture2D_getMaxT'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Texture2D_getStringForFormat(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Texture2D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Texture2D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Texture2D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Texture2D_getStringForFormat'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		const char* ret = cobj->getStringForFormat();
		tolua_pushstring(tolua_S,(const char*)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Texture2D_getStringForFormat'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Texture2D_initWithImage(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Texture2D* cobj = NULL;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Texture2D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Texture2D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Texture2D_initWithImage'", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	do{
		if (argc == 2) {
			cocos2d::Image* arg0;
			#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Image",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Image*)tolua_tousertype(tolua_S,2,0);
		};

			if (!ok) { ok = true; break; }
			cocos2d::Texture2D::PixelFormat arg1;
			ok &= luaval_to_int32(tolua_S, 3,(int*)&arg1);

			if (!ok) { ok = true; break; }
		bool ret = cobj->initWithImage(arg0, arg1);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
		}
	}while(0);
	do{
		if (argc == 1) {
			cocos2d::Image* arg0;
			#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Image",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Image*)tolua_tousertype(tolua_S,2,0);
		};

			if (!ok) { ok = true; break; }
		bool ret = cobj->initWithImage(arg0);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
		}
	}while(0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Texture2D_initWithImage'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Texture2D_setShaderProgram(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Texture2D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Texture2D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Texture2D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Texture2D_setShaderProgram'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::GLProgram* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"GLProgram",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::GLProgram*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->setShaderProgram(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Texture2D_setShaderProgram'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Texture2D_getMaxS(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Texture2D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Texture2D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Texture2D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Texture2D_getMaxS'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getMaxS();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Texture2D_getMaxS'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Texture2D_hasPremultipliedAlpha(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Texture2D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Texture2D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Texture2D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Texture2D_hasPremultipliedAlpha'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->hasPremultipliedAlpha();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Texture2D_hasPremultipliedAlpha'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Texture2D_getPixelsHigh(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Texture2D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Texture2D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Texture2D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Texture2D_getPixelsHigh'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		unsigned int ret = cobj->getPixelsHigh();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Texture2D_getPixelsHigh'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Texture2D_initWithMipmaps(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Texture2D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Texture2D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Texture2D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Texture2D_initWithMipmaps'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 5) {
		MipmapInfo* arg0;
		int arg1;
		cocos2d::Texture2D::PixelFormat arg2;
		unsigned int arg3;
		unsigned int arg4;
		#pragma warning NO CONVERSION TO NATIVE FOR MipmapInfo*;
		ok &= luaval_to_int32(tolua_S, 3,(int*)&arg1);
		ok &= luaval_to_int32(tolua_S, 4,(int*)&arg2);
		ok &= luaval_to_uint32(tolua_S, 5,&arg3);
		ok &= luaval_to_uint32(tolua_S, 6,&arg4);
		if(!ok)
			return 0;
		bool ret = cobj->initWithMipmaps(arg0, arg1, arg2, arg3, arg4);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 5);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Texture2D_initWithMipmaps'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Texture2D_getBitsPerPixelForFormat(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Texture2D* cobj = NULL;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Texture2D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Texture2D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Texture2D_getBitsPerPixelForFormat'", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	do{
		if (argc == 1) {
			cocos2d::Texture2D::PixelFormat arg0;
			ok &= luaval_to_int32(tolua_S, 2,(int*)&arg0);

			if (!ok) { ok = true; break; }
		unsigned int ret = cobj->getBitsPerPixelForFormat(arg0);
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
		}
	}while(0);
	do{
		if (argc == 0) {
		unsigned int ret = cobj->getBitsPerPixelForFormat();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
		}
	}while(0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Texture2D_getBitsPerPixelForFormat'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Texture2D_getName(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Texture2D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Texture2D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Texture2D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Texture2D_getName'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		unsigned int ret = cobj->getName();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Texture2D_getName'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Texture2D_initWithString(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Texture2D* cobj = NULL;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Texture2D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Texture2D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Texture2D_initWithString'", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	do{
		if (argc == 2) {
			const char* arg0;
			std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();

			if (!ok) { ok = true; break; }
			cocos2d::FontDefinition arg1;
			ok &= luaval_to_fontdefinition(tolua_S, 3, &arg1);

			if (!ok) { ok = true; break; }
		bool ret = cobj->initWithString(arg0, arg1);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
		}
	}while(0);
	do{
		if (argc == 3) {
			const char* arg0;
			std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();

			if (!ok) { ok = true; break; }
			const char* arg1;
			std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp); arg1 = arg1_tmp.c_str();

			if (!ok) { ok = true; break; }
			double arg2;
			ok &= luaval_to_number(tolua_S, 4,&arg2);

			if (!ok) { ok = true; break; }
		bool ret = cobj->initWithString(arg0, arg1, arg2);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
		}
	}while(0);
	do{
		if (argc == 4) {
			const char* arg0;
			std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();

			if (!ok) { ok = true; break; }
			const char* arg1;
			std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp); arg1 = arg1_tmp.c_str();

			if (!ok) { ok = true; break; }
			double arg2;
			ok &= luaval_to_number(tolua_S, 4,&arg2);

			if (!ok) { ok = true; break; }
			cocos2d::Size arg3;
			ok &= luaval_to_size(tolua_S, 5, &arg3);

			if (!ok) { ok = true; break; }
		bool ret = cobj->initWithString(arg0, arg1, arg2, arg3);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
		}
	}while(0);
	do{
		if (argc == 5) {
			const char* arg0;
			std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();

			if (!ok) { ok = true; break; }
			const char* arg1;
			std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp); arg1 = arg1_tmp.c_str();

			if (!ok) { ok = true; break; }
			double arg2;
			ok &= luaval_to_number(tolua_S, 4,&arg2);

			if (!ok) { ok = true; break; }
			cocos2d::Size arg3;
			ok &= luaval_to_size(tolua_S, 5, &arg3);

			if (!ok) { ok = true; break; }
			cocos2d::TextHAlignment arg4;
			ok &= luaval_to_int32(tolua_S, 6,(int*)&arg4);

			if (!ok) { ok = true; break; }
		bool ret = cobj->initWithString(arg0, arg1, arg2, arg3, arg4);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
		}
	}while(0);
	do{
		if (argc == 6) {
			const char* arg0;
			std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();

			if (!ok) { ok = true; break; }
			const char* arg1;
			std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp); arg1 = arg1_tmp.c_str();

			if (!ok) { ok = true; break; }
			double arg2;
			ok &= luaval_to_number(tolua_S, 4,&arg2);

			if (!ok) { ok = true; break; }
			cocos2d::Size arg3;
			ok &= luaval_to_size(tolua_S, 5, &arg3);

			if (!ok) { ok = true; break; }
			cocos2d::TextHAlignment arg4;
			ok &= luaval_to_int32(tolua_S, 6,(int*)&arg4);

			if (!ok) { ok = true; break; }
			cocos2d::TextVAlignment arg5;
			ok &= luaval_to_int32(tolua_S, 7,(int*)&arg5);

			if (!ok) { ok = true; break; }
		bool ret = cobj->initWithString(arg0, arg1, arg2, arg3, arg4, arg5);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
		}
	}while(0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 3);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Texture2D_initWithString'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Texture2D_setMaxT(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Texture2D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Texture2D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Texture2D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Texture2D_setMaxT'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setMaxT(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Texture2D_setMaxT'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Texture2D_drawInRect(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Texture2D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Texture2D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Texture2D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Texture2D_drawInRect'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Rect arg0;
		ok &= luaval_to_rect(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->drawInRect(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Texture2D_drawInRect'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Texture2D_getContentSize(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Texture2D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Texture2D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Texture2D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Texture2D_getContentSize'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Size ret = cobj->getContentSize();
		size_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Texture2D_getContentSize'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Texture2D_setAliasTexParameters(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Texture2D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Texture2D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Texture2D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Texture2D_setAliasTexParameters'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->setAliasTexParameters();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Texture2D_setAliasTexParameters'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Texture2D_setAntiAliasTexParameters(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Texture2D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Texture2D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Texture2D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Texture2D_setAntiAliasTexParameters'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->setAntiAliasTexParameters();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Texture2D_setAntiAliasTexParameters'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Texture2D_generateMipmap(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Texture2D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Texture2D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Texture2D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Texture2D_generateMipmap'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->generateMipmap();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Texture2D_generateMipmap'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Texture2D_getPixelFormat(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Texture2D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Texture2D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Texture2D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Texture2D_getPixelFormat'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		int ret = (int)cobj->getPixelFormat();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Texture2D_getPixelFormat'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Texture2D_getContentSizeInPixels(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Texture2D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Texture2D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Texture2D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Texture2D_getContentSizeInPixels'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Size ret = cobj->getContentSizeInPixels();
		size_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Texture2D_getContentSizeInPixels'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Texture2D_getPixelsWide(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Texture2D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Texture2D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Texture2D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Texture2D_getPixelsWide'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		unsigned int ret = cobj->getPixelsWide();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Texture2D_getPixelsWide'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Texture2D_drawAtPoint(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Texture2D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Texture2D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Texture2D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Texture2D_drawAtPoint'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Point arg0;
		ok &= luaval_to_point(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->drawAtPoint(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Texture2D_drawAtPoint'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Texture2D_hasMipmaps(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Texture2D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Texture2D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Texture2D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Texture2D_hasMipmaps'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->hasMipmaps();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Texture2D_hasMipmaps'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Texture2D_setMaxS(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Texture2D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Texture2D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Texture2D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Texture2D_setMaxS'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setMaxS(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Texture2D_setMaxS'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Texture2D_setDefaultAlphaPixelFormat(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"Texture2D",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 1) {
		cocos2d::Texture2D::PixelFormat arg0;
		ok &= luaval_to_int32(tolua_S, 2,(int*)&arg0);
		if(!ok)
			return 0;
		cocos2d::Texture2D::setDefaultAlphaPixelFormat(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Texture2D_setDefaultAlphaPixelFormat'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_Texture2D_getDefaultAlphaPixelFormat(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"Texture2D",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 0) {
		if(!ok)
			return 0;
		int ret = (int)cocos2d::Texture2D::getDefaultAlphaPixelFormat();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Texture2D_getDefaultAlphaPixelFormat'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_Texture2D_PVRImagesHavePremultipliedAlpha(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"Texture2D",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cocos2d::Texture2D::PVRImagesHavePremultipliedAlpha(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Texture2D_PVRImagesHavePremultipliedAlpha'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_Texture2D_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Texture2D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::Texture2D();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"Texture2D");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Texture2D_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_Texture2D_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (Texture2D)");
	return 0;
}

int lua_register_cocos2dx_Texture2D(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"Texture2D");
	tolua_cclass(tolua_S,"Texture2D","Texture2D","",NULL);

	tolua_beginmodule(tolua_S,"Texture2D");
		tolua_function(tolua_S,"getShaderProgram",lua_cocos2dx_Texture2D_getShaderProgram);
		tolua_function(tolua_S,"getMaxT",lua_cocos2dx_Texture2D_getMaxT);
		tolua_function(tolua_S,"getStringForFormat",lua_cocos2dx_Texture2D_getStringForFormat);
		tolua_function(tolua_S,"initWithImage",lua_cocos2dx_Texture2D_initWithImage);
		tolua_function(tolua_S,"setShaderProgram",lua_cocos2dx_Texture2D_setShaderProgram);
		tolua_function(tolua_S,"getMaxS",lua_cocos2dx_Texture2D_getMaxS);
		tolua_function(tolua_S,"hasPremultipliedAlpha",lua_cocos2dx_Texture2D_hasPremultipliedAlpha);
		tolua_function(tolua_S,"getPixelsHigh",lua_cocos2dx_Texture2D_getPixelsHigh);
		tolua_function(tolua_S,"initWithMipmaps",lua_cocos2dx_Texture2D_initWithMipmaps);
		tolua_function(tolua_S,"getBitsPerPixelForFormat",lua_cocos2dx_Texture2D_getBitsPerPixelForFormat);
		tolua_function(tolua_S,"getName",lua_cocos2dx_Texture2D_getName);
		tolua_function(tolua_S,"initWithString",lua_cocos2dx_Texture2D_initWithString);
		tolua_function(tolua_S,"setMaxT",lua_cocos2dx_Texture2D_setMaxT);
		tolua_function(tolua_S,"drawInRect",lua_cocos2dx_Texture2D_drawInRect);
		tolua_function(tolua_S,"getContentSize",lua_cocos2dx_Texture2D_getContentSize);
		tolua_function(tolua_S,"setAliasTexParameters",lua_cocos2dx_Texture2D_setAliasTexParameters);
		tolua_function(tolua_S,"setAntiAliasTexParameters",lua_cocos2dx_Texture2D_setAntiAliasTexParameters);
		tolua_function(tolua_S,"generateMipmap",lua_cocos2dx_Texture2D_generateMipmap);
		tolua_function(tolua_S,"getPixelFormat",lua_cocos2dx_Texture2D_getPixelFormat);
		tolua_function(tolua_S,"getContentSizeInPixels",lua_cocos2dx_Texture2D_getContentSizeInPixels);
		tolua_function(tolua_S,"getPixelsWide",lua_cocos2dx_Texture2D_getPixelsWide);
		tolua_function(tolua_S,"drawAtPoint",lua_cocos2dx_Texture2D_drawAtPoint);
		tolua_function(tolua_S,"hasMipmaps",lua_cocos2dx_Texture2D_hasMipmaps);
		tolua_function(tolua_S,"setMaxS",lua_cocos2dx_Texture2D_setMaxS);
		tolua_function(tolua_S,"new",lua_cocos2dx_Texture2D_constructor);
		tolua_function(tolua_S,"setDefaultAlphaPixelFormat", lua_cocos2dx_Texture2D_setDefaultAlphaPixelFormat);
		tolua_function(tolua_S,"getDefaultAlphaPixelFormat", lua_cocos2dx_Texture2D_getDefaultAlphaPixelFormat);
		tolua_function(tolua_S,"PVRImagesHavePremultipliedAlpha", lua_cocos2dx_Texture2D_PVRImagesHavePremultipliedAlpha);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_Node_addChild(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = NULL;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_addChild'", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	do{
		if (argc == 2) {
			cocos2d::Node* arg0;
			#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};

			if (!ok) { ok = true; break; }
			int arg1;
			ok &= luaval_to_int32(tolua_S, 3,(int*)&arg1);

			if (!ok) { ok = true; break; }
		cobj->addChild(arg0, arg1);
		return 0;
		}
	}while(0);
	do{
		if (argc == 1) {
			cocos2d::Node* arg0;
			#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};

			if (!ok) { ok = true; break; }
		cobj->addChild(arg0);
		return 0;
		}
	}while(0);
	do{
		if (argc == 3) {
			cocos2d::Node* arg0;
			#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};

			if (!ok) { ok = true; break; }
			int arg1;
			ok &= luaval_to_int32(tolua_S, 3,(int*)&arg1);

			if (!ok) { ok = true; break; }
			int arg2;
			ok &= luaval_to_int32(tolua_S, 4,(int*)&arg2);

			if (!ok) { ok = true; break; }
		cobj->addChild(arg0, arg1, arg2);
		return 0;
		}
	}while(0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 3);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_addChild'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_removeComponent(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_removeComponent'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		const char* arg0;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		if(!ok)
			return 0;
		bool ret = cobj->removeComponent(arg0);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_removeComponent'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_getShaderProgram(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = NULL;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_getShaderProgram'", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	do{
		if (argc == 0) {
		cocos2d::GLProgram* ret = cobj->getShaderProgram();
		tolua_pushusertype(tolua_S,ret,"GLProgram");
	    return 1;
		}
	}while(0);
	do{
		if (argc == 0) {
		cocos2d::GLProgram* ret = cobj->getShaderProgram();
		tolua_pushusertype(tolua_S,ret,"GLProgram");
	    return 1;
		}
	}while(0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_getShaderProgram'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_getChildren(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = NULL;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_getChildren'", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	do{
		if (argc == 0) {
		cocos2d::Array* ret = cobj->getChildren();
		array_to_luaval(tolua_S, ret);
	    return 1;
		}
	}while(0);
	do{
		if (argc == 0) {
		cocos2d::Array* ret = cobj->getChildren();
		array_to_luaval(tolua_S, ret);
	    return 1;
		}
	}while(0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_getChildren'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_convertToWorldSpaceAR(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_convertToWorldSpaceAR'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Point arg0;
		ok &= luaval_to_point(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cocos2d::Point ret = cobj->convertToWorldSpaceAR(arg0);
		point_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_convertToWorldSpaceAR'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_isIgnoreAnchorPointForPosition(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_isIgnoreAnchorPointForPosition'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->isIgnoreAnchorPointForPosition();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_isIgnoreAnchorPointForPosition'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_init(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_init'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->init();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_init'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_setRotation(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_setRotation'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setRotation(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_setRotation'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_setZOrder(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_setZOrder'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		int arg0;
		ok &= luaval_to_int32(tolua_S, 2,(int*)&arg0);
		if(!ok)
			return 0;
		cobj->setZOrder(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_setZOrder'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_setScaleY(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_setScaleY'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setScaleY(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_setScaleY'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_setScaleX(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_setScaleX'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setScaleX(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_setScaleX'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_removeAllComponents(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_removeAllComponents'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->removeAllComponents();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_removeAllComponents'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_getTag(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_getTag'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		int ret = cobj->getTag();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_getTag'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_getNodeToWorldTransform(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_getNodeToWorldTransform'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::AffineTransform ret = cobj->getNodeToWorldTransform();
		affinetransform_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_getNodeToWorldTransform'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_removeChild(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_removeChild'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Node* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->removeChild(arg0);
		return 0;
	}
	if (argc == 2) {
		cocos2d::Node* arg0;
		bool arg1;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		ok &= luaval_to_boolean(tolua_S, 3,&arg1);
		if(!ok)
			return 0;
		cobj->removeChild(arg0, arg1);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_removeChild'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_convertToWorldSpace(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_convertToWorldSpace'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Point arg0;
		ok &= luaval_to_point(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cocos2d::Point ret = cobj->convertToWorldSpace(arg0);
		point_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_convertToWorldSpace'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_setSkewX(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_setSkewX'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setSkewX(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_setSkewX'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_setSkewY(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_setSkewY'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setSkewY(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_setSkewY'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_convertTouchToNodeSpace(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_convertTouchToNodeSpace'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Touch* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Touch",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Touch*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cocos2d::Point ret = cobj->convertTouchToNodeSpace(arg0);
		point_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_convertTouchToNodeSpace'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_removeAllChildrenWithCleanup(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = NULL;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_removeAllChildrenWithCleanup'", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	do{
		if (argc == 1) {
			bool arg0;
			ok &= luaval_to_boolean(tolua_S, 2,&arg0);

			if (!ok) { ok = true; break; }
		cobj->removeAllChildrenWithCleanup(arg0);
		return 0;
		}
	}while(0);
	do{
		if (argc == 0) {
		cobj->removeAllChildren();
		return 0;
		}
	}while(0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_removeAllChildrenWithCleanup'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_getRotationX(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_getRotationX'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getRotationX();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_getRotationX'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_getRotationY(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_getRotationY'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getRotationY();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_getRotationY'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_setParent(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_setParent'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Node* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->setParent(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_setParent'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_getNodeToParentTransform(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_getNodeToParentTransform'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::AffineTransform ret = cobj->getNodeToParentTransform();
		affinetransform_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_getNodeToParentTransform'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_convertToNodeSpace(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_convertToNodeSpace'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Point arg0;
		ok &= luaval_to_point(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cocos2d::Point ret = cobj->convertToNodeSpace(arg0);
		point_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_convertToNodeSpace'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_setPosition(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = NULL;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_setPosition'", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	do{
		if (argc == 2) {
			double arg0;
			ok &= luaval_to_number(tolua_S, 2,&arg0);

			if (!ok) { ok = true; break; }
			double arg1;
			ok &= luaval_to_number(tolua_S, 3,&arg1);

			if (!ok) { ok = true; break; }
		cobj->setPosition(arg0, arg1);
		return 0;
		}
	}while(0);
	do{
		if (argc == 1) {
			cocos2d::Point arg0;
			ok &= luaval_to_point(tolua_S, 2, &arg0);

			if (!ok) { ok = true; break; }
		cobj->setPosition(arg0);
		return 0;
		}
	}while(0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_setPosition'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_stopActionByTag(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_stopActionByTag'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		int arg0;
		ok &= luaval_to_int32(tolua_S, 2,(int*)&arg0);
		if(!ok)
			return 0;
		cobj->stopActionByTag(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_stopActionByTag'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_reorderChild(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_reorderChild'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		cocos2d::Node* arg0;
		int arg1;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		ok &= luaval_to_int32(tolua_S, 3,(int*)&arg1);
		if(!ok)
			return 0;
		cobj->reorderChild(arg0, arg1);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_reorderChild'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_ignoreAnchorPointForPosition(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_ignoreAnchorPointForPosition'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->ignoreAnchorPointForPosition(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_ignoreAnchorPointForPosition'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_setPositionY(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_setPositionY'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setPositionY(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_setPositionY'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_setPositionX(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_setPositionX'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setPositionX(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_setPositionX'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_getAnchorPoint(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_getAnchorPoint'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Point ret = cobj->getAnchorPoint();
		point_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_getAnchorPoint'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_getNumberOfRunningActions(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_getNumberOfRunningActions'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		unsigned int ret = cobj->getNumberOfRunningActions();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_getNumberOfRunningActions'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_updateTransform(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_updateTransform'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->updateTransform();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_updateTransform'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_isVisible(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_isVisible'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->isVisible();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_isVisible'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_getChildrenCount(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_getChildrenCount'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		unsigned int ret = cobj->getChildrenCount();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_getChildrenCount'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_setAnchorPoint(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_setAnchorPoint'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Point arg0;
		ok &= luaval_to_point(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->setAnchorPoint(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_setAnchorPoint'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_convertToNodeSpaceAR(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_convertToNodeSpaceAR'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Point arg0;
		ok &= luaval_to_point(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cocos2d::Point ret = cobj->convertToNodeSpaceAR(arg0);
		point_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_convertToNodeSpaceAR'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_addComponent(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_addComponent'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Component* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Component",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Component*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		bool ret = cobj->addComponent(arg0);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_addComponent'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_visit(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_visit'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->visit();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_visit'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_setShaderProgram(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_setShaderProgram'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::GLProgram* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"GLProgram",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::GLProgram*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->setShaderProgram(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_setShaderProgram'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_getRotation(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_getRotation'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getRotation();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_getRotation'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_resumeSchedulerAndActions(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_resumeSchedulerAndActions'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->resumeSchedulerAndActions();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_resumeSchedulerAndActions'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_getZOrder(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_getZOrder'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		int ret = cobj->getZOrder();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_getZOrder'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_getAnchorPointInPoints(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_getAnchorPointInPoints'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Point ret = cobj->getAnchorPointInPoints();
		point_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_getAnchorPointInPoints'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_runAction(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_runAction'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Action* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Action",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Action*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cocos2d::Action* ret = cobj->runAction(arg0);
		tolua_pushusertype(tolua_S,ret,"Action");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_runAction'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_transform(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_transform'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->transform();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_transform'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_setVertexZ(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_setVertexZ'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setVertexZ(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_setVertexZ'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_setScheduler(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_setScheduler'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Scheduler* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Scheduler",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Scheduler*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->setScheduler(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_setScheduler'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_stopAllActions(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_stopAllActions'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->stopAllActions();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_stopAllActions'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_getSkewX(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_getSkewX'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getSkewX();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_getSkewX'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_getSkewY(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_getSkewY'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getSkewY();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_getSkewY'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_getActionByTag(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_getActionByTag'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		int arg0;
		ok &= luaval_to_int32(tolua_S, 2,(int*)&arg0);
		if(!ok)
			return 0;
		cocos2d::Action* ret = cobj->getActionByTag(arg0);
		tolua_pushusertype(tolua_S,ret,"Action");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_getActionByTag'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_setRotationX(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_setRotationX'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setRotationX(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_setRotationX'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_setRotationY(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_setRotationY'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setRotationY(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_setRotationY'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_setAdditionalTransform(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_setAdditionalTransform'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::AffineTransform arg0;
		ok &= luaval_to_affinetransform(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->setAdditionalTransform(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_setAdditionalTransform'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_getScheduler(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = NULL;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_getScheduler'", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	do{
		if (argc == 0) {
		cocos2d::Scheduler* ret = cobj->getScheduler();
		tolua_pushusertype(tolua_S,ret,"Scheduler");
	    return 1;
		}
	}while(0);
	do{
		if (argc == 0) {
		cocos2d::Scheduler* ret = cobj->getScheduler();
		tolua_pushusertype(tolua_S,ret,"Scheduler");
	    return 1;
		}
	}while(0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_getScheduler'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_getOrderOfArrival(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_getOrderOfArrival'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		int ret = cobj->getOrderOfArrival();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_getOrderOfArrival'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_setContentSize(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_setContentSize'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Size arg0;
		ok &= luaval_to_size(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->setContentSize(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_setContentSize'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_setActionManager(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_setActionManager'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::ActionManager* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"ActionManager",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::ActionManager*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->setActionManager(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_setActionManager'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_getPosition(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = NULL;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_getPosition'", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	do{
		if (argc == 2) {
			float* arg0;
			#pragma warning NO CONVERSION TO NATIVE FOR float*;

			if (!ok) { ok = true; break; }
			float* arg1;
			#pragma warning NO CONVERSION TO NATIVE FOR float*;

			if (!ok) { ok = true; break; }
		cobj->getPosition(arg0, arg1);
		return 0;
		}
	}while(0);
	do{
		if (argc == 0) {
		cocos2d::Point ret = cobj->getPosition();
		point_to_luaval(tolua_S, ret);
	    return 1;
		}
	}while(0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_getPosition'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_isRunning(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_isRunning'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->isRunning();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_isRunning'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_getParent(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = NULL;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_getParent'", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	do{
		if (argc == 0) {
		cocos2d::Node* ret = cobj->getParent();
		tolua_pushusertype(tolua_S,ret,"Node");
	    return 1;
		}
	}while(0);
	do{
		if (argc == 0) {
		cocos2d::Node* ret = cobj->getParent();
		tolua_pushusertype(tolua_S,ret,"Node");
	    return 1;
		}
	}while(0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_getParent'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_getPositionY(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_getPositionY'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getPositionY();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_getPositionY'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_getPositionX(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_getPositionX'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getPositionX();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_getPositionX'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_removeChildByTag(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_removeChildByTag'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		int arg0;
		ok &= luaval_to_int32(tolua_S, 2,(int*)&arg0);
		if(!ok)
			return 0;
		cobj->removeChildByTag(arg0);
		return 0;
	}
	if (argc == 2) {
		int arg0;
		bool arg1;
		ok &= luaval_to_int32(tolua_S, 2,(int*)&arg0);
		ok &= luaval_to_boolean(tolua_S, 3,&arg1);
		if(!ok)
			return 0;
		cobj->removeChildByTag(arg0, arg1);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_removeChildByTag'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_setVisible(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_setVisible'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setVisible(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_setVisible'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_getParentToNodeTransform(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_getParentToNodeTransform'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::AffineTransform ret = cobj->getParentToNodeTransform();
		affinetransform_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_getParentToNodeTransform'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_pauseSchedulerAndActions(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_pauseSchedulerAndActions'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->pauseSchedulerAndActions();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_pauseSchedulerAndActions'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_getVertexZ(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_getVertexZ'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getVertexZ();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_getVertexZ'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node__setZOrder(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node__setZOrder'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		int arg0;
		ok &= luaval_to_int32(tolua_S, 2,(int*)&arg0);
		if(!ok)
			return 0;
		cobj->_setZOrder(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node__setZOrder'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_setScale(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_setScale'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setScale(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_setScale'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_getChildByTag(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_getChildByTag'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		int arg0;
		ok &= luaval_to_int32(tolua_S, 2,(int*)&arg0);
		if(!ok)
			return 0;
		cocos2d::Node* ret = cobj->getChildByTag(arg0);
		tolua_pushusertype(tolua_S,ret,"Node");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_getChildByTag'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_setOrderOfArrival(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_setOrderOfArrival'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		int arg0;
		ok &= luaval_to_int32(tolua_S, 2,(int*)&arg0);
		if(!ok)
			return 0;
		cobj->setOrderOfArrival(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_setOrderOfArrival'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_getScaleY(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_getScaleY'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getScaleY();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_getScaleY'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_getScaleX(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_getScaleX'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getScaleX();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_getScaleX'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_cleanup(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_cleanup'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->cleanup();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_cleanup'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_getComponent(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_getComponent'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		const char* arg0;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		if(!ok)
			return 0;
		cocos2d::Component* ret = cobj->getComponent(arg0);
		tolua_pushusertype(tolua_S,ret,"Component");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_getComponent'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_getContentSize(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_getContentSize'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Size ret = cobj->getContentSize();
		size_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_getContentSize'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_setGrid(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_setGrid'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::GridBase* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"GridBase",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::GridBase*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->setGrid(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_setGrid'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_getBoundingBox(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_getBoundingBox'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Rect ret = cobj->getBoundingBox();
		rect_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_getBoundingBox'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_draw(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_draw'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->draw();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_draw'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_transformAncestors(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_transformAncestors'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->transformAncestors();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_transformAncestors'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_setUserObject(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_setUserObject'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Object* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Object",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Object*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->setUserObject(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_setUserObject'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_removeFromParentAndCleanup(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = NULL;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_removeFromParentAndCleanup'", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	do{
		if (argc == 1) {
			bool arg0;
			ok &= luaval_to_boolean(tolua_S, 2,&arg0);

			if (!ok) { ok = true; break; }
		cobj->removeFromParentAndCleanup(arg0);
		return 0;
		}
	}while(0);
	do{
		if (argc == 0) {
		cobj->removeFromParent();
		return 0;
		}
	}while(0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_removeFromParentAndCleanup'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_convertTouchToNodeSpaceAR(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_convertTouchToNodeSpaceAR'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Touch* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Touch",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Touch*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cocos2d::Point ret = cobj->convertTouchToNodeSpaceAR(arg0);
		point_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_convertTouchToNodeSpaceAR'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_sortAllChildren(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_sortAllChildren'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->sortAllChildren();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_sortAllChildren'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_getWorldToNodeTransform(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_getWorldToNodeTransform'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::AffineTransform ret = cobj->getWorldToNodeTransform();
		affinetransform_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_getWorldToNodeTransform'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_getScale(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_getScale'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getScale();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_getScale'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_getCamera(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_getCamera'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Camera* ret = cobj->getCamera();
		tolua_pushusertype(tolua_S,ret,"Camera");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_getCamera'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_setTag(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_setTag'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		int arg0;
		ok &= luaval_to_int32(tolua_S, 2,(int*)&arg0);
		if(!ok)
			return 0;
		cobj->setTag(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_setTag'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_stopAction(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_stopAction'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Action* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Action",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Action*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->stopAction(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_stopAction'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_getActionManager(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = NULL;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Node*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Node_getActionManager'", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	do{
		if (argc == 0) {
		cocos2d::ActionManager* ret = cobj->getActionManager();
		tolua_pushusertype(tolua_S,ret,"ActionManager");
	    return 1;
		}
	}while(0);
	do{
		if (argc == 0) {
		cocos2d::ActionManager* ret = cobj->getActionManager();
		tolua_pushusertype(tolua_S,ret,"ActionManager");
	    return 1;
		}
	}while(0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_getActionManager'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Node_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"Node",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 0) {
		if(!ok)
			return 0;
		cocos2d::Node* ret = cocos2d::Node::create();
		tolua_pushusertype(tolua_S,ret,"Node");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_Node_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Node* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::Node();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"Node");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Node_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_Node_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (Node)");
	return 0;
}

int lua_register_cocos2dx_Node(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"Node");
	tolua_cclass(tolua_S,"Node","Node","",NULL);

	tolua_beginmodule(tolua_S,"Node");
		tolua_function(tolua_S,"addChild",lua_cocos2dx_Node_addChild);
		tolua_function(tolua_S,"removeComponent",lua_cocos2dx_Node_removeComponent);
		tolua_function(tolua_S,"getShaderProgram",lua_cocos2dx_Node_getShaderProgram);
		tolua_function(tolua_S,"getChildren",lua_cocos2dx_Node_getChildren);
		tolua_function(tolua_S,"convertToWorldSpaceAR",lua_cocos2dx_Node_convertToWorldSpaceAR);
		tolua_function(tolua_S,"isIgnoreAnchorPointForPosition",lua_cocos2dx_Node_isIgnoreAnchorPointForPosition);
		tolua_function(tolua_S,"init",lua_cocos2dx_Node_init);
		tolua_function(tolua_S,"setRotation",lua_cocos2dx_Node_setRotation);
		tolua_function(tolua_S,"setZOrder",lua_cocos2dx_Node_setZOrder);
		tolua_function(tolua_S,"setScaleY",lua_cocos2dx_Node_setScaleY);
		tolua_function(tolua_S,"setScaleX",lua_cocos2dx_Node_setScaleX);
		tolua_function(tolua_S,"removeAllComponents",lua_cocos2dx_Node_removeAllComponents);
		tolua_function(tolua_S,"getTag",lua_cocos2dx_Node_getTag);
		tolua_function(tolua_S,"getNodeToWorldTransform",lua_cocos2dx_Node_getNodeToWorldTransform);
		tolua_function(tolua_S,"removeChild",lua_cocos2dx_Node_removeChild);
		tolua_function(tolua_S,"convertToWorldSpace",lua_cocos2dx_Node_convertToWorldSpace);
		tolua_function(tolua_S,"setSkewX",lua_cocos2dx_Node_setSkewX);
		tolua_function(tolua_S,"setSkewY",lua_cocos2dx_Node_setSkewY);
		tolua_function(tolua_S,"convertTouchToNodeSpace",lua_cocos2dx_Node_convertTouchToNodeSpace);
		tolua_function(tolua_S,"removeAllChildren",lua_cocos2dx_Node_removeAllChildrenWithCleanup);
		tolua_function(tolua_S,"getRotationX",lua_cocos2dx_Node_getRotationX);
		tolua_function(tolua_S,"getRotationY",lua_cocos2dx_Node_getRotationY);
		tolua_function(tolua_S,"setParent",lua_cocos2dx_Node_setParent);
		tolua_function(tolua_S,"getNodeToParentTransform",lua_cocos2dx_Node_getNodeToParentTransform);
		tolua_function(tolua_S,"convertToNodeSpace",lua_cocos2dx_Node_convertToNodeSpace);
		tolua_function(tolua_S,"setPosition",lua_cocos2dx_Node_setPosition);
		tolua_function(tolua_S,"stopActionByTag",lua_cocos2dx_Node_stopActionByTag);
		tolua_function(tolua_S,"reorderChild",lua_cocos2dx_Node_reorderChild);
		tolua_function(tolua_S,"ignoreAnchorPointForPosition",lua_cocos2dx_Node_ignoreAnchorPointForPosition);
		tolua_function(tolua_S,"setPositionY",lua_cocos2dx_Node_setPositionY);
		tolua_function(tolua_S,"setPositionX",lua_cocos2dx_Node_setPositionX);
		tolua_function(tolua_S,"getAnchorPoint",lua_cocos2dx_Node_getAnchorPoint);
		tolua_function(tolua_S,"getNumberOfRunningActions",lua_cocos2dx_Node_getNumberOfRunningActions);
		tolua_function(tolua_S,"updateTransform",lua_cocos2dx_Node_updateTransform);
		tolua_function(tolua_S,"isVisible",lua_cocos2dx_Node_isVisible);
		tolua_function(tolua_S,"getChildrenCount",lua_cocos2dx_Node_getChildrenCount);
		tolua_function(tolua_S,"setAnchorPoint",lua_cocos2dx_Node_setAnchorPoint);
		tolua_function(tolua_S,"convertToNodeSpaceAR",lua_cocos2dx_Node_convertToNodeSpaceAR);
		tolua_function(tolua_S,"addComponent",lua_cocos2dx_Node_addComponent);
		tolua_function(tolua_S,"visit",lua_cocos2dx_Node_visit);
		tolua_function(tolua_S,"setShaderProgram",lua_cocos2dx_Node_setShaderProgram);
		tolua_function(tolua_S,"getRotation",lua_cocos2dx_Node_getRotation);
		tolua_function(tolua_S,"resumeSchedulerAndActions",lua_cocos2dx_Node_resumeSchedulerAndActions);
		tolua_function(tolua_S,"getZOrder",lua_cocos2dx_Node_getZOrder);
		tolua_function(tolua_S,"getAnchorPointInPoints",lua_cocos2dx_Node_getAnchorPointInPoints);
		tolua_function(tolua_S,"runAction",lua_cocos2dx_Node_runAction);
		tolua_function(tolua_S,"transform",lua_cocos2dx_Node_transform);
		tolua_function(tolua_S,"setVertexZ",lua_cocos2dx_Node_setVertexZ);
		tolua_function(tolua_S,"setScheduler",lua_cocos2dx_Node_setScheduler);
		tolua_function(tolua_S,"stopAllActions",lua_cocos2dx_Node_stopAllActions);
		tolua_function(tolua_S,"getSkewX",lua_cocos2dx_Node_getSkewX);
		tolua_function(tolua_S,"getSkewY",lua_cocos2dx_Node_getSkewY);
		tolua_function(tolua_S,"getActionByTag",lua_cocos2dx_Node_getActionByTag);
		tolua_function(tolua_S,"setRotationX",lua_cocos2dx_Node_setRotationX);
		tolua_function(tolua_S,"setRotationY",lua_cocos2dx_Node_setRotationY);
		tolua_function(tolua_S,"setAdditionalTransform",lua_cocos2dx_Node_setAdditionalTransform);
		tolua_function(tolua_S,"getScheduler",lua_cocos2dx_Node_getScheduler);
		tolua_function(tolua_S,"getOrderOfArrival",lua_cocos2dx_Node_getOrderOfArrival);
		tolua_function(tolua_S,"setContentSize",lua_cocos2dx_Node_setContentSize);
		tolua_function(tolua_S,"setActionManager",lua_cocos2dx_Node_setActionManager);
		tolua_function(tolua_S,"getPosition",lua_cocos2dx_Node_getPosition);
		tolua_function(tolua_S,"isRunning",lua_cocos2dx_Node_isRunning);
		tolua_function(tolua_S,"getParent",lua_cocos2dx_Node_getParent);
		tolua_function(tolua_S,"getPositionY",lua_cocos2dx_Node_getPositionY);
		tolua_function(tolua_S,"getPositionX",lua_cocos2dx_Node_getPositionX);
		tolua_function(tolua_S,"removeChildByTag",lua_cocos2dx_Node_removeChildByTag);
		tolua_function(tolua_S,"setVisible",lua_cocos2dx_Node_setVisible);
		tolua_function(tolua_S,"getParentToNodeTransform",lua_cocos2dx_Node_getParentToNodeTransform);
		tolua_function(tolua_S,"pauseSchedulerAndActions",lua_cocos2dx_Node_pauseSchedulerAndActions);
		tolua_function(tolua_S,"getVertexZ",lua_cocos2dx_Node_getVertexZ);
		tolua_function(tolua_S,"_setZOrder",lua_cocos2dx_Node__setZOrder);
		tolua_function(tolua_S,"setScale",lua_cocos2dx_Node_setScale);
		tolua_function(tolua_S,"getChildByTag",lua_cocos2dx_Node_getChildByTag);
		tolua_function(tolua_S,"setOrderOfArrival",lua_cocos2dx_Node_setOrderOfArrival);
		tolua_function(tolua_S,"getScaleY",lua_cocos2dx_Node_getScaleY);
		tolua_function(tolua_S,"getScaleX",lua_cocos2dx_Node_getScaleX);
		tolua_function(tolua_S,"cleanup",lua_cocos2dx_Node_cleanup);
		tolua_function(tolua_S,"getComponent",lua_cocos2dx_Node_getComponent);
		tolua_function(tolua_S,"getContentSize",lua_cocos2dx_Node_getContentSize);
		tolua_function(tolua_S,"setGrid",lua_cocos2dx_Node_setGrid);
		tolua_function(tolua_S,"getBoundingBox",lua_cocos2dx_Node_getBoundingBox);
		tolua_function(tolua_S,"draw",lua_cocos2dx_Node_draw);
		tolua_function(tolua_S,"transformAncestors",lua_cocos2dx_Node_transformAncestors);
		tolua_function(tolua_S,"setUserObject",lua_cocos2dx_Node_setUserObject);
		tolua_function(tolua_S,"removeFromParent",lua_cocos2dx_Node_removeFromParentAndCleanup);
		tolua_function(tolua_S,"convertTouchToNodeSpaceAR",lua_cocos2dx_Node_convertTouchToNodeSpaceAR);
		tolua_function(tolua_S,"update",lua_cocos2dx_Node_update);
		tolua_function(tolua_S,"sortAllChildren",lua_cocos2dx_Node_sortAllChildren);
		tolua_function(tolua_S,"getWorldToNodeTransform",lua_cocos2dx_Node_getWorldToNodeTransform);
		tolua_function(tolua_S,"getScale",lua_cocos2dx_Node_getScale);
		tolua_function(tolua_S,"getCamera",lua_cocos2dx_Node_getCamera);
		tolua_function(tolua_S,"setTag",lua_cocos2dx_Node_setTag);
		tolua_function(tolua_S,"stopAction",lua_cocos2dx_Node_stopAction);
		tolua_function(tolua_S,"getActionManager",lua_cocos2dx_Node_getActionManager);
		tolua_function(tolua_S,"new",lua_cocos2dx_Node_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_Node_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_NodeRGBA_updateDisplayedColor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::NodeRGBA* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"NodeRGBA",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::NodeRGBA*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_NodeRGBA_updateDisplayedColor'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Color3B arg0;
		ok &= luaval_to_color3b(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->updateDisplayedColor(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_NodeRGBA_updateDisplayedColor'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_NodeRGBA_setColor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::NodeRGBA* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"NodeRGBA",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::NodeRGBA*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_NodeRGBA_setColor'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Color3B arg0;
		ok &= luaval_to_color3b(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->setColor(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_NodeRGBA_setColor'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_NodeRGBA_isCascadeOpacityEnabled(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::NodeRGBA* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"NodeRGBA",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::NodeRGBA*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_NodeRGBA_isCascadeOpacityEnabled'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->isCascadeOpacityEnabled();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_NodeRGBA_isCascadeOpacityEnabled'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_NodeRGBA_getColor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::NodeRGBA* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"NodeRGBA",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::NodeRGBA*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_NodeRGBA_getColor'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Color3B ret = cobj->getColor();
		color3b_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_NodeRGBA_getColor'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_NodeRGBA_getDisplayedOpacity(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::NodeRGBA* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"NodeRGBA",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::NodeRGBA*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_NodeRGBA_getDisplayedOpacity'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		unsigned char ret = cobj->getDisplayedOpacity();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_NodeRGBA_getDisplayedOpacity'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_NodeRGBA_setCascadeColorEnabled(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::NodeRGBA* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"NodeRGBA",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::NodeRGBA*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_NodeRGBA_setCascadeColorEnabled'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setCascadeColorEnabled(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_NodeRGBA_setCascadeColorEnabled'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_NodeRGBA_setOpacity(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::NodeRGBA* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"NodeRGBA",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::NodeRGBA*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_NodeRGBA_setOpacity'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		uint16_t arg0;
		ok &= luaval_to_uint16(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setOpacity(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_NodeRGBA_setOpacity'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_NodeRGBA_setOpacityModifyRGB(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::NodeRGBA* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"NodeRGBA",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::NodeRGBA*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_NodeRGBA_setOpacityModifyRGB'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setOpacityModifyRGB(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_NodeRGBA_setOpacityModifyRGB'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_NodeRGBA_setCascadeOpacityEnabled(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::NodeRGBA* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"NodeRGBA",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::NodeRGBA*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_NodeRGBA_setCascadeOpacityEnabled'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setCascadeOpacityEnabled(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_NodeRGBA_setCascadeOpacityEnabled'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_NodeRGBA_updateDisplayedOpacity(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::NodeRGBA* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"NodeRGBA",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::NodeRGBA*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_NodeRGBA_updateDisplayedOpacity'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		uint16_t arg0;
		ok &= luaval_to_uint16(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->updateDisplayedOpacity(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_NodeRGBA_updateDisplayedOpacity'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_NodeRGBA_init(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::NodeRGBA* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"NodeRGBA",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::NodeRGBA*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_NodeRGBA_init'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->init();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_NodeRGBA_init'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_NodeRGBA_getOpacity(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::NodeRGBA* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"NodeRGBA",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::NodeRGBA*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_NodeRGBA_getOpacity'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		unsigned char ret = cobj->getOpacity();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_NodeRGBA_getOpacity'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_NodeRGBA_isOpacityModifyRGB(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::NodeRGBA* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"NodeRGBA",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::NodeRGBA*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_NodeRGBA_isOpacityModifyRGB'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->isOpacityModifyRGB();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_NodeRGBA_isOpacityModifyRGB'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_NodeRGBA_isCascadeColorEnabled(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::NodeRGBA* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"NodeRGBA",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::NodeRGBA*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_NodeRGBA_isCascadeColorEnabled'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->isCascadeColorEnabled();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_NodeRGBA_isCascadeColorEnabled'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_NodeRGBA_getDisplayedColor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::NodeRGBA* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"NodeRGBA",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::NodeRGBA*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_NodeRGBA_getDisplayedColor'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Color3B ret = cobj->getDisplayedColor();
		color3b_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_NodeRGBA_getDisplayedColor'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_NodeRGBA_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::NodeRGBA* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::NodeRGBA();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"NodeRGBA");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_NodeRGBA_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_NodeRGBA_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (NodeRGBA)");
	return 0;
}

int lua_register_cocos2dx_NodeRGBA(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"NodeRGBA");
	tolua_cclass(tolua_S,"NodeRGBA","NodeRGBA","Node",NULL);

	tolua_beginmodule(tolua_S,"NodeRGBA");
		tolua_function(tolua_S,"updateDisplayedColor",lua_cocos2dx_NodeRGBA_updateDisplayedColor);
		tolua_function(tolua_S,"setColor",lua_cocos2dx_NodeRGBA_setColor);
		tolua_function(tolua_S,"isCascadeOpacityEnabled",lua_cocos2dx_NodeRGBA_isCascadeOpacityEnabled);
		tolua_function(tolua_S,"getColor",lua_cocos2dx_NodeRGBA_getColor);
		tolua_function(tolua_S,"getDisplayedOpacity",lua_cocos2dx_NodeRGBA_getDisplayedOpacity);
		tolua_function(tolua_S,"setCascadeColorEnabled",lua_cocos2dx_NodeRGBA_setCascadeColorEnabled);
		tolua_function(tolua_S,"setOpacity",lua_cocos2dx_NodeRGBA_setOpacity);
		tolua_function(tolua_S,"setOpacityModifyRGB",lua_cocos2dx_NodeRGBA_setOpacityModifyRGB);
		tolua_function(tolua_S,"setCascadeOpacityEnabled",lua_cocos2dx_NodeRGBA_setCascadeOpacityEnabled);
		tolua_function(tolua_S,"updateDisplayedOpacity",lua_cocos2dx_NodeRGBA_updateDisplayedOpacity);
		tolua_function(tolua_S,"init",lua_cocos2dx_NodeRGBA_init);
		tolua_function(tolua_S,"getOpacity",lua_cocos2dx_NodeRGBA_getOpacity);
		tolua_function(tolua_S,"isOpacityModifyRGB",lua_cocos2dx_NodeRGBA_isOpacityModifyRGB);
		tolua_function(tolua_S,"isCascadeColorEnabled",lua_cocos2dx_NodeRGBA_isCascadeColorEnabled);
		tolua_function(tolua_S,"getDisplayedColor",lua_cocos2dx_NodeRGBA_getDisplayedColor);
		tolua_function(tolua_S,"new",lua_cocos2dx_NodeRGBA_constructor);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_SpriteFrame_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SpriteFrame* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SpriteFrame",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SpriteFrame*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SpriteFrame_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::SpriteFrame* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"SpriteFrame");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SpriteFrame_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SpriteFrame_setRotated(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SpriteFrame* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SpriteFrame",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SpriteFrame*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SpriteFrame_setRotated'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setRotated(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SpriteFrame_setRotated'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SpriteFrame_setTexture(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SpriteFrame* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SpriteFrame",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SpriteFrame*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SpriteFrame_setTexture'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Texture2D* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Texture2D",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Texture2D*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->setTexture(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SpriteFrame_setTexture'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SpriteFrame_initWithTexture(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SpriteFrame* cobj = NULL;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SpriteFrame",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SpriteFrame*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SpriteFrame_initWithTexture'", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	do{
		if (argc == 5) {
			cocos2d::Texture2D* arg0;
			#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Texture2D",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Texture2D*)tolua_tousertype(tolua_S,2,0);
		};

			if (!ok) { ok = true; break; }
			cocos2d::Rect arg1;
			ok &= luaval_to_rect(tolua_S, 3, &arg1);

			if (!ok) { ok = true; break; }
			bool arg2;
			ok &= luaval_to_boolean(tolua_S, 4,&arg2);

			if (!ok) { ok = true; break; }
			cocos2d::Point arg3;
			ok &= luaval_to_point(tolua_S, 5, &arg3);

			if (!ok) { ok = true; break; }
			cocos2d::Size arg4;
			ok &= luaval_to_size(tolua_S, 6, &arg4);

			if (!ok) { ok = true; break; }
		bool ret = cobj->initWithTexture(arg0, arg1, arg2, arg3, arg4);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
		}
	}while(0);
	do{
		if (argc == 2) {
			cocos2d::Texture2D* arg0;
			#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Texture2D",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Texture2D*)tolua_tousertype(tolua_S,2,0);
		};

			if (!ok) { ok = true; break; }
			cocos2d::Rect arg1;
			ok &= luaval_to_rect(tolua_S, 3, &arg1);

			if (!ok) { ok = true; break; }
		bool ret = cobj->initWithTexture(arg0, arg1);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
		}
	}while(0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SpriteFrame_initWithTexture'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SpriteFrame_setRectInPixels(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SpriteFrame* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SpriteFrame",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SpriteFrame*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SpriteFrame_setRectInPixels'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Rect arg0;
		ok &= luaval_to_rect(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->setRectInPixels(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SpriteFrame_setRectInPixels'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SpriteFrame_getTexture(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SpriteFrame* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SpriteFrame",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SpriteFrame*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SpriteFrame_getTexture'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Texture2D* ret = cobj->getTexture();
		tolua_pushusertype(tolua_S,ret,"Texture2D");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SpriteFrame_getTexture'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SpriteFrame_getRect(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SpriteFrame* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SpriteFrame",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SpriteFrame*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SpriteFrame_getRect'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Rect ret = cobj->getRect();
		rect_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SpriteFrame_getRect'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SpriteFrame_setOffsetInPixels(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SpriteFrame* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SpriteFrame",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SpriteFrame*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SpriteFrame_setOffsetInPixels'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Point arg0;
		ok &= luaval_to_point(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->setOffsetInPixels(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SpriteFrame_setOffsetInPixels'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SpriteFrame_getRectInPixels(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SpriteFrame* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SpriteFrame",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SpriteFrame*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SpriteFrame_getRectInPixels'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Rect ret = cobj->getRectInPixels();
		rect_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SpriteFrame_getRectInPixels'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SpriteFrame_setOriginalSize(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SpriteFrame* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SpriteFrame",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SpriteFrame*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SpriteFrame_setOriginalSize'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Size arg0;
		ok &= luaval_to_size(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->setOriginalSize(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SpriteFrame_setOriginalSize'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SpriteFrame_getOriginalSizeInPixels(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SpriteFrame* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SpriteFrame",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SpriteFrame*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SpriteFrame_getOriginalSizeInPixels'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Size ret = cobj->getOriginalSizeInPixels();
		size_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SpriteFrame_getOriginalSizeInPixels'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SpriteFrame_setOriginalSizeInPixels(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SpriteFrame* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SpriteFrame",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SpriteFrame*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SpriteFrame_setOriginalSizeInPixels'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Size arg0;
		ok &= luaval_to_size(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->setOriginalSizeInPixels(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SpriteFrame_setOriginalSizeInPixels'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SpriteFrame_setOffset(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SpriteFrame* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SpriteFrame",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SpriteFrame*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SpriteFrame_setOffset'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Point arg0;
		ok &= luaval_to_point(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->setOffset(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SpriteFrame_setOffset'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SpriteFrame_getOffset(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SpriteFrame* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SpriteFrame",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SpriteFrame*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SpriteFrame_getOffset'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Point ret = cobj->getOffset();
		point_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SpriteFrame_getOffset'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SpriteFrame_isRotated(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SpriteFrame* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SpriteFrame",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SpriteFrame*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SpriteFrame_isRotated'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->isRotated();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SpriteFrame_isRotated'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SpriteFrame_initWithTextureFilename(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SpriteFrame* cobj = NULL;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SpriteFrame",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SpriteFrame*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SpriteFrame_initWithTextureFilename'", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	do{
		if (argc == 5) {
			const char* arg0;
			std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();

			if (!ok) { ok = true; break; }
			cocos2d::Rect arg1;
			ok &= luaval_to_rect(tolua_S, 3, &arg1);

			if (!ok) { ok = true; break; }
			bool arg2;
			ok &= luaval_to_boolean(tolua_S, 4,&arg2);

			if (!ok) { ok = true; break; }
			cocos2d::Point arg3;
			ok &= luaval_to_point(tolua_S, 5, &arg3);

			if (!ok) { ok = true; break; }
			cocos2d::Size arg4;
			ok &= luaval_to_size(tolua_S, 6, &arg4);

			if (!ok) { ok = true; break; }
		bool ret = cobj->initWithTextureFilename(arg0, arg1, arg2, arg3, arg4);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
		}
	}while(0);
	do{
		if (argc == 2) {
			const char* arg0;
			std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();

			if (!ok) { ok = true; break; }
			cocos2d::Rect arg1;
			ok &= luaval_to_rect(tolua_S, 3, &arg1);

			if (!ok) { ok = true; break; }
		bool ret = cobj->initWithTextureFilename(arg0, arg1);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
		}
	}while(0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SpriteFrame_initWithTextureFilename'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SpriteFrame_setRect(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SpriteFrame* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SpriteFrame",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SpriteFrame*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SpriteFrame_setRect'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Rect arg0;
		ok &= luaval_to_rect(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->setRect(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SpriteFrame_setRect'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SpriteFrame_getOffsetInPixels(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SpriteFrame* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SpriteFrame",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SpriteFrame*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SpriteFrame_getOffsetInPixels'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Point ret = cobj->getOffsetInPixels();
		point_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SpriteFrame_getOffsetInPixels'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SpriteFrame_getOriginalSize(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SpriteFrame* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SpriteFrame",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SpriteFrame*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SpriteFrame_getOriginalSize'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Size ret = cobj->getOriginalSize();
		size_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SpriteFrame_getOriginalSize'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SpriteFrame_create(lua_State* tolua_S)
{
	int argc = 0;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"SpriteFrame",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S)-1;

	do {
		if (argc == 5) {
			const char* arg0;
			std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
			if (!ok) { ok = true; break; }
			cocos2d::Rect arg1;
			ok &= luaval_to_rect(tolua_S, 3, &arg1);
			if (!ok) { ok = true; break; }
			bool arg2;
			ok &= luaval_to_boolean(tolua_S, 4,&arg2);
			if (!ok) { ok = true; break; }
			cocos2d::Point arg3;
			ok &= luaval_to_point(tolua_S, 5, &arg3);
			if (!ok) { ok = true; break; }
			cocos2d::Size arg4;
			ok &= luaval_to_size(tolua_S, 6, &arg4);
			if (!ok) { ok = true; break; }
			cocos2d::SpriteFrame* ret = cocos2d::SpriteFrame::create(arg0, arg1, arg2, arg3, arg4);
			tolua_pushusertype(tolua_S,ret,"SpriteFrame");
			return 1;
		}
	} while (0);
	do {
		if (argc == 2) {
			const char* arg0;
			std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
			if (!ok) { ok = true; break; }
			cocos2d::Rect arg1;
			ok &= luaval_to_rect(tolua_S, 3, &arg1);
			if (!ok) { ok = true; break; }
			cocos2d::SpriteFrame* ret = cocos2d::SpriteFrame::create(arg0, arg1);
			tolua_pushusertype(tolua_S,ret,"SpriteFrame");
			return 1;
		}
	} while (0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SpriteFrame_create'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SpriteFrame_createWithTexture(lua_State* tolua_S)
{
	int argc = 0;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"SpriteFrame",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S)-1;

	do {
		if (argc == 5) {
			cocos2d::Texture2D* arg0;
			#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Texture2D",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Texture2D*)tolua_tousertype(tolua_S,2,0);
		};
			if (!ok) { ok = true; break; }
			cocos2d::Rect arg1;
			ok &= luaval_to_rect(tolua_S, 3, &arg1);
			if (!ok) { ok = true; break; }
			bool arg2;
			ok &= luaval_to_boolean(tolua_S, 4,&arg2);
			if (!ok) { ok = true; break; }
			cocos2d::Point arg3;
			ok &= luaval_to_point(tolua_S, 5, &arg3);
			if (!ok) { ok = true; break; }
			cocos2d::Size arg4;
			ok &= luaval_to_size(tolua_S, 6, &arg4);
			if (!ok) { ok = true; break; }
			cocos2d::SpriteFrame* ret = cocos2d::SpriteFrame::createWithTexture(arg0, arg1, arg2, arg3, arg4);
			tolua_pushusertype(tolua_S,ret,"SpriteFrame");
			return 1;
		}
	} while (0);
	do {
		if (argc == 2) {
			cocos2d::Texture2D* arg0;
			#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Texture2D",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Texture2D*)tolua_tousertype(tolua_S,2,0);
		};
			if (!ok) { ok = true; break; }
			cocos2d::Rect arg1;
			ok &= luaval_to_rect(tolua_S, 3, &arg1);
			if (!ok) { ok = true; break; }
			cocos2d::SpriteFrame* ret = cocos2d::SpriteFrame::createWithTexture(arg0, arg1);
			tolua_pushusertype(tolua_S,ret,"SpriteFrame");
			return 1;
		}
	} while (0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SpriteFrame_createWithTexture'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SpriteFrame_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (SpriteFrame)");
	return 0;
}

int lua_register_cocos2dx_SpriteFrame(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"SpriteFrame");
	tolua_cclass(tolua_S,"SpriteFrame","SpriteFrame","",NULL);

	tolua_beginmodule(tolua_S,"SpriteFrame");
		tolua_function(tolua_S,"clone",lua_cocos2dx_SpriteFrame_clone);
		tolua_function(tolua_S,"setRotated",lua_cocos2dx_SpriteFrame_setRotated);
		tolua_function(tolua_S,"setTexture",lua_cocos2dx_SpriteFrame_setTexture);
		tolua_function(tolua_S,"initWithTexture",lua_cocos2dx_SpriteFrame_initWithTexture);
		tolua_function(tolua_S,"setRectInPixels",lua_cocos2dx_SpriteFrame_setRectInPixels);
		tolua_function(tolua_S,"getTexture",lua_cocos2dx_SpriteFrame_getTexture);
		tolua_function(tolua_S,"getRect",lua_cocos2dx_SpriteFrame_getRect);
		tolua_function(tolua_S,"setOffsetInPixels",lua_cocos2dx_SpriteFrame_setOffsetInPixels);
		tolua_function(tolua_S,"getRectInPixels",lua_cocos2dx_SpriteFrame_getRectInPixels);
		tolua_function(tolua_S,"setOriginalSize",lua_cocos2dx_SpriteFrame_setOriginalSize);
		tolua_function(tolua_S,"getOriginalSizeInPixels",lua_cocos2dx_SpriteFrame_getOriginalSizeInPixels);
		tolua_function(tolua_S,"setOriginalSizeInPixels",lua_cocos2dx_SpriteFrame_setOriginalSizeInPixels);
		tolua_function(tolua_S,"setOffset",lua_cocos2dx_SpriteFrame_setOffset);
		tolua_function(tolua_S,"getOffset",lua_cocos2dx_SpriteFrame_getOffset);
		tolua_function(tolua_S,"isRotated",lua_cocos2dx_SpriteFrame_isRotated);
		tolua_function(tolua_S,"initWithTextureFilename",lua_cocos2dx_SpriteFrame_initWithTextureFilename);
		tolua_function(tolua_S,"setRect",lua_cocos2dx_SpriteFrame_setRect);
		tolua_function(tolua_S,"getOffsetInPixels",lua_cocos2dx_SpriteFrame_getOffsetInPixels);
		tolua_function(tolua_S,"getOriginalSize",lua_cocos2dx_SpriteFrame_getOriginalSize);
		tolua_function(tolua_S,"create", lua_cocos2dx_SpriteFrame_create);
		tolua_function(tolua_S,"createWithTexture", lua_cocos2dx_SpriteFrame_createWithTexture);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_AnimationFrame_setSpriteFrame(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::AnimationFrame* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"AnimationFrame",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::AnimationFrame*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_AnimationFrame_setSpriteFrame'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::SpriteFrame* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"SpriteFrame",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::SpriteFrame*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->setSpriteFrame(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_AnimationFrame_setSpriteFrame'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_AnimationFrame_getUserInfo(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::AnimationFrame* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"AnimationFrame",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::AnimationFrame*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_AnimationFrame_getUserInfo'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Dictionary* ret = cobj->getUserInfo();
		dictionary_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_AnimationFrame_getUserInfo'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_AnimationFrame_setDelayUnits(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::AnimationFrame* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"AnimationFrame",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::AnimationFrame*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_AnimationFrame_setDelayUnits'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setDelayUnits(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_AnimationFrame_setDelayUnits'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_AnimationFrame_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::AnimationFrame* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"AnimationFrame",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::AnimationFrame*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_AnimationFrame_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::AnimationFrame* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"AnimationFrame");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_AnimationFrame_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_AnimationFrame_getSpriteFrame(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::AnimationFrame* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"AnimationFrame",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::AnimationFrame*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_AnimationFrame_getSpriteFrame'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::SpriteFrame* ret = cobj->getSpriteFrame();
		tolua_pushusertype(tolua_S,ret,"SpriteFrame");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_AnimationFrame_getSpriteFrame'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_AnimationFrame_getDelayUnits(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::AnimationFrame* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"AnimationFrame",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::AnimationFrame*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_AnimationFrame_getDelayUnits'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getDelayUnits();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_AnimationFrame_getDelayUnits'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_AnimationFrame_setUserInfo(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::AnimationFrame* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"AnimationFrame",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::AnimationFrame*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_AnimationFrame_setUserInfo'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Dictionary* arg0;
		ok &= luaval_to_dictionary(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->setUserInfo(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_AnimationFrame_setUserInfo'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_AnimationFrame_initWithSpriteFrame(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::AnimationFrame* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"AnimationFrame",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::AnimationFrame*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_AnimationFrame_initWithSpriteFrame'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 3) {
		cocos2d::SpriteFrame* arg0;
		double arg1;
		cocos2d::Dictionary* arg2;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"SpriteFrame",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::SpriteFrame*)tolua_tousertype(tolua_S,2,0);
		};
		ok &= luaval_to_number(tolua_S, 3,&arg1);
		ok &= luaval_to_dictionary(tolua_S, 4, &arg2);
		if(!ok)
			return 0;
		bool ret = cobj->initWithSpriteFrame(arg0, arg1, arg2);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 3);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_AnimationFrame_initWithSpriteFrame'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_AnimationFrame_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::AnimationFrame* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::AnimationFrame();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"AnimationFrame");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_AnimationFrame_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_AnimationFrame_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (AnimationFrame)");
	return 0;
}

int lua_register_cocos2dx_AnimationFrame(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"AnimationFrame");
	tolua_cclass(tolua_S,"AnimationFrame","AnimationFrame","",NULL);

	tolua_beginmodule(tolua_S,"AnimationFrame");
		tolua_function(tolua_S,"setSpriteFrame",lua_cocos2dx_AnimationFrame_setSpriteFrame);
		tolua_function(tolua_S,"getUserInfo",lua_cocos2dx_AnimationFrame_getUserInfo);
		tolua_function(tolua_S,"setDelayUnits",lua_cocos2dx_AnimationFrame_setDelayUnits);
		tolua_function(tolua_S,"clone",lua_cocos2dx_AnimationFrame_clone);
		tolua_function(tolua_S,"getSpriteFrame",lua_cocos2dx_AnimationFrame_getSpriteFrame);
		tolua_function(tolua_S,"getDelayUnits",lua_cocos2dx_AnimationFrame_getDelayUnits);
		tolua_function(tolua_S,"setUserInfo",lua_cocos2dx_AnimationFrame_setUserInfo);
		tolua_function(tolua_S,"initWithSpriteFrame",lua_cocos2dx_AnimationFrame_initWithSpriteFrame);
		tolua_function(tolua_S,"new",lua_cocos2dx_AnimationFrame_constructor);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_Animation_getLoops(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Animation* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Animation",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Animation*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Animation_getLoops'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		unsigned int ret = cobj->getLoops();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Animation_getLoops'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Animation_setFrames(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Animation* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Animation",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Animation*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Animation_setFrames'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Array* arg0;
		ok &= luaval_to_array(tolua_S,  2, &arg0);
		if(!ok)
			return 0;
		cobj->setFrames(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Animation_setFrames'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Animation_getFrames(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Animation* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Animation",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Animation*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Animation_getFrames'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Array* ret = cobj->getFrames();
		array_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Animation_getFrames'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Animation_addSpriteFrame(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Animation* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Animation",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Animation*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Animation_addSpriteFrame'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::SpriteFrame* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"SpriteFrame",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::SpriteFrame*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->addSpriteFrame(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Animation_addSpriteFrame'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Animation_setRestoreOriginalFrame(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Animation* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Animation",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Animation*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Animation_setRestoreOriginalFrame'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setRestoreOriginalFrame(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Animation_setRestoreOriginalFrame'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Animation_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Animation* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Animation",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Animation*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Animation_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Animation* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"Animation");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Animation_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Animation_setDelayPerUnit(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Animation* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Animation",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Animation*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Animation_setDelayPerUnit'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setDelayPerUnit(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Animation_setDelayPerUnit'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Animation_initWithAnimationFrames(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Animation* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Animation",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Animation*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Animation_initWithAnimationFrames'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 3) {
		cocos2d::Array* arg0;
		double arg1;
		unsigned int arg2;
		ok &= luaval_to_array(tolua_S,  2, &arg0);
		ok &= luaval_to_number(tolua_S, 3,&arg1);
		ok &= luaval_to_uint32(tolua_S, 4,&arg2);
		if(!ok)
			return 0;
		bool ret = cobj->initWithAnimationFrames(arg0, arg1, arg2);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 3);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Animation_initWithAnimationFrames'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Animation_init(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Animation* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Animation",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Animation*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Animation_init'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->init();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Animation_init'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Animation_initWithSpriteFrames(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Animation* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Animation",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Animation*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Animation_initWithSpriteFrames'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Array* arg0;
		ok &= luaval_to_array(tolua_S,  2, &arg0);
		if(!ok)
			return 0;
		bool ret = cobj->initWithSpriteFrames(arg0);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	if (argc == 2) {
		cocos2d::Array* arg0;
		double arg1;
		ok &= luaval_to_array(tolua_S,  2, &arg0);
		ok &= luaval_to_number(tolua_S, 3,&arg1);
		if(!ok)
			return 0;
		bool ret = cobj->initWithSpriteFrames(arg0, arg1);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Animation_initWithSpriteFrames'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Animation_setLoops(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Animation* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Animation",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Animation*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Animation_setLoops'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		unsigned int arg0;
		ok &= luaval_to_uint32(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setLoops(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Animation_setLoops'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Animation_addSpriteFrameWithFileName(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Animation* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Animation",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Animation*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Animation_addSpriteFrameWithFileName'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		const char* arg0;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		if(!ok)
			return 0;
		cobj->addSpriteFrameWithFileName(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Animation_addSpriteFrameWithFileName'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Animation_getTotalDelayUnits(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Animation* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Animation",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Animation*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Animation_getTotalDelayUnits'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getTotalDelayUnits();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Animation_getTotalDelayUnits'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Animation_getDelayPerUnit(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Animation* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Animation",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Animation*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Animation_getDelayPerUnit'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getDelayPerUnit();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Animation_getDelayPerUnit'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Animation_getRestoreOriginalFrame(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Animation* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Animation",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Animation*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Animation_getRestoreOriginalFrame'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->getRestoreOriginalFrame();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Animation_getRestoreOriginalFrame'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Animation_getDuration(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Animation* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Animation",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Animation*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Animation_getDuration'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getDuration();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Animation_getDuration'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Animation_addSpriteFrameWithTexture(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Animation* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Animation",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Animation*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Animation_addSpriteFrameWithTexture'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		cocos2d::Texture2D* arg0;
		cocos2d::Rect arg1;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Texture2D",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Texture2D*)tolua_tousertype(tolua_S,2,0);
		};
		ok &= luaval_to_rect(tolua_S, 3, &arg1);
		if(!ok)
			return 0;
		cobj->addSpriteFrameWithTexture(arg0, arg1);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Animation_addSpriteFrameWithTexture'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Animation_create(lua_State* tolua_S)
{
	int argc = 0;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"Animation",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S)-1;

	do {
		if (argc == 2) {
			cocos2d::Array* arg0;
			ok &= luaval_to_array(tolua_S,  2, &arg0);
			if (!ok) { ok = true; break; }
			double arg1;
			ok &= luaval_to_number(tolua_S, 3,&arg1);
			if (!ok) { ok = true; break; }
			cocos2d::Animation* ret = cocos2d::Animation::create(arg0, arg1);
			tolua_pushusertype(tolua_S,ret,"Animation");
			return 1;
		}
	} while (0);
	do {
		if (argc == 3) {
			cocos2d::Array* arg0;
			ok &= luaval_to_array(tolua_S,  2, &arg0);
			if (!ok) { ok = true; break; }
			double arg1;
			ok &= luaval_to_number(tolua_S, 3,&arg1);
			if (!ok) { ok = true; break; }
			unsigned int arg2;
			ok &= luaval_to_uint32(tolua_S, 4,&arg2);
			if (!ok) { ok = true; break; }
			cocos2d::Animation* ret = cocos2d::Animation::create(arg0, arg1, arg2);
			tolua_pushusertype(tolua_S,ret,"Animation");
			return 1;
		}
	} while (0);
	do {
		if (argc == 0) {
			cocos2d::Animation* ret = cocos2d::Animation::create();
			tolua_pushusertype(tolua_S,ret,"Animation");
			return 1;
		}
	} while (0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Animation_create'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Animation_createWithSpriteFrames(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"Animation",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 1) {
		cocos2d::Array* arg0;
		ok &= luaval_to_array(tolua_S,  2, &arg0);
		if(!ok)
			return 0;
		cocos2d::Animation* ret = cocos2d::Animation::createWithSpriteFrames(arg0);
		tolua_pushusertype(tolua_S,ret,"Animation");
	    return 1;
	}
	if (argc == 2) {
		cocos2d::Array* arg0;
		double arg1;
		ok &= luaval_to_array(tolua_S,  2, &arg0);
		ok &= luaval_to_number(tolua_S, 3,&arg1);
		if(!ok)
			return 0;
		cocos2d::Animation* ret = cocos2d::Animation::createWithSpriteFrames(arg0, arg1);
		tolua_pushusertype(tolua_S,ret,"Animation");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Animation_createWithSpriteFrames'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_Animation_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Animation* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::Animation();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"Animation");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Animation_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_Animation_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (Animation)");
	return 0;
}

int lua_register_cocos2dx_Animation(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"Animation");
	tolua_cclass(tolua_S,"Animation","Animation","",NULL);

	tolua_beginmodule(tolua_S,"Animation");
		tolua_function(tolua_S,"getLoops",lua_cocos2dx_Animation_getLoops);
		tolua_function(tolua_S,"setFrames",lua_cocos2dx_Animation_setFrames);
		tolua_function(tolua_S,"getFrames",lua_cocos2dx_Animation_getFrames);
		tolua_function(tolua_S,"addSpriteFrame",lua_cocos2dx_Animation_addSpriteFrame);
		tolua_function(tolua_S,"setRestoreOriginalFrame",lua_cocos2dx_Animation_setRestoreOriginalFrame);
		tolua_function(tolua_S,"clone",lua_cocos2dx_Animation_clone);
		tolua_function(tolua_S,"setDelayPerUnit",lua_cocos2dx_Animation_setDelayPerUnit);
		tolua_function(tolua_S,"initWithAnimationFrames",lua_cocos2dx_Animation_initWithAnimationFrames);
		tolua_function(tolua_S,"init",lua_cocos2dx_Animation_init);
		tolua_function(tolua_S,"initWithSpriteFrames",lua_cocos2dx_Animation_initWithSpriteFrames);
		tolua_function(tolua_S,"setLoops",lua_cocos2dx_Animation_setLoops);
		tolua_function(tolua_S,"addSpriteFrameWithFile",lua_cocos2dx_Animation_addSpriteFrameWithFileName);
		tolua_function(tolua_S,"getTotalDelayUnits",lua_cocos2dx_Animation_getTotalDelayUnits);
		tolua_function(tolua_S,"getDelayPerUnit",lua_cocos2dx_Animation_getDelayPerUnit);
		tolua_function(tolua_S,"getRestoreOriginalFrame",lua_cocos2dx_Animation_getRestoreOriginalFrame);
		tolua_function(tolua_S,"getDuration",lua_cocos2dx_Animation_getDuration);
		tolua_function(tolua_S,"addSpriteFrameWithTexture",lua_cocos2dx_Animation_addSpriteFrameWithTexture);
		tolua_function(tolua_S,"new",lua_cocos2dx_Animation_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_Animation_create);
		tolua_function(tolua_S,"createWithSpriteFrames", lua_cocos2dx_Animation_createWithSpriteFrames);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_ActionInterval_startWithTarget(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ActionInterval* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ActionInterval",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ActionInterval*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ActionInterval_startWithTarget'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Node* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->startWithTarget(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ActionInterval_startWithTarget'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ActionInterval_setAmplitudeRate(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ActionInterval* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ActionInterval",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ActionInterval*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ActionInterval_setAmplitudeRate'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setAmplitudeRate(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ActionInterval_setAmplitudeRate'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ActionInterval_initWithDuration(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ActionInterval* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ActionInterval",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ActionInterval*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ActionInterval_initWithDuration'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		bool ret = cobj->initWithDuration(arg0);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ActionInterval_initWithDuration'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ActionInterval_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ActionInterval* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ActionInterval",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ActionInterval*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ActionInterval_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::ActionInterval* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"ActionInterval");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ActionInterval_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ActionInterval_getAmplitudeRate(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ActionInterval* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ActionInterval",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ActionInterval*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ActionInterval_getAmplitudeRate'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getAmplitudeRate();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ActionInterval_getAmplitudeRate'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ActionInterval_step(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ActionInterval* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ActionInterval",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ActionInterval*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ActionInterval_step'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->step(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ActionInterval_step'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ActionInterval_getElapsed(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ActionInterval* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ActionInterval",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ActionInterval*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ActionInterval_getElapsed'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getElapsed();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ActionInterval_getElapsed'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ActionInterval_isDone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ActionInterval* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ActionInterval",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ActionInterval*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ActionInterval_isDone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->isDone();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ActionInterval_isDone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ActionInterval_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ActionInterval* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ActionInterval",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ActionInterval*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ActionInterval_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::ActionInterval* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"ActionInterval");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ActionInterval_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ActionInterval_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (ActionInterval)");
	return 0;
}

int lua_register_cocos2dx_ActionInterval(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"ActionInterval");
	tolua_cclass(tolua_S,"ActionInterval","ActionInterval","FiniteTimeAction",NULL);

	tolua_beginmodule(tolua_S,"ActionInterval");
		tolua_function(tolua_S,"startWithTarget",lua_cocos2dx_ActionInterval_startWithTarget);
		tolua_function(tolua_S,"setAmplitudeRate",lua_cocos2dx_ActionInterval_setAmplitudeRate);
		tolua_function(tolua_S,"initWithDuration",lua_cocos2dx_ActionInterval_initWithDuration);
		tolua_function(tolua_S,"clone",lua_cocos2dx_ActionInterval_clone);
		tolua_function(tolua_S,"getAmplitudeRate",lua_cocos2dx_ActionInterval_getAmplitudeRate);
		tolua_function(tolua_S,"step",lua_cocos2dx_ActionInterval_step);
		tolua_function(tolua_S,"getElapsed",lua_cocos2dx_ActionInterval_getElapsed);
		tolua_function(tolua_S,"isDone",lua_cocos2dx_ActionInterval_isDone);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_ActionInterval_reverse);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_Sequence_startWithTarget(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Sequence* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Sequence",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Sequence*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Sequence_startWithTarget'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Node* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->startWithTarget(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Sequence_startWithTarget'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Sequence_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Sequence* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Sequence",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Sequence*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Sequence_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Sequence* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"Sequence");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Sequence_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Sequence_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Sequence* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Sequence",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Sequence*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Sequence_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Sequence* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"Sequence");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Sequence_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Sequence_stop(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Sequence* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Sequence",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Sequence*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Sequence_stop'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->stop();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Sequence_stop'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Sequence_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Sequence* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Sequence",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Sequence*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Sequence_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Sequence_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Sequence_initWithTwoActions(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Sequence* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Sequence",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Sequence*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Sequence_initWithTwoActions'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		cocos2d::FiniteTimeAction* arg0;
		cocos2d::FiniteTimeAction* arg1;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"FiniteTimeAction",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::FiniteTimeAction*)tolua_tousertype(tolua_S,2,0);
		};
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"FiniteTimeAction",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::FiniteTimeAction*)tolua_tousertype(tolua_S,3,0);
		};
		if(!ok)
			return 0;
		bool ret = cobj->initWithTwoActions(arg0, arg1);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Sequence_initWithTwoActions'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Sequence_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (Sequence)");
	return 0;
}

int lua_register_cocos2dx_Sequence(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"Sequence");
	tolua_cclass(tolua_S,"Sequence","Sequence","ActionInterval",NULL);

	tolua_beginmodule(tolua_S,"Sequence");
		tolua_function(tolua_S,"startWithTarget",lua_cocos2dx_Sequence_startWithTarget);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_Sequence_reverse);
		tolua_function(tolua_S,"clone",lua_cocos2dx_Sequence_clone);
		tolua_function(tolua_S,"stop",lua_cocos2dx_Sequence_stop);
		tolua_function(tolua_S,"update",lua_cocos2dx_Sequence_update);
		tolua_function(tolua_S,"initWithTwoActions",lua_cocos2dx_Sequence_initWithTwoActions);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_Repeat_setInnerAction(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Repeat* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Repeat",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Repeat*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Repeat_setInnerAction'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::FiniteTimeAction* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"FiniteTimeAction",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::FiniteTimeAction*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->setInnerAction(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Repeat_setInnerAction'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Repeat_startWithTarget(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Repeat* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Repeat",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Repeat*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Repeat_startWithTarget'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Node* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->startWithTarget(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Repeat_startWithTarget'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Repeat_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Repeat* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Repeat",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Repeat*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Repeat_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Repeat* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"Repeat");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Repeat_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Repeat_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Repeat* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Repeat",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Repeat*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Repeat_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Repeat* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"Repeat");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Repeat_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Repeat_stop(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Repeat* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Repeat",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Repeat*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Repeat_stop'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->stop();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Repeat_stop'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Repeat_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Repeat* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Repeat",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Repeat*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Repeat_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Repeat_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Repeat_initWithAction(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Repeat* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Repeat",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Repeat*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Repeat_initWithAction'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		cocos2d::FiniteTimeAction* arg0;
		unsigned int arg1;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"FiniteTimeAction",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::FiniteTimeAction*)tolua_tousertype(tolua_S,2,0);
		};
		ok &= luaval_to_uint32(tolua_S, 3,&arg1);
		if(!ok)
			return 0;
		bool ret = cobj->initWithAction(arg0, arg1);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Repeat_initWithAction'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Repeat_getInnerAction(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Repeat* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Repeat",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Repeat*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Repeat_getInnerAction'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::FiniteTimeAction* ret = cobj->getInnerAction();
		tolua_pushusertype(tolua_S,ret,"FiniteTimeAction");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Repeat_getInnerAction'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Repeat_isDone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Repeat* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Repeat",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Repeat*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Repeat_isDone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->isDone();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Repeat_isDone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Repeat_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"Repeat",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 2) {
		cocos2d::FiniteTimeAction* arg0;
		unsigned int arg1;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"FiniteTimeAction",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::FiniteTimeAction*)tolua_tousertype(tolua_S,2,0);
		};
		ok &= luaval_to_uint32(tolua_S, 3,&arg1);
		if(!ok)
			return 0;
		cocos2d::Repeat* ret = cocos2d::Repeat::create(arg0, arg1);
		tolua_pushusertype(tolua_S,ret,"Repeat");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Repeat_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_Repeat_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (Repeat)");
	return 0;
}

int lua_register_cocos2dx_Repeat(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"Repeat");
	tolua_cclass(tolua_S,"Repeat","Repeat","ActionInterval",NULL);

	tolua_beginmodule(tolua_S,"Repeat");
		tolua_function(tolua_S,"setInnerAction",lua_cocos2dx_Repeat_setInnerAction);
		tolua_function(tolua_S,"startWithTarget",lua_cocos2dx_Repeat_startWithTarget);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_Repeat_reverse);
		tolua_function(tolua_S,"clone",lua_cocos2dx_Repeat_clone);
		tolua_function(tolua_S,"stop",lua_cocos2dx_Repeat_stop);
		tolua_function(tolua_S,"update",lua_cocos2dx_Repeat_update);
		tolua_function(tolua_S,"initWithAction",lua_cocos2dx_Repeat_initWithAction);
		tolua_function(tolua_S,"getInnerAction",lua_cocos2dx_Repeat_getInnerAction);
		tolua_function(tolua_S,"isDone",lua_cocos2dx_Repeat_isDone);
		tolua_function(tolua_S,"create", lua_cocos2dx_Repeat_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_RepeatForever_setInnerAction(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::RepeatForever* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"RepeatForever",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::RepeatForever*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_RepeatForever_setInnerAction'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::ActionInterval* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"ActionInterval",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::ActionInterval*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->setInnerAction(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_RepeatForever_setInnerAction'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_RepeatForever_startWithTarget(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::RepeatForever* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"RepeatForever",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::RepeatForever*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_RepeatForever_startWithTarget'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Node* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->startWithTarget(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_RepeatForever_startWithTarget'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_RepeatForever_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::RepeatForever* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"RepeatForever",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::RepeatForever*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_RepeatForever_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::RepeatForever* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"RepeatForever");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_RepeatForever_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_RepeatForever_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::RepeatForever* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"RepeatForever",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::RepeatForever*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_RepeatForever_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::RepeatForever* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"RepeatForever");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_RepeatForever_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_RepeatForever_step(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::RepeatForever* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"RepeatForever",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::RepeatForever*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_RepeatForever_step'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->step(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_RepeatForever_step'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_RepeatForever_initWithAction(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::RepeatForever* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"RepeatForever",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::RepeatForever*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_RepeatForever_initWithAction'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::ActionInterval* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"ActionInterval",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::ActionInterval*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		bool ret = cobj->initWithAction(arg0);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_RepeatForever_initWithAction'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_RepeatForever_getInnerAction(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::RepeatForever* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"RepeatForever",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::RepeatForever*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_RepeatForever_getInnerAction'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::ActionInterval* ret = cobj->getInnerAction();
		tolua_pushusertype(tolua_S,ret,"ActionInterval");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_RepeatForever_getInnerAction'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_RepeatForever_isDone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::RepeatForever* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"RepeatForever",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::RepeatForever*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_RepeatForever_isDone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->isDone();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_RepeatForever_isDone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_RepeatForever_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"RepeatForever",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 1) {
		cocos2d::ActionInterval* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"ActionInterval",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::ActionInterval*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cocos2d::RepeatForever* ret = cocos2d::RepeatForever::create(arg0);
		tolua_pushusertype(tolua_S,ret,"RepeatForever");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_RepeatForever_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_RepeatForever_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::RepeatForever* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::RepeatForever();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"RepeatForever");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_RepeatForever_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_RepeatForever_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (RepeatForever)");
	return 0;
}

int lua_register_cocos2dx_RepeatForever(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"RepeatForever");
	tolua_cclass(tolua_S,"RepeatForever","RepeatForever","ActionInterval",NULL);

	tolua_beginmodule(tolua_S,"RepeatForever");
		tolua_function(tolua_S,"setInnerAction",lua_cocos2dx_RepeatForever_setInnerAction);
		tolua_function(tolua_S,"startWithTarget",lua_cocos2dx_RepeatForever_startWithTarget);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_RepeatForever_reverse);
		tolua_function(tolua_S,"clone",lua_cocos2dx_RepeatForever_clone);
		tolua_function(tolua_S,"step",lua_cocos2dx_RepeatForever_step);
		tolua_function(tolua_S,"initWithAction",lua_cocos2dx_RepeatForever_initWithAction);
		tolua_function(tolua_S,"getInnerAction",lua_cocos2dx_RepeatForever_getInnerAction);
		tolua_function(tolua_S,"isDone",lua_cocos2dx_RepeatForever_isDone);
		tolua_function(tolua_S,"new",lua_cocos2dx_RepeatForever_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_RepeatForever_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_Spawn_startWithTarget(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Spawn* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Spawn",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Spawn*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Spawn_startWithTarget'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Node* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->startWithTarget(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Spawn_startWithTarget'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Spawn_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Spawn* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Spawn",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Spawn*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Spawn_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Spawn* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"Spawn");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Spawn_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Spawn_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Spawn* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Spawn",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Spawn*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Spawn_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Spawn* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"Spawn");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Spawn_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Spawn_stop(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Spawn* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Spawn",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Spawn*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Spawn_stop'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->stop();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Spawn_stop'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Spawn_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Spawn* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Spawn",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Spawn*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Spawn_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Spawn_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Spawn_initWithTwoActions(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Spawn* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Spawn",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Spawn*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Spawn_initWithTwoActions'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		cocos2d::FiniteTimeAction* arg0;
		cocos2d::FiniteTimeAction* arg1;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"FiniteTimeAction",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::FiniteTimeAction*)tolua_tousertype(tolua_S,2,0);
		};
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"FiniteTimeAction",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::FiniteTimeAction*)tolua_tousertype(tolua_S,3,0);
		};
		if(!ok)
			return 0;
		bool ret = cobj->initWithTwoActions(arg0, arg1);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Spawn_initWithTwoActions'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Spawn_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (Spawn)");
	return 0;
}

int lua_register_cocos2dx_Spawn(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"Spawn");
	tolua_cclass(tolua_S,"Spawn","Spawn","ActionInterval",NULL);

	tolua_beginmodule(tolua_S,"Spawn");
		tolua_function(tolua_S,"startWithTarget",lua_cocos2dx_Spawn_startWithTarget);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_Spawn_reverse);
		tolua_function(tolua_S,"clone",lua_cocos2dx_Spawn_clone);
		tolua_function(tolua_S,"stop",lua_cocos2dx_Spawn_stop);
		tolua_function(tolua_S,"update",lua_cocos2dx_Spawn_update);
		tolua_function(tolua_S,"initWithTwoActions",lua_cocos2dx_Spawn_initWithTwoActions);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_RotateTo_startWithTarget(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::RotateTo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"RotateTo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::RotateTo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_RotateTo_startWithTarget'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Node* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->startWithTarget(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_RotateTo_startWithTarget'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_RotateTo_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::RotateTo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"RotateTo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::RotateTo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_RotateTo_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::RotateTo* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"RotateTo");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_RotateTo_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_RotateTo_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::RotateTo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"RotateTo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::RotateTo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_RotateTo_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::RotateTo* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"RotateTo");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_RotateTo_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_RotateTo_initWithDuration(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::RotateTo* cobj = NULL;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"RotateTo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::RotateTo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_RotateTo_initWithDuration'", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	do{
		if (argc == 3) {
			double arg0;
			ok &= luaval_to_number(tolua_S, 2,&arg0);

			if (!ok) { ok = true; break; }
			double arg1;
			ok &= luaval_to_number(tolua_S, 3,&arg1);

			if (!ok) { ok = true; break; }
			double arg2;
			ok &= luaval_to_number(tolua_S, 4,&arg2);

			if (!ok) { ok = true; break; }
		bool ret = cobj->initWithDuration(arg0, arg1, arg2);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
		}
	}while(0);
	do{
		if (argc == 2) {
			double arg0;
			ok &= luaval_to_number(tolua_S, 2,&arg0);

			if (!ok) { ok = true; break; }
			double arg1;
			ok &= luaval_to_number(tolua_S, 3,&arg1);

			if (!ok) { ok = true; break; }
		bool ret = cobj->initWithDuration(arg0, arg1);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
		}
	}while(0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_RotateTo_initWithDuration'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_RotateTo_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::RotateTo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"RotateTo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::RotateTo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_RotateTo_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_RotateTo_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_RotateTo_create(lua_State* tolua_S)
{
	int argc = 0;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"RotateTo",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S)-1;

	do {
		if (argc == 2) {
			double arg0;
			ok &= luaval_to_number(tolua_S, 2,&arg0);
			if (!ok) { ok = true; break; }
			double arg1;
			ok &= luaval_to_number(tolua_S, 3,&arg1);
			if (!ok) { ok = true; break; }
			cocos2d::RotateTo* ret = cocos2d::RotateTo::create(arg0, arg1);
			tolua_pushusertype(tolua_S,ret,"RotateTo");
			return 1;
		}
	} while (0);
	do {
		if (argc == 3) {
			double arg0;
			ok &= luaval_to_number(tolua_S, 2,&arg0);
			if (!ok) { ok = true; break; }
			double arg1;
			ok &= luaval_to_number(tolua_S, 3,&arg1);
			if (!ok) { ok = true; break; }
			double arg2;
			ok &= luaval_to_number(tolua_S, 4,&arg2);
			if (!ok) { ok = true; break; }
			cocos2d::RotateTo* ret = cocos2d::RotateTo::create(arg0, arg1, arg2);
			tolua_pushusertype(tolua_S,ret,"RotateTo");
			return 1;
		}
	} while (0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 3);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_RotateTo_create'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_RotateTo_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (RotateTo)");
	return 0;
}

int lua_register_cocos2dx_RotateTo(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"RotateTo");
	tolua_cclass(tolua_S,"RotateTo","RotateTo","ActionInterval",NULL);

	tolua_beginmodule(tolua_S,"RotateTo");
		tolua_function(tolua_S,"startWithTarget",lua_cocos2dx_RotateTo_startWithTarget);
		tolua_function(tolua_S,"clone",lua_cocos2dx_RotateTo_clone);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_RotateTo_reverse);
		tolua_function(tolua_S,"initWithDuration",lua_cocos2dx_RotateTo_initWithDuration);
		tolua_function(tolua_S,"update",lua_cocos2dx_RotateTo_update);
		tolua_function(tolua_S,"create", lua_cocos2dx_RotateTo_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_RotateBy_startWithTarget(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::RotateBy* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"RotateBy",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::RotateBy*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_RotateBy_startWithTarget'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Node* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->startWithTarget(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_RotateBy_startWithTarget'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_RotateBy_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::RotateBy* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"RotateBy",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::RotateBy*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_RotateBy_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::RotateBy* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"RotateBy");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_RotateBy_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_RotateBy_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::RotateBy* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"RotateBy",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::RotateBy*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_RotateBy_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::RotateBy* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"RotateBy");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_RotateBy_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_RotateBy_initWithDuration(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::RotateBy* cobj = NULL;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"RotateBy",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::RotateBy*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_RotateBy_initWithDuration'", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	do{
		if (argc == 3) {
			double arg0;
			ok &= luaval_to_number(tolua_S, 2,&arg0);

			if (!ok) { ok = true; break; }
			double arg1;
			ok &= luaval_to_number(tolua_S, 3,&arg1);

			if (!ok) { ok = true; break; }
			double arg2;
			ok &= luaval_to_number(tolua_S, 4,&arg2);

			if (!ok) { ok = true; break; }
		bool ret = cobj->initWithDuration(arg0, arg1, arg2);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
		}
	}while(0);
	do{
		if (argc == 2) {
			double arg0;
			ok &= luaval_to_number(tolua_S, 2,&arg0);

			if (!ok) { ok = true; break; }
			double arg1;
			ok &= luaval_to_number(tolua_S, 3,&arg1);

			if (!ok) { ok = true; break; }
		bool ret = cobj->initWithDuration(arg0, arg1);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
		}
	}while(0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_RotateBy_initWithDuration'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_RotateBy_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::RotateBy* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"RotateBy",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::RotateBy*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_RotateBy_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_RotateBy_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_RotateBy_create(lua_State* tolua_S)
{
	int argc = 0;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"RotateBy",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S)-1;

	do {
		if (argc == 3) {
			double arg0;
			ok &= luaval_to_number(tolua_S, 2,&arg0);
			if (!ok) { ok = true; break; }
			double arg1;
			ok &= luaval_to_number(tolua_S, 3,&arg1);
			if (!ok) { ok = true; break; }
			double arg2;
			ok &= luaval_to_number(tolua_S, 4,&arg2);
			if (!ok) { ok = true; break; }
			cocos2d::RotateBy* ret = cocos2d::RotateBy::create(arg0, arg1, arg2);
			tolua_pushusertype(tolua_S,ret,"RotateBy");
			return 1;
		}
	} while (0);
	do {
		if (argc == 2) {
			double arg0;
			ok &= luaval_to_number(tolua_S, 2,&arg0);
			if (!ok) { ok = true; break; }
			double arg1;
			ok &= luaval_to_number(tolua_S, 3,&arg1);
			if (!ok) { ok = true; break; }
			cocos2d::RotateBy* ret = cocos2d::RotateBy::create(arg0, arg1);
			tolua_pushusertype(tolua_S,ret,"RotateBy");
			return 1;
		}
	} while (0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_RotateBy_create'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_RotateBy_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (RotateBy)");
	return 0;
}

int lua_register_cocos2dx_RotateBy(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"RotateBy");
	tolua_cclass(tolua_S,"RotateBy","RotateBy","ActionInterval",NULL);

	tolua_beginmodule(tolua_S,"RotateBy");
		tolua_function(tolua_S,"startWithTarget",lua_cocos2dx_RotateBy_startWithTarget);
		tolua_function(tolua_S,"clone",lua_cocos2dx_RotateBy_clone);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_RotateBy_reverse);
		tolua_function(tolua_S,"initWithDuration",lua_cocos2dx_RotateBy_initWithDuration);
		tolua_function(tolua_S,"update",lua_cocos2dx_RotateBy_update);
		tolua_function(tolua_S,"create", lua_cocos2dx_RotateBy_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_MoveBy_startWithTarget(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MoveBy* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MoveBy",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MoveBy*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MoveBy_startWithTarget'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Node* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->startWithTarget(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MoveBy_startWithTarget'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MoveBy_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MoveBy* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MoveBy",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MoveBy*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MoveBy_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::MoveBy* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"MoveBy");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MoveBy_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MoveBy_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MoveBy* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MoveBy",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MoveBy*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MoveBy_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::MoveBy* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"MoveBy");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MoveBy_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MoveBy_initWithDuration(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MoveBy* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MoveBy",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MoveBy*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MoveBy_initWithDuration'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		double arg0;
		cocos2d::Point arg1;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_point(tolua_S, 3, &arg1);
		if(!ok)
			return 0;
		bool ret = cobj->initWithDuration(arg0, arg1);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MoveBy_initWithDuration'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MoveBy_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MoveBy* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MoveBy",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MoveBy*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MoveBy_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MoveBy_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MoveBy_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"MoveBy",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 2) {
		double arg0;
		cocos2d::Point arg1;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_point(tolua_S, 3, &arg1);
		if(!ok)
			return 0;
		cocos2d::MoveBy* ret = cocos2d::MoveBy::create(arg0, arg1);
		tolua_pushusertype(tolua_S,ret,"MoveBy");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MoveBy_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_MoveBy_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (MoveBy)");
	return 0;
}

int lua_register_cocos2dx_MoveBy(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"MoveBy");
	tolua_cclass(tolua_S,"MoveBy","MoveBy","ActionInterval",NULL);

	tolua_beginmodule(tolua_S,"MoveBy");
		tolua_function(tolua_S,"startWithTarget",lua_cocos2dx_MoveBy_startWithTarget);
		tolua_function(tolua_S,"clone",lua_cocos2dx_MoveBy_clone);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_MoveBy_reverse);
		tolua_function(tolua_S,"initWithDuration",lua_cocos2dx_MoveBy_initWithDuration);
		tolua_function(tolua_S,"update",lua_cocos2dx_MoveBy_update);
		tolua_function(tolua_S,"create", lua_cocos2dx_MoveBy_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_MoveTo_startWithTarget(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MoveTo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MoveTo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MoveTo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MoveTo_startWithTarget'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Node* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->startWithTarget(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MoveTo_startWithTarget'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MoveTo_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MoveTo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MoveTo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MoveTo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MoveTo_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::MoveTo* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"MoveTo");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MoveTo_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MoveTo_initWithDuration(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MoveTo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MoveTo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MoveTo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MoveTo_initWithDuration'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		double arg0;
		cocos2d::Point arg1;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_point(tolua_S, 3, &arg1);
		if(!ok)
			return 0;
		bool ret = cobj->initWithDuration(arg0, arg1);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MoveTo_initWithDuration'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MoveTo_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"MoveTo",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 2) {
		double arg0;
		cocos2d::Point arg1;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_point(tolua_S, 3, &arg1);
		if(!ok)
			return 0;
		cocos2d::MoveTo* ret = cocos2d::MoveTo::create(arg0, arg1);
		tolua_pushusertype(tolua_S,ret,"MoveTo");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MoveTo_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_MoveTo_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (MoveTo)");
	return 0;
}

int lua_register_cocos2dx_MoveTo(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"MoveTo");
	tolua_cclass(tolua_S,"MoveTo","MoveTo","MoveBy",NULL);

	tolua_beginmodule(tolua_S,"MoveTo");
		tolua_function(tolua_S,"startWithTarget",lua_cocos2dx_MoveTo_startWithTarget);
		tolua_function(tolua_S,"clone",lua_cocos2dx_MoveTo_clone);
		tolua_function(tolua_S,"initWithDuration",lua_cocos2dx_MoveTo_initWithDuration);
		tolua_function(tolua_S,"create", lua_cocos2dx_MoveTo_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_SkewTo_startWithTarget(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SkewTo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SkewTo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SkewTo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SkewTo_startWithTarget'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Node* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->startWithTarget(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SkewTo_startWithTarget'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SkewTo_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SkewTo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SkewTo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SkewTo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SkewTo_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::SkewTo* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"SkewTo");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SkewTo_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SkewTo_initWithDuration(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SkewTo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SkewTo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SkewTo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SkewTo_initWithDuration'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 3) {
		double arg0;
		double arg1;
		double arg2;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_number(tolua_S, 3,&arg1);
		ok &= luaval_to_number(tolua_S, 4,&arg2);
		if(!ok)
			return 0;
		bool ret = cobj->initWithDuration(arg0, arg1, arg2);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 3);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SkewTo_initWithDuration'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SkewTo_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SkewTo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SkewTo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SkewTo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SkewTo_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::SkewTo* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"SkewTo");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SkewTo_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SkewTo_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SkewTo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SkewTo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SkewTo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SkewTo_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SkewTo_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SkewTo_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"SkewTo",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 3) {
		double arg0;
		double arg1;
		double arg2;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_number(tolua_S, 3,&arg1);
		ok &= luaval_to_number(tolua_S, 4,&arg2);
		if(!ok)
			return 0;
		cocos2d::SkewTo* ret = cocos2d::SkewTo::create(arg0, arg1, arg2);
		tolua_pushusertype(tolua_S,ret,"SkewTo");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 3);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SkewTo_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_SkewTo_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SkewTo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::SkewTo();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"SkewTo");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SkewTo_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_SkewTo_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (SkewTo)");
	return 0;
}

int lua_register_cocos2dx_SkewTo(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"SkewTo");
	tolua_cclass(tolua_S,"SkewTo","SkewTo","ActionInterval",NULL);

	tolua_beginmodule(tolua_S,"SkewTo");
		tolua_function(tolua_S,"startWithTarget",lua_cocos2dx_SkewTo_startWithTarget);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_SkewTo_reverse);
		tolua_function(tolua_S,"initWithDuration",lua_cocos2dx_SkewTo_initWithDuration);
		tolua_function(tolua_S,"clone",lua_cocos2dx_SkewTo_clone);
		tolua_function(tolua_S,"update",lua_cocos2dx_SkewTo_update);
		tolua_function(tolua_S,"new",lua_cocos2dx_SkewTo_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_SkewTo_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_SkewBy_startWithTarget(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SkewBy* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SkewBy",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SkewBy*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SkewBy_startWithTarget'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Node* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->startWithTarget(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SkewBy_startWithTarget'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SkewBy_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SkewBy* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SkewBy",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SkewBy*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SkewBy_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::SkewBy* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"SkewBy");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SkewBy_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SkewBy_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SkewBy* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SkewBy",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SkewBy*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SkewBy_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::SkewBy* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"SkewBy");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SkewBy_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SkewBy_initWithDuration(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SkewBy* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SkewBy",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SkewBy*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SkewBy_initWithDuration'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 3) {
		double arg0;
		double arg1;
		double arg2;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_number(tolua_S, 3,&arg1);
		ok &= luaval_to_number(tolua_S, 4,&arg2);
		if(!ok)
			return 0;
		bool ret = cobj->initWithDuration(arg0, arg1, arg2);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 3);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SkewBy_initWithDuration'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SkewBy_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"SkewBy",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 3) {
		double arg0;
		double arg1;
		double arg2;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_number(tolua_S, 3,&arg1);
		ok &= luaval_to_number(tolua_S, 4,&arg2);
		if(!ok)
			return 0;
		cocos2d::SkewBy* ret = cocos2d::SkewBy::create(arg0, arg1, arg2);
		tolua_pushusertype(tolua_S,ret,"SkewBy");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 3);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SkewBy_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_SkewBy_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (SkewBy)");
	return 0;
}

int lua_register_cocos2dx_SkewBy(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"SkewBy");
	tolua_cclass(tolua_S,"SkewBy","SkewBy","SkewTo",NULL);

	tolua_beginmodule(tolua_S,"SkewBy");
		tolua_function(tolua_S,"startWithTarget",lua_cocos2dx_SkewBy_startWithTarget);
		tolua_function(tolua_S,"clone",lua_cocos2dx_SkewBy_clone);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_SkewBy_reverse);
		tolua_function(tolua_S,"initWithDuration",lua_cocos2dx_SkewBy_initWithDuration);
		tolua_function(tolua_S,"create", lua_cocos2dx_SkewBy_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_JumpBy_startWithTarget(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::JumpBy* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"JumpBy",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::JumpBy*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_JumpBy_startWithTarget'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Node* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->startWithTarget(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_JumpBy_startWithTarget'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_JumpBy_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::JumpBy* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"JumpBy",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::JumpBy*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_JumpBy_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::JumpBy* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"JumpBy");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_JumpBy_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_JumpBy_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::JumpBy* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"JumpBy",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::JumpBy*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_JumpBy_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::JumpBy* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"JumpBy");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_JumpBy_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_JumpBy_initWithDuration(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::JumpBy* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"JumpBy",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::JumpBy*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_JumpBy_initWithDuration'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 4) {
		double arg0;
		cocos2d::Point arg1;
		double arg2;
		int arg3;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_point(tolua_S, 3, &arg1);
		ok &= luaval_to_number(tolua_S, 4,&arg2);
		ok &= luaval_to_int32(tolua_S, 5,(int*)&arg3);
		if(!ok)
			return 0;
		bool ret = cobj->initWithDuration(arg0, arg1, arg2, arg3);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 4);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_JumpBy_initWithDuration'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_JumpBy_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::JumpBy* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"JumpBy",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::JumpBy*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_JumpBy_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_JumpBy_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_JumpBy_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"JumpBy",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 4) {
		double arg0;
		cocos2d::Point arg1;
		double arg2;
		int arg3;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_point(tolua_S, 3, &arg1);
		ok &= luaval_to_number(tolua_S, 4,&arg2);
		ok &= luaval_to_int32(tolua_S, 5,(int*)&arg3);
		if(!ok)
			return 0;
		cocos2d::JumpBy* ret = cocos2d::JumpBy::create(arg0, arg1, arg2, arg3);
		tolua_pushusertype(tolua_S,ret,"JumpBy");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 4);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_JumpBy_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_JumpBy_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (JumpBy)");
	return 0;
}

int lua_register_cocos2dx_JumpBy(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"JumpBy");
	tolua_cclass(tolua_S,"JumpBy","JumpBy","ActionInterval",NULL);

	tolua_beginmodule(tolua_S,"JumpBy");
		tolua_function(tolua_S,"startWithTarget",lua_cocos2dx_JumpBy_startWithTarget);
		tolua_function(tolua_S,"clone",lua_cocos2dx_JumpBy_clone);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_JumpBy_reverse);
		tolua_function(tolua_S,"initWithDuration",lua_cocos2dx_JumpBy_initWithDuration);
		tolua_function(tolua_S,"update",lua_cocos2dx_JumpBy_update);
		tolua_function(tolua_S,"create", lua_cocos2dx_JumpBy_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_JumpTo_startWithTarget(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::JumpTo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"JumpTo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::JumpTo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_JumpTo_startWithTarget'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Node* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->startWithTarget(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_JumpTo_startWithTarget'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_JumpTo_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::JumpTo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"JumpTo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::JumpTo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_JumpTo_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::JumpTo* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"JumpTo");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_JumpTo_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_JumpTo_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::JumpTo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"JumpTo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::JumpTo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_JumpTo_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::JumpTo* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"JumpTo");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_JumpTo_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_JumpTo_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"JumpTo",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 4) {
		double arg0;
		cocos2d::Point arg1;
		double arg2;
		int arg3;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_point(tolua_S, 3, &arg1);
		ok &= luaval_to_number(tolua_S, 4,&arg2);
		ok &= luaval_to_int32(tolua_S, 5,(int*)&arg3);
		if(!ok)
			return 0;
		cocos2d::JumpTo* ret = cocos2d::JumpTo::create(arg0, arg1, arg2, arg3);
		tolua_pushusertype(tolua_S,ret,"JumpTo");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 4);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_JumpTo_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_JumpTo_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (JumpTo)");
	return 0;
}

int lua_register_cocos2dx_JumpTo(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"JumpTo");
	tolua_cclass(tolua_S,"JumpTo","JumpTo","JumpBy",NULL);

	tolua_beginmodule(tolua_S,"JumpTo");
		tolua_function(tolua_S,"startWithTarget",lua_cocos2dx_JumpTo_startWithTarget);
		tolua_function(tolua_S,"clone",lua_cocos2dx_JumpTo_clone);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_JumpTo_reverse);
		tolua_function(tolua_S,"create", lua_cocos2dx_JumpTo_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_BezierBy_startWithTarget(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::BezierBy* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"BezierBy",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::BezierBy*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_BezierBy_startWithTarget'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Node* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->startWithTarget(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_BezierBy_startWithTarget'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_BezierBy_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::BezierBy* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"BezierBy",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::BezierBy*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_BezierBy_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::BezierBy* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"BezierBy");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_BezierBy_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_BezierBy_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::BezierBy* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"BezierBy",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::BezierBy*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_BezierBy_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::BezierBy* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"BezierBy");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_BezierBy_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_BezierBy_initWithDuration(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::BezierBy* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"BezierBy",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::BezierBy*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_BezierBy_initWithDuration'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		double arg0;
		cocos2d::ccBezierConfig arg1;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		#pragma warning NO CONVERSION TO NATIVE FOR const ccBezierConfig;
		if(!ok)
			return 0;
		bool ret = cobj->initWithDuration(arg0, arg1);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_BezierBy_initWithDuration'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_BezierBy_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::BezierBy* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"BezierBy",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::BezierBy*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_BezierBy_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_BezierBy_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_BezierBy_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (BezierBy)");
	return 0;
}

int lua_register_cocos2dx_BezierBy(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"BezierBy");
	tolua_cclass(tolua_S,"BezierBy","BezierBy","ActionInterval",NULL);

	tolua_beginmodule(tolua_S,"BezierBy");
		tolua_function(tolua_S,"startWithTarget",lua_cocos2dx_BezierBy_startWithTarget);
		tolua_function(tolua_S,"clone",lua_cocos2dx_BezierBy_clone);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_BezierBy_reverse);
		tolua_function(tolua_S,"initWithDuration",lua_cocos2dx_BezierBy_initWithDuration);
		tolua_function(tolua_S,"update",lua_cocos2dx_BezierBy_update);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_BezierTo_startWithTarget(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::BezierTo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"BezierTo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::BezierTo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_BezierTo_startWithTarget'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Node* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->startWithTarget(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_BezierTo_startWithTarget'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_BezierTo_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::BezierTo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"BezierTo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::BezierTo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_BezierTo_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::BezierTo* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"BezierTo");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_BezierTo_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_BezierTo_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::BezierTo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"BezierTo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::BezierTo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_BezierTo_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::BezierTo* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"BezierTo");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_BezierTo_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_BezierTo_initWithDuration(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::BezierTo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"BezierTo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::BezierTo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_BezierTo_initWithDuration'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		double arg0;
		cocos2d::ccBezierConfig arg1;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		#pragma warning NO CONVERSION TO NATIVE FOR const ccBezierConfig;
		if(!ok)
			return 0;
		bool ret = cobj->initWithDuration(arg0, arg1);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_BezierTo_initWithDuration'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_BezierTo_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (BezierTo)");
	return 0;
}

int lua_register_cocos2dx_BezierTo(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"BezierTo");
	tolua_cclass(tolua_S,"BezierTo","BezierTo","BezierBy",NULL);

	tolua_beginmodule(tolua_S,"BezierTo");
		tolua_function(tolua_S,"startWithTarget",lua_cocos2dx_BezierTo_startWithTarget);
		tolua_function(tolua_S,"clone",lua_cocos2dx_BezierTo_clone);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_BezierTo_reverse);
		tolua_function(tolua_S,"initWithDuration",lua_cocos2dx_BezierTo_initWithDuration);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_ScaleTo_startWithTarget(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ScaleTo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ScaleTo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ScaleTo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ScaleTo_startWithTarget'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Node* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->startWithTarget(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ScaleTo_startWithTarget'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ScaleTo_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ScaleTo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ScaleTo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ScaleTo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ScaleTo_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::ScaleTo* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"ScaleTo");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ScaleTo_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ScaleTo_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ScaleTo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ScaleTo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ScaleTo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ScaleTo_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::ScaleTo* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"ScaleTo");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ScaleTo_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ScaleTo_initWithDuration(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ScaleTo* cobj = NULL;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ScaleTo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ScaleTo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ScaleTo_initWithDuration'", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	do{
		if (argc == 3) {
			double arg0;
			ok &= luaval_to_number(tolua_S, 2,&arg0);

			if (!ok) { ok = true; break; }
			double arg1;
			ok &= luaval_to_number(tolua_S, 3,&arg1);

			if (!ok) { ok = true; break; }
			double arg2;
			ok &= luaval_to_number(tolua_S, 4,&arg2);

			if (!ok) { ok = true; break; }
		bool ret = cobj->initWithDuration(arg0, arg1, arg2);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
		}
	}while(0);
	do{
		if (argc == 2) {
			double arg0;
			ok &= luaval_to_number(tolua_S, 2,&arg0);

			if (!ok) { ok = true; break; }
			double arg1;
			ok &= luaval_to_number(tolua_S, 3,&arg1);

			if (!ok) { ok = true; break; }
		bool ret = cobj->initWithDuration(arg0, arg1);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
		}
	}while(0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ScaleTo_initWithDuration'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ScaleTo_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ScaleTo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ScaleTo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ScaleTo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ScaleTo_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ScaleTo_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ScaleTo_create(lua_State* tolua_S)
{
	int argc = 0;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"ScaleTo",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S)-1;

	do {
		if (argc == 3) {
			double arg0;
			ok &= luaval_to_number(tolua_S, 2,&arg0);
			if (!ok) { ok = true; break; }
			double arg1;
			ok &= luaval_to_number(tolua_S, 3,&arg1);
			if (!ok) { ok = true; break; }
			double arg2;
			ok &= luaval_to_number(tolua_S, 4,&arg2);
			if (!ok) { ok = true; break; }
			cocos2d::ScaleTo* ret = cocos2d::ScaleTo::create(arg0, arg1, arg2);
			tolua_pushusertype(tolua_S,ret,"ScaleTo");
			return 1;
		}
	} while (0);
	do {
		if (argc == 2) {
			double arg0;
			ok &= luaval_to_number(tolua_S, 2,&arg0);
			if (!ok) { ok = true; break; }
			double arg1;
			ok &= luaval_to_number(tolua_S, 3,&arg1);
			if (!ok) { ok = true; break; }
			cocos2d::ScaleTo* ret = cocos2d::ScaleTo::create(arg0, arg1);
			tolua_pushusertype(tolua_S,ret,"ScaleTo");
			return 1;
		}
	} while (0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ScaleTo_create'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ScaleTo_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (ScaleTo)");
	return 0;
}

int lua_register_cocos2dx_ScaleTo(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"ScaleTo");
	tolua_cclass(tolua_S,"ScaleTo","ScaleTo","ActionInterval",NULL);

	tolua_beginmodule(tolua_S,"ScaleTo");
		tolua_function(tolua_S,"startWithTarget",lua_cocos2dx_ScaleTo_startWithTarget);
		tolua_function(tolua_S,"clone",lua_cocos2dx_ScaleTo_clone);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_ScaleTo_reverse);
		tolua_function(tolua_S,"initWithDuration",lua_cocos2dx_ScaleTo_initWithDuration);
		tolua_function(tolua_S,"update",lua_cocos2dx_ScaleTo_update);
		tolua_function(tolua_S,"create", lua_cocos2dx_ScaleTo_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_ScaleBy_startWithTarget(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ScaleBy* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ScaleBy",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ScaleBy*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ScaleBy_startWithTarget'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Node* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->startWithTarget(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ScaleBy_startWithTarget'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ScaleBy_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ScaleBy* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ScaleBy",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ScaleBy*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ScaleBy_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::ScaleBy* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"ScaleBy");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ScaleBy_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ScaleBy_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ScaleBy* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ScaleBy",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ScaleBy*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ScaleBy_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::ScaleBy* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"ScaleBy");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ScaleBy_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ScaleBy_create(lua_State* tolua_S)
{
	int argc = 0;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"ScaleBy",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S)-1;

	do {
		if (argc == 3) {
			double arg0;
			ok &= luaval_to_number(tolua_S, 2,&arg0);
			if (!ok) { ok = true; break; }
			double arg1;
			ok &= luaval_to_number(tolua_S, 3,&arg1);
			if (!ok) { ok = true; break; }
			double arg2;
			ok &= luaval_to_number(tolua_S, 4,&arg2);
			if (!ok) { ok = true; break; }
			cocos2d::ScaleBy* ret = cocos2d::ScaleBy::create(arg0, arg1, arg2);
			tolua_pushusertype(tolua_S,ret,"ScaleBy");
			return 1;
		}
	} while (0);
	do {
		if (argc == 2) {
			double arg0;
			ok &= luaval_to_number(tolua_S, 2,&arg0);
			if (!ok) { ok = true; break; }
			double arg1;
			ok &= luaval_to_number(tolua_S, 3,&arg1);
			if (!ok) { ok = true; break; }
			cocos2d::ScaleBy* ret = cocos2d::ScaleBy::create(arg0, arg1);
			tolua_pushusertype(tolua_S,ret,"ScaleBy");
			return 1;
		}
	} while (0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ScaleBy_create'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ScaleBy_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (ScaleBy)");
	return 0;
}

int lua_register_cocos2dx_ScaleBy(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"ScaleBy");
	tolua_cclass(tolua_S,"ScaleBy","ScaleBy","ScaleTo",NULL);

	tolua_beginmodule(tolua_S,"ScaleBy");
		tolua_function(tolua_S,"startWithTarget",lua_cocos2dx_ScaleBy_startWithTarget);
		tolua_function(tolua_S,"clone",lua_cocos2dx_ScaleBy_clone);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_ScaleBy_reverse);
		tolua_function(tolua_S,"create", lua_cocos2dx_ScaleBy_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_Blink_startWithTarget(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Blink* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Blink",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Blink*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Blink_startWithTarget'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Node* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->startWithTarget(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Blink_startWithTarget'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Blink_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Blink* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Blink",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Blink*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Blink_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Blink* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"Blink");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Blink_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Blink_initWithDuration(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Blink* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Blink",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Blink*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Blink_initWithDuration'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		double arg0;
		int arg1;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_int32(tolua_S, 3,(int*)&arg1);
		if(!ok)
			return 0;
		bool ret = cobj->initWithDuration(arg0, arg1);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Blink_initWithDuration'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Blink_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Blink* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Blink",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Blink*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Blink_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Blink* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"Blink");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Blink_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Blink_stop(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Blink* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Blink",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Blink*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Blink_stop'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->stop();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Blink_stop'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Blink_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Blink* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Blink",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Blink*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Blink_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Blink_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Blink_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"Blink",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 2) {
		double arg0;
		int arg1;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_int32(tolua_S, 3,(int*)&arg1);
		if(!ok)
			return 0;
		cocos2d::Blink* ret = cocos2d::Blink::create(arg0, arg1);
		tolua_pushusertype(tolua_S,ret,"Blink");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Blink_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_Blink_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (Blink)");
	return 0;
}

int lua_register_cocos2dx_Blink(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"Blink");
	tolua_cclass(tolua_S,"Blink","Blink","ActionInterval",NULL);

	tolua_beginmodule(tolua_S,"Blink");
		tolua_function(tolua_S,"startWithTarget",lua_cocos2dx_Blink_startWithTarget);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_Blink_reverse);
		tolua_function(tolua_S,"initWithDuration",lua_cocos2dx_Blink_initWithDuration);
		tolua_function(tolua_S,"clone",lua_cocos2dx_Blink_clone);
		tolua_function(tolua_S,"stop",lua_cocos2dx_Blink_stop);
		tolua_function(tolua_S,"update",lua_cocos2dx_Blink_update);
		tolua_function(tolua_S,"create", lua_cocos2dx_Blink_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_FadeIn_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::FadeIn* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"FadeIn",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::FadeIn*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_FadeIn_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::FadeIn* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"FadeIn");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FadeIn_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_FadeIn_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::FadeIn* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"FadeIn",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::FadeIn*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_FadeIn_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FadeIn_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_FadeIn_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::FadeIn* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"FadeIn",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::FadeIn*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_FadeIn_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::ActionInterval* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"ActionInterval");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FadeIn_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_FadeIn_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"FadeIn",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cocos2d::FadeIn* ret = cocos2d::FadeIn::create(arg0);
		tolua_pushusertype(tolua_S,ret,"FadeIn");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FadeIn_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_FadeIn_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (FadeIn)");
	return 0;
}

int lua_register_cocos2dx_FadeIn(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"FadeIn");
	tolua_cclass(tolua_S,"FadeIn","FadeIn","ActionInterval",NULL);

	tolua_beginmodule(tolua_S,"FadeIn");
		tolua_function(tolua_S,"clone",lua_cocos2dx_FadeIn_clone);
		tolua_function(tolua_S,"update",lua_cocos2dx_FadeIn_update);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_FadeIn_reverse);
		tolua_function(tolua_S,"create", lua_cocos2dx_FadeIn_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_FadeOut_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::FadeOut* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"FadeOut",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::FadeOut*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_FadeOut_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::FadeOut* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"FadeOut");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FadeOut_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_FadeOut_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::FadeOut* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"FadeOut",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::FadeOut*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_FadeOut_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FadeOut_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_FadeOut_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::FadeOut* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"FadeOut",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::FadeOut*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_FadeOut_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::ActionInterval* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"ActionInterval");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FadeOut_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_FadeOut_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"FadeOut",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cocos2d::FadeOut* ret = cocos2d::FadeOut::create(arg0);
		tolua_pushusertype(tolua_S,ret,"FadeOut");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FadeOut_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_FadeOut_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (FadeOut)");
	return 0;
}

int lua_register_cocos2dx_FadeOut(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"FadeOut");
	tolua_cclass(tolua_S,"FadeOut","FadeOut","ActionInterval",NULL);

	tolua_beginmodule(tolua_S,"FadeOut");
		tolua_function(tolua_S,"clone",lua_cocos2dx_FadeOut_clone);
		tolua_function(tolua_S,"update",lua_cocos2dx_FadeOut_update);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_FadeOut_reverse);
		tolua_function(tolua_S,"create", lua_cocos2dx_FadeOut_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_FadeTo_startWithTarget(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::FadeTo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"FadeTo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::FadeTo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_FadeTo_startWithTarget'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Node* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->startWithTarget(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FadeTo_startWithTarget'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_FadeTo_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::FadeTo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"FadeTo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::FadeTo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_FadeTo_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::FadeTo* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"FadeTo");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FadeTo_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_FadeTo_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::FadeTo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"FadeTo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::FadeTo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_FadeTo_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::FadeTo* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"FadeTo");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FadeTo_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_FadeTo_initWithDuration(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::FadeTo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"FadeTo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::FadeTo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_FadeTo_initWithDuration'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		double arg0;
		uint16_t arg1;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_uint16(tolua_S, 3,&arg1);
		if(!ok)
			return 0;
		bool ret = cobj->initWithDuration(arg0, arg1);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FadeTo_initWithDuration'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_FadeTo_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::FadeTo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"FadeTo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::FadeTo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_FadeTo_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FadeTo_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_FadeTo_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"FadeTo",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 2) {
		double arg0;
		uint16_t arg1;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_uint16(tolua_S, 3,&arg1);
		if(!ok)
			return 0;
		cocos2d::FadeTo* ret = cocos2d::FadeTo::create(arg0, arg1);
		tolua_pushusertype(tolua_S,ret,"FadeTo");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FadeTo_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_FadeTo_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (FadeTo)");
	return 0;
}

int lua_register_cocos2dx_FadeTo(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"FadeTo");
	tolua_cclass(tolua_S,"FadeTo","FadeTo","ActionInterval",NULL);

	tolua_beginmodule(tolua_S,"FadeTo");
		tolua_function(tolua_S,"startWithTarget",lua_cocos2dx_FadeTo_startWithTarget);
		tolua_function(tolua_S,"clone",lua_cocos2dx_FadeTo_clone);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_FadeTo_reverse);
		tolua_function(tolua_S,"initWithDuration",lua_cocos2dx_FadeTo_initWithDuration);
		tolua_function(tolua_S,"update",lua_cocos2dx_FadeTo_update);
		tolua_function(tolua_S,"create", lua_cocos2dx_FadeTo_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_TintTo_startWithTarget(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TintTo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TintTo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TintTo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TintTo_startWithTarget'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Node* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->startWithTarget(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TintTo_startWithTarget'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TintTo_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TintTo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TintTo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TintTo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TintTo_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::TintTo* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"TintTo");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TintTo_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TintTo_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TintTo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TintTo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TintTo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TintTo_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::TintTo* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"TintTo");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TintTo_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TintTo_initWithDuration(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TintTo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TintTo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TintTo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TintTo_initWithDuration'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 4) {
		double arg0;
		uint16_t arg1;
		uint16_t arg2;
		uint16_t arg3;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_uint16(tolua_S, 3,&arg1);
		ok &= luaval_to_uint16(tolua_S, 4,&arg2);
		ok &= luaval_to_uint16(tolua_S, 5,&arg3);
		if(!ok)
			return 0;
		bool ret = cobj->initWithDuration(arg0, arg1, arg2, arg3);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 4);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TintTo_initWithDuration'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TintTo_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TintTo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TintTo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TintTo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TintTo_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TintTo_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TintTo_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"TintTo",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 4) {
		double arg0;
		uint16_t arg1;
		uint16_t arg2;
		uint16_t arg3;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_uint16(tolua_S, 3,&arg1);
		ok &= luaval_to_uint16(tolua_S, 4,&arg2);
		ok &= luaval_to_uint16(tolua_S, 5,&arg3);
		if(!ok)
			return 0;
		cocos2d::TintTo* ret = cocos2d::TintTo::create(arg0, arg1, arg2, arg3);
		tolua_pushusertype(tolua_S,ret,"TintTo");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 4);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TintTo_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TintTo_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (TintTo)");
	return 0;
}

int lua_register_cocos2dx_TintTo(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"TintTo");
	tolua_cclass(tolua_S,"TintTo","TintTo","ActionInterval",NULL);

	tolua_beginmodule(tolua_S,"TintTo");
		tolua_function(tolua_S,"startWithTarget",lua_cocos2dx_TintTo_startWithTarget);
		tolua_function(tolua_S,"clone",lua_cocos2dx_TintTo_clone);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_TintTo_reverse);
		tolua_function(tolua_S,"initWithDuration",lua_cocos2dx_TintTo_initWithDuration);
		tolua_function(tolua_S,"update",lua_cocos2dx_TintTo_update);
		tolua_function(tolua_S,"create", lua_cocos2dx_TintTo_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_TintBy_startWithTarget(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TintBy* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TintBy",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TintBy*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TintBy_startWithTarget'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Node* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->startWithTarget(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TintBy_startWithTarget'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TintBy_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TintBy* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TintBy",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TintBy*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TintBy_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::TintBy* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"TintBy");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TintBy_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TintBy_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TintBy* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TintBy",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TintBy*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TintBy_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::TintBy* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"TintBy");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TintBy_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TintBy_initWithDuration(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TintBy* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TintBy",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TintBy*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TintBy_initWithDuration'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 4) {
		double arg0;
		int32_t arg1;
		int32_t arg2;
		int32_t arg3;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_int32(tolua_S, 3,&arg1);
		ok &= luaval_to_int32(tolua_S, 4,&arg2);
		ok &= luaval_to_int32(tolua_S, 5,&arg3);
		if(!ok)
			return 0;
		bool ret = cobj->initWithDuration(arg0, arg1, arg2, arg3);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 4);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TintBy_initWithDuration'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TintBy_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TintBy* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TintBy",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TintBy*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TintBy_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TintBy_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TintBy_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"TintBy",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 4) {
		double arg0;
		int32_t arg1;
		int32_t arg2;
		int32_t arg3;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_int32(tolua_S, 3,&arg1);
		ok &= luaval_to_int32(tolua_S, 4,&arg2);
		ok &= luaval_to_int32(tolua_S, 5,&arg3);
		if(!ok)
			return 0;
		cocos2d::TintBy* ret = cocos2d::TintBy::create(arg0, arg1, arg2, arg3);
		tolua_pushusertype(tolua_S,ret,"TintBy");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 4);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TintBy_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TintBy_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (TintBy)");
	return 0;
}

int lua_register_cocos2dx_TintBy(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"TintBy");
	tolua_cclass(tolua_S,"TintBy","TintBy","ActionInterval",NULL);

	tolua_beginmodule(tolua_S,"TintBy");
		tolua_function(tolua_S,"startWithTarget",lua_cocos2dx_TintBy_startWithTarget);
		tolua_function(tolua_S,"clone",lua_cocos2dx_TintBy_clone);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_TintBy_reverse);
		tolua_function(tolua_S,"initWithDuration",lua_cocos2dx_TintBy_initWithDuration);
		tolua_function(tolua_S,"update",lua_cocos2dx_TintBy_update);
		tolua_function(tolua_S,"create", lua_cocos2dx_TintBy_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_DelayTime_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::DelayTime* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"DelayTime",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::DelayTime*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_DelayTime_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::DelayTime* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"DelayTime");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_DelayTime_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_DelayTime_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::DelayTime* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"DelayTime",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::DelayTime*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_DelayTime_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_DelayTime_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_DelayTime_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::DelayTime* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"DelayTime",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::DelayTime*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_DelayTime_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::DelayTime* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"DelayTime");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_DelayTime_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_DelayTime_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"DelayTime",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cocos2d::DelayTime* ret = cocos2d::DelayTime::create(arg0);
		tolua_pushusertype(tolua_S,ret,"DelayTime");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_DelayTime_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_DelayTime_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (DelayTime)");
	return 0;
}

int lua_register_cocos2dx_DelayTime(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"DelayTime");
	tolua_cclass(tolua_S,"DelayTime","DelayTime","ActionInterval",NULL);

	tolua_beginmodule(tolua_S,"DelayTime");
		tolua_function(tolua_S,"clone",lua_cocos2dx_DelayTime_clone);
		tolua_function(tolua_S,"update",lua_cocos2dx_DelayTime_update);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_DelayTime_reverse);
		tolua_function(tolua_S,"create", lua_cocos2dx_DelayTime_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_Animate_startWithTarget(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Animate* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Animate",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Animate*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Animate_startWithTarget'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Node* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->startWithTarget(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Animate_startWithTarget'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Animate_getAnimation(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Animate* cobj = NULL;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Animate",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Animate*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Animate_getAnimation'", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	do{
		if (argc == 0) {
		cocos2d::Animation* ret = cobj->getAnimation();
		tolua_pushusertype(tolua_S,ret,"Animation");
	    return 1;
		}
	}while(0);
	do{
		if (argc == 0) {
		cocos2d::Animation* ret = cobj->getAnimation();
		tolua_pushusertype(tolua_S,ret,"Animation");
	    return 1;
		}
	}while(0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Animate_getAnimation'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Animate_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Animate* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Animate",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Animate*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Animate_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Animate* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"Animate");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Animate_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Animate_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Animate* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Animate",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Animate*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Animate_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Animate* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"Animate");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Animate_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Animate_stop(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Animate* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Animate",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Animate*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Animate_stop'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->stop();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Animate_stop'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Animate_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Animate* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Animate",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Animate*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Animate_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Animate_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Animate_initWithAnimation(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Animate* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Animate",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Animate*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Animate_initWithAnimation'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Animation* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Animation",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Animation*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		bool ret = cobj->initWithAnimation(arg0);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Animate_initWithAnimation'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Animate_setAnimation(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Animate* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Animate",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Animate*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Animate_setAnimation'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Animation* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Animation",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Animation*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->setAnimation(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Animate_setAnimation'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Animate_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"Animate",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 1) {
		cocos2d::Animation* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Animation",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Animation*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cocos2d::Animate* ret = cocos2d::Animate::create(arg0);
		tolua_pushusertype(tolua_S,ret,"Animate");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Animate_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_Animate_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Animate* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::Animate();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"Animate");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Animate_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_Animate_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (Animate)");
	return 0;
}

int lua_register_cocos2dx_Animate(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"Animate");
	tolua_cclass(tolua_S,"Animate","Animate","ActionInterval",NULL);

	tolua_beginmodule(tolua_S,"Animate");
		tolua_function(tolua_S,"startWithTarget",lua_cocos2dx_Animate_startWithTarget);
		tolua_function(tolua_S,"getAnimation",lua_cocos2dx_Animate_getAnimation);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_Animate_reverse);
		tolua_function(tolua_S,"clone",lua_cocos2dx_Animate_clone);
		tolua_function(tolua_S,"stop",lua_cocos2dx_Animate_stop);
		tolua_function(tolua_S,"update",lua_cocos2dx_Animate_update);
		tolua_function(tolua_S,"initWithAnimation",lua_cocos2dx_Animate_initWithAnimation);
		tolua_function(tolua_S,"setAnimation",lua_cocos2dx_Animate_setAnimation);
		tolua_function(tolua_S,"new",lua_cocos2dx_Animate_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_Animate_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_TargetedAction_startWithTarget(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TargetedAction* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TargetedAction",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TargetedAction*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TargetedAction_startWithTarget'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Node* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->startWithTarget(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TargetedAction_startWithTarget'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TargetedAction_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TargetedAction* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TargetedAction",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TargetedAction*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TargetedAction_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::TargetedAction* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"TargetedAction");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TargetedAction_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TargetedAction_setForcedTarget(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TargetedAction* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TargetedAction",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TargetedAction*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TargetedAction_setForcedTarget'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Node* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->setForcedTarget(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TargetedAction_setForcedTarget'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TargetedAction_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TargetedAction* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TargetedAction",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TargetedAction*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TargetedAction_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::TargetedAction* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"TargetedAction");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TargetedAction_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TargetedAction_initWithTarget(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TargetedAction* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TargetedAction",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TargetedAction*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TargetedAction_initWithTarget'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		cocos2d::Node* arg0;
		cocos2d::FiniteTimeAction* arg1;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"FiniteTimeAction",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::FiniteTimeAction*)tolua_tousertype(tolua_S,3,0);
		};
		if(!ok)
			return 0;
		bool ret = cobj->initWithTarget(arg0, arg1);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TargetedAction_initWithTarget'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TargetedAction_stop(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TargetedAction* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TargetedAction",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TargetedAction*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TargetedAction_stop'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->stop();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TargetedAction_stop'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TargetedAction_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TargetedAction* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TargetedAction",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TargetedAction*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TargetedAction_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TargetedAction_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TargetedAction_getForcedTarget(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TargetedAction* cobj = NULL;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TargetedAction",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TargetedAction*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TargetedAction_getForcedTarget'", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	do{
		if (argc == 0) {
		cocos2d::Node* ret = cobj->getForcedTarget();
		tolua_pushusertype(tolua_S,ret,"Node");
	    return 1;
		}
	}while(0);
	do{
		if (argc == 0) {
		cocos2d::Node* ret = cobj->getForcedTarget();
		tolua_pushusertype(tolua_S,ret,"Node");
	    return 1;
		}
	}while(0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TargetedAction_getForcedTarget'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TargetedAction_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"TargetedAction",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 2) {
		cocos2d::Node* arg0;
		cocos2d::FiniteTimeAction* arg1;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"FiniteTimeAction",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::FiniteTimeAction*)tolua_tousertype(tolua_S,3,0);
		};
		if(!ok)
			return 0;
		cocos2d::TargetedAction* ret = cocos2d::TargetedAction::create(arg0, arg1);
		tolua_pushusertype(tolua_S,ret,"TargetedAction");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TargetedAction_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TargetedAction_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TargetedAction* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::TargetedAction();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"TargetedAction");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TargetedAction_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TargetedAction_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (TargetedAction)");
	return 0;
}

int lua_register_cocos2dx_TargetedAction(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"TargetedAction");
	tolua_cclass(tolua_S,"TargetedAction","TargetedAction","ActionInterval",NULL);

	tolua_beginmodule(tolua_S,"TargetedAction");
		tolua_function(tolua_S,"startWithTarget",lua_cocos2dx_TargetedAction_startWithTarget);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_TargetedAction_reverse);
		tolua_function(tolua_S,"setForcedTarget",lua_cocos2dx_TargetedAction_setForcedTarget);
		tolua_function(tolua_S,"clone",lua_cocos2dx_TargetedAction_clone);
		tolua_function(tolua_S,"initWithTarget",lua_cocos2dx_TargetedAction_initWithTarget);
		tolua_function(tolua_S,"stop",lua_cocos2dx_TargetedAction_stop);
		tolua_function(tolua_S,"update",lua_cocos2dx_TargetedAction_update);
		tolua_function(tolua_S,"getForcedTarget",lua_cocos2dx_TargetedAction_getForcedTarget);
		tolua_function(tolua_S,"new",lua_cocos2dx_TargetedAction_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_TargetedAction_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_ActionCamera_startWithTarget(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ActionCamera* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ActionCamera",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ActionCamera*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ActionCamera_startWithTarget'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Node* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->startWithTarget(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ActionCamera_startWithTarget'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ActionCamera_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ActionCamera* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ActionCamera",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ActionCamera*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ActionCamera_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::ActionCamera* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"ActionCamera");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ActionCamera_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ActionCamera_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ActionCamera* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ActionCamera",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ActionCamera*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ActionCamera_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::ActionCamera* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"ActionCamera");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ActionCamera_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ActionCamera_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ActionCamera* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::ActionCamera();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"ActionCamera");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ActionCamera_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_ActionCamera_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (ActionCamera)");
	return 0;
}

int lua_register_cocos2dx_ActionCamera(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"ActionCamera");
	tolua_cclass(tolua_S,"ActionCamera","ActionCamera","ActionInterval",NULL);

	tolua_beginmodule(tolua_S,"ActionCamera");
		tolua_function(tolua_S,"startWithTarget",lua_cocos2dx_ActionCamera_startWithTarget);
		tolua_function(tolua_S,"clone",lua_cocos2dx_ActionCamera_clone);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_ActionCamera_reverse);
		tolua_function(tolua_S,"new",lua_cocos2dx_ActionCamera_constructor);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_OrbitCamera_startWithTarget(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::OrbitCamera* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"OrbitCamera",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::OrbitCamera*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_OrbitCamera_startWithTarget'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Node* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->startWithTarget(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_OrbitCamera_startWithTarget'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_OrbitCamera_initWithDuration(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::OrbitCamera* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"OrbitCamera",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::OrbitCamera*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_OrbitCamera_initWithDuration'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 7) {
		double arg0;
		double arg1;
		double arg2;
		double arg3;
		double arg4;
		double arg5;
		double arg6;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_number(tolua_S, 3,&arg1);
		ok &= luaval_to_number(tolua_S, 4,&arg2);
		ok &= luaval_to_number(tolua_S, 5,&arg3);
		ok &= luaval_to_number(tolua_S, 6,&arg4);
		ok &= luaval_to_number(tolua_S, 7,&arg5);
		ok &= luaval_to_number(tolua_S, 8,&arg6);
		if(!ok)
			return 0;
		bool ret = cobj->initWithDuration(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 7);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_OrbitCamera_initWithDuration'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_OrbitCamera_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::OrbitCamera* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"OrbitCamera",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::OrbitCamera*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_OrbitCamera_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::OrbitCamera* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"OrbitCamera");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_OrbitCamera_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_OrbitCamera_sphericalRadius(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::OrbitCamera* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"OrbitCamera",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::OrbitCamera*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_OrbitCamera_sphericalRadius'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 3) {
		float* arg0;
		float* arg1;
		float* arg2;
		#pragma warning NO CONVERSION TO NATIVE FOR float*;
		#pragma warning NO CONVERSION TO NATIVE FOR float*;
		#pragma warning NO CONVERSION TO NATIVE FOR float*;
		if(!ok)
			return 0;
		cobj->sphericalRadius(arg0, arg1, arg2);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 3);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_OrbitCamera_sphericalRadius'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_OrbitCamera_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::OrbitCamera* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"OrbitCamera",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::OrbitCamera*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_OrbitCamera_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_OrbitCamera_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_OrbitCamera_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"OrbitCamera",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 7) {
		double arg0;
		double arg1;
		double arg2;
		double arg3;
		double arg4;
		double arg5;
		double arg6;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_number(tolua_S, 3,&arg1);
		ok &= luaval_to_number(tolua_S, 4,&arg2);
		ok &= luaval_to_number(tolua_S, 5,&arg3);
		ok &= luaval_to_number(tolua_S, 6,&arg4);
		ok &= luaval_to_number(tolua_S, 7,&arg5);
		ok &= luaval_to_number(tolua_S, 8,&arg6);
		if(!ok)
			return 0;
		cocos2d::OrbitCamera* ret = cocos2d::OrbitCamera::create(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
		tolua_pushusertype(tolua_S,ret,"OrbitCamera");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 7);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_OrbitCamera_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_OrbitCamera_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::OrbitCamera* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::OrbitCamera();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"OrbitCamera");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_OrbitCamera_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_OrbitCamera_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (OrbitCamera)");
	return 0;
}

int lua_register_cocos2dx_OrbitCamera(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"OrbitCamera");
	tolua_cclass(tolua_S,"OrbitCamera","OrbitCamera","ActionCamera",NULL);

	tolua_beginmodule(tolua_S,"OrbitCamera");
		tolua_function(tolua_S,"startWithTarget",lua_cocos2dx_OrbitCamera_startWithTarget);
		tolua_function(tolua_S,"initWithDuration",lua_cocos2dx_OrbitCamera_initWithDuration);
		tolua_function(tolua_S,"clone",lua_cocos2dx_OrbitCamera_clone);
		tolua_function(tolua_S,"sphericalRadius",lua_cocos2dx_OrbitCamera_sphericalRadius);
		tolua_function(tolua_S,"update",lua_cocos2dx_OrbitCamera_update);
		tolua_function(tolua_S,"new",lua_cocos2dx_OrbitCamera_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_OrbitCamera_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_ActionManager_getActionByTag(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ActionManager* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ActionManager",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ActionManager*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ActionManager_getActionByTag'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		unsigned int arg0;
		cocos2d::Object* arg1;
		ok &= luaval_to_uint32(tolua_S, 2,&arg0);
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Object",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Object*)tolua_tousertype(tolua_S,3,0);
		};
		if(!ok)
			return 0;
		cocos2d::Action* ret = cobj->getActionByTag(arg0, arg1);
		tolua_pushusertype(tolua_S,ret,"Action");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ActionManager_getActionByTag'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ActionManager_removeActionByTag(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ActionManager* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ActionManager",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ActionManager*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ActionManager_removeActionByTag'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		unsigned int arg0;
		cocos2d::Object* arg1;
		ok &= luaval_to_uint32(tolua_S, 2,&arg0);
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Object",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Object*)tolua_tousertype(tolua_S,3,0);
		};
		if(!ok)
			return 0;
		cobj->removeActionByTag(arg0, arg1);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ActionManager_removeActionByTag'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ActionManager_removeAllActions(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ActionManager* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ActionManager",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ActionManager*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ActionManager_removeAllActions'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->removeAllActions();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ActionManager_removeAllActions'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ActionManager_addAction(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ActionManager* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ActionManager",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ActionManager*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ActionManager_addAction'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 3) {
		cocos2d::Action* arg0;
		cocos2d::Node* arg1;
		bool arg2;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Action",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Action*)tolua_tousertype(tolua_S,2,0);
		};
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Node*)tolua_tousertype(tolua_S,3,0);
		};
		ok &= luaval_to_boolean(tolua_S, 4,&arg2);
		if(!ok)
			return 0;
		cobj->addAction(arg0, arg1, arg2);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 3);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ActionManager_addAction'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ActionManager_resumeTarget(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ActionManager* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ActionManager",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ActionManager*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ActionManager_resumeTarget'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Object* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Object",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Object*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->resumeTarget(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ActionManager_resumeTarget'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ActionManager_getNumberOfRunningActionsInTarget(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ActionManager* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ActionManager",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ActionManager*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ActionManager_getNumberOfRunningActionsInTarget'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Object* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Object",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Object*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		unsigned int ret = cobj->getNumberOfRunningActionsInTarget(arg0);
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ActionManager_getNumberOfRunningActionsInTarget'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ActionManager_removeAllActionsFromTarget(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ActionManager* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ActionManager",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ActionManager*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ActionManager_removeAllActionsFromTarget'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Object* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Object",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Object*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->removeAllActionsFromTarget(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ActionManager_removeAllActionsFromTarget'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ActionManager_resumeTargets(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ActionManager* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ActionManager",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ActionManager*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ActionManager_resumeTargets'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Set* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Set",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Set*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->resumeTargets(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ActionManager_resumeTargets'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ActionManager_removeAction(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ActionManager* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ActionManager",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ActionManager*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ActionManager_removeAction'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Action* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Action",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Action*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->removeAction(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ActionManager_removeAction'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ActionManager_pauseTarget(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ActionManager* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ActionManager",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ActionManager*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ActionManager_pauseTarget'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Object* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Object",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Object*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->pauseTarget(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ActionManager_pauseTarget'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ActionManager_pauseAllRunningActions(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ActionManager* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ActionManager",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ActionManager*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ActionManager_pauseAllRunningActions'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Set* ret = cobj->pauseAllRunningActions();
		tolua_pushusertype(tolua_S,ret,"Set");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ActionManager_pauseAllRunningActions'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ActionManager_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ActionManager* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::ActionManager();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"ActionManager");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ActionManager_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_ActionManager_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (ActionManager)");
	return 0;
}

int lua_register_cocos2dx_ActionManager(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"ActionManager");
	tolua_cclass(tolua_S,"ActionManager","ActionManager","",NULL);

	tolua_beginmodule(tolua_S,"ActionManager");
		tolua_function(tolua_S,"getActionByTag",lua_cocos2dx_ActionManager_getActionByTag);
		tolua_function(tolua_S,"removeActionByTag",lua_cocos2dx_ActionManager_removeActionByTag);
		tolua_function(tolua_S,"removeAllActions",lua_cocos2dx_ActionManager_removeAllActions);
		tolua_function(tolua_S,"addAction",lua_cocos2dx_ActionManager_addAction);
		tolua_function(tolua_S,"resumeTarget",lua_cocos2dx_ActionManager_resumeTarget);
		tolua_function(tolua_S,"getNumberOfRunningActionsInTarget",lua_cocos2dx_ActionManager_getNumberOfRunningActionsInTarget);
		tolua_function(tolua_S,"removeAllActionsFromTarget",lua_cocos2dx_ActionManager_removeAllActionsFromTarget);
		tolua_function(tolua_S,"resumeTargets",lua_cocos2dx_ActionManager_resumeTargets);
		tolua_function(tolua_S,"removeAction",lua_cocos2dx_ActionManager_removeAction);
		tolua_function(tolua_S,"pauseTarget",lua_cocos2dx_ActionManager_pauseTarget);
		tolua_function(tolua_S,"pauseAllRunningActions",lua_cocos2dx_ActionManager_pauseAllRunningActions);
		tolua_function(tolua_S,"new",lua_cocos2dx_ActionManager_constructor);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_ActionEase_startWithTarget(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ActionEase* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ActionEase",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ActionEase*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ActionEase_startWithTarget'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Node* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->startWithTarget(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ActionEase_startWithTarget'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ActionEase_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ActionEase* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ActionEase",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ActionEase*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ActionEase_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::ActionEase* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"ActionEase");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ActionEase_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ActionEase_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ActionEase* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ActionEase",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ActionEase*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ActionEase_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::ActionEase* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"ActionEase");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ActionEase_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ActionEase_stop(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ActionEase* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ActionEase",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ActionEase*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ActionEase_stop'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->stop();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ActionEase_stop'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ActionEase_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ActionEase* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ActionEase",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ActionEase*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ActionEase_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ActionEase_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ActionEase_initWithAction(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ActionEase* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ActionEase",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ActionEase*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ActionEase_initWithAction'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::ActionInterval* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"ActionInterval",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::ActionInterval*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		bool ret = cobj->initWithAction(arg0);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ActionEase_initWithAction'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ActionEase_getInnerAction(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ActionEase* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ActionEase",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ActionEase*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ActionEase_getInnerAction'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::ActionInterval* ret = cobj->getInnerAction();
		tolua_pushusertype(tolua_S,ret,"ActionInterval");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ActionEase_getInnerAction'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ActionEase_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (ActionEase)");
	return 0;
}

int lua_register_cocos2dx_ActionEase(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"ActionEase");
	tolua_cclass(tolua_S,"ActionEase","ActionEase","ActionInterval",NULL);

	tolua_beginmodule(tolua_S,"ActionEase");
		tolua_function(tolua_S,"startWithTarget",lua_cocos2dx_ActionEase_startWithTarget);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_ActionEase_reverse);
		tolua_function(tolua_S,"clone",lua_cocos2dx_ActionEase_clone);
		tolua_function(tolua_S,"stop",lua_cocos2dx_ActionEase_stop);
		tolua_function(tolua_S,"update",lua_cocos2dx_ActionEase_update);
		tolua_function(tolua_S,"initWithAction",lua_cocos2dx_ActionEase_initWithAction);
		tolua_function(tolua_S,"getInnerAction",lua_cocos2dx_ActionEase_getInnerAction);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_EaseRateAction_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseRateAction* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseRateAction",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseRateAction*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseRateAction_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::EaseRateAction* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"EaseRateAction");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseRateAction_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseRateAction_setRate(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseRateAction* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseRateAction",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseRateAction*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseRateAction_setRate'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setRate(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseRateAction_setRate'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseRateAction_initWithAction(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseRateAction* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseRateAction",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseRateAction*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseRateAction_initWithAction'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		cocos2d::ActionInterval* arg0;
		double arg1;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"ActionInterval",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::ActionInterval*)tolua_tousertype(tolua_S,2,0);
		};
		ok &= luaval_to_number(tolua_S, 3,&arg1);
		if(!ok)
			return 0;
		bool ret = cobj->initWithAction(arg0, arg1);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseRateAction_initWithAction'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseRateAction_getRate(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseRateAction* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseRateAction",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseRateAction*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseRateAction_getRate'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getRate();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseRateAction_getRate'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseRateAction_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseRateAction* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseRateAction",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseRateAction*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseRateAction_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::EaseRateAction* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"EaseRateAction");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseRateAction_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseRateAction_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (EaseRateAction)");
	return 0;
}

int lua_register_cocos2dx_EaseRateAction(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"EaseRateAction");
	tolua_cclass(tolua_S,"EaseRateAction","EaseRateAction","ActionEase",NULL);

	tolua_beginmodule(tolua_S,"EaseRateAction");
		tolua_function(tolua_S,"clone",lua_cocos2dx_EaseRateAction_clone);
		tolua_function(tolua_S,"setRate",lua_cocos2dx_EaseRateAction_setRate);
		tolua_function(tolua_S,"initWithAction",lua_cocos2dx_EaseRateAction_initWithAction);
		tolua_function(tolua_S,"getRate",lua_cocos2dx_EaseRateAction_getRate);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_EaseRateAction_reverse);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_EaseIn_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseIn* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseIn",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseIn*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseIn_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::EaseIn* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"EaseIn");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseIn_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseIn_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseIn* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseIn",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseIn*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseIn_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseIn_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseIn_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseIn* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseIn",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseIn*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseIn_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::EaseIn* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"EaseIn");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseIn_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseIn_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"EaseIn",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 2) {
		cocos2d::ActionInterval* arg0;
		double arg1;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"ActionInterval",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::ActionInterval*)tolua_tousertype(tolua_S,2,0);
		};
		ok &= luaval_to_number(tolua_S, 3,&arg1);
		if(!ok)
			return 0;
		cocos2d::EaseIn* ret = cocos2d::EaseIn::create(arg0, arg1);
		tolua_pushusertype(tolua_S,ret,"EaseIn");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseIn_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_EaseIn_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (EaseIn)");
	return 0;
}

int lua_register_cocos2dx_EaseIn(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"EaseIn");
	tolua_cclass(tolua_S,"EaseIn","EaseIn","EaseRateAction",NULL);

	tolua_beginmodule(tolua_S,"EaseIn");
		tolua_function(tolua_S,"clone",lua_cocos2dx_EaseIn_clone);
		tolua_function(tolua_S,"update",lua_cocos2dx_EaseIn_update);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_EaseIn_reverse);
		tolua_function(tolua_S,"create", lua_cocos2dx_EaseIn_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_EaseOut_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseOut* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseOut",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseOut*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseOut_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::EaseOut* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"EaseOut");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseOut_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseOut_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseOut* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseOut",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseOut*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseOut_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseOut_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseOut_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseOut* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseOut",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseOut*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseOut_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::EaseOut* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"EaseOut");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseOut_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseOut_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"EaseOut",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 2) {
		cocos2d::ActionInterval* arg0;
		double arg1;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"ActionInterval",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::ActionInterval*)tolua_tousertype(tolua_S,2,0);
		};
		ok &= luaval_to_number(tolua_S, 3,&arg1);
		if(!ok)
			return 0;
		cocos2d::EaseOut* ret = cocos2d::EaseOut::create(arg0, arg1);
		tolua_pushusertype(tolua_S,ret,"EaseOut");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseOut_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_EaseOut_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (EaseOut)");
	return 0;
}

int lua_register_cocos2dx_EaseOut(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"EaseOut");
	tolua_cclass(tolua_S,"EaseOut","EaseOut","EaseRateAction",NULL);

	tolua_beginmodule(tolua_S,"EaseOut");
		tolua_function(tolua_S,"clone",lua_cocos2dx_EaseOut_clone);
		tolua_function(tolua_S,"update",lua_cocos2dx_EaseOut_update);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_EaseOut_reverse);
		tolua_function(tolua_S,"create", lua_cocos2dx_EaseOut_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_EaseInOut_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseInOut* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseInOut",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseInOut*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseInOut_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::EaseInOut* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"EaseInOut");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseInOut_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseInOut_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseInOut* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseInOut",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseInOut*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseInOut_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseInOut_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseInOut_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseInOut* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseInOut",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseInOut*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseInOut_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::EaseInOut* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"EaseInOut");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseInOut_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseInOut_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"EaseInOut",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 2) {
		cocos2d::ActionInterval* arg0;
		double arg1;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"ActionInterval",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::ActionInterval*)tolua_tousertype(tolua_S,2,0);
		};
		ok &= luaval_to_number(tolua_S, 3,&arg1);
		if(!ok)
			return 0;
		cocos2d::EaseInOut* ret = cocos2d::EaseInOut::create(arg0, arg1);
		tolua_pushusertype(tolua_S,ret,"EaseInOut");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseInOut_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_EaseInOut_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (EaseInOut)");
	return 0;
}

int lua_register_cocos2dx_EaseInOut(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"EaseInOut");
	tolua_cclass(tolua_S,"EaseInOut","EaseInOut","EaseRateAction",NULL);

	tolua_beginmodule(tolua_S,"EaseInOut");
		tolua_function(tolua_S,"clone",lua_cocos2dx_EaseInOut_clone);
		tolua_function(tolua_S,"update",lua_cocos2dx_EaseInOut_update);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_EaseInOut_reverse);
		tolua_function(tolua_S,"create", lua_cocos2dx_EaseInOut_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_EaseExponentialIn_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseExponentialIn* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseExponentialIn",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseExponentialIn*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseExponentialIn_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::EaseExponentialIn* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"EaseExponentialIn");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseExponentialIn_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseExponentialIn_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseExponentialIn* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseExponentialIn",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseExponentialIn*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseExponentialIn_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseExponentialIn_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseExponentialIn_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseExponentialIn* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseExponentialIn",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseExponentialIn*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseExponentialIn_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::ActionEase* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"ActionEase");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseExponentialIn_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseExponentialIn_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"EaseExponentialIn",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 1) {
		cocos2d::ActionInterval* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"ActionInterval",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::ActionInterval*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cocos2d::EaseExponentialIn* ret = cocos2d::EaseExponentialIn::create(arg0);
		tolua_pushusertype(tolua_S,ret,"EaseExponentialIn");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseExponentialIn_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_EaseExponentialIn_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (EaseExponentialIn)");
	return 0;
}

int lua_register_cocos2dx_EaseExponentialIn(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"EaseExponentialIn");
	tolua_cclass(tolua_S,"EaseExponentialIn","EaseExponentialIn","ActionEase",NULL);

	tolua_beginmodule(tolua_S,"EaseExponentialIn");
		tolua_function(tolua_S,"clone",lua_cocos2dx_EaseExponentialIn_clone);
		tolua_function(tolua_S,"update",lua_cocos2dx_EaseExponentialIn_update);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_EaseExponentialIn_reverse);
		tolua_function(tolua_S,"create", lua_cocos2dx_EaseExponentialIn_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_EaseExponentialOut_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseExponentialOut* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseExponentialOut",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseExponentialOut*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseExponentialOut_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::EaseExponentialOut* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"EaseExponentialOut");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseExponentialOut_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseExponentialOut_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseExponentialOut* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseExponentialOut",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseExponentialOut*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseExponentialOut_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseExponentialOut_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseExponentialOut_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseExponentialOut* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseExponentialOut",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseExponentialOut*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseExponentialOut_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::ActionEase* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"ActionEase");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseExponentialOut_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseExponentialOut_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"EaseExponentialOut",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 1) {
		cocos2d::ActionInterval* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"ActionInterval",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::ActionInterval*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cocos2d::EaseExponentialOut* ret = cocos2d::EaseExponentialOut::create(arg0);
		tolua_pushusertype(tolua_S,ret,"EaseExponentialOut");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseExponentialOut_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_EaseExponentialOut_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (EaseExponentialOut)");
	return 0;
}

int lua_register_cocos2dx_EaseExponentialOut(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"EaseExponentialOut");
	tolua_cclass(tolua_S,"EaseExponentialOut","EaseExponentialOut","ActionEase",NULL);

	tolua_beginmodule(tolua_S,"EaseExponentialOut");
		tolua_function(tolua_S,"clone",lua_cocos2dx_EaseExponentialOut_clone);
		tolua_function(tolua_S,"update",lua_cocos2dx_EaseExponentialOut_update);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_EaseExponentialOut_reverse);
		tolua_function(tolua_S,"create", lua_cocos2dx_EaseExponentialOut_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_EaseExponentialInOut_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseExponentialInOut* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseExponentialInOut",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseExponentialInOut*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseExponentialInOut_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::EaseExponentialInOut* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"EaseExponentialInOut");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseExponentialInOut_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseExponentialInOut_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseExponentialInOut* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseExponentialInOut",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseExponentialInOut*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseExponentialInOut_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseExponentialInOut_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseExponentialInOut_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseExponentialInOut* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseExponentialInOut",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseExponentialInOut*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseExponentialInOut_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::EaseExponentialInOut* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"EaseExponentialInOut");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseExponentialInOut_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseExponentialInOut_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"EaseExponentialInOut",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 1) {
		cocos2d::ActionInterval* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"ActionInterval",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::ActionInterval*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cocos2d::EaseExponentialInOut* ret = cocos2d::EaseExponentialInOut::create(arg0);
		tolua_pushusertype(tolua_S,ret,"EaseExponentialInOut");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseExponentialInOut_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_EaseExponentialInOut_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (EaseExponentialInOut)");
	return 0;
}

int lua_register_cocos2dx_EaseExponentialInOut(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"EaseExponentialInOut");
	tolua_cclass(tolua_S,"EaseExponentialInOut","EaseExponentialInOut","ActionEase",NULL);

	tolua_beginmodule(tolua_S,"EaseExponentialInOut");
		tolua_function(tolua_S,"clone",lua_cocos2dx_EaseExponentialInOut_clone);
		tolua_function(tolua_S,"update",lua_cocos2dx_EaseExponentialInOut_update);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_EaseExponentialInOut_reverse);
		tolua_function(tolua_S,"create", lua_cocos2dx_EaseExponentialInOut_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_EaseSineIn_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseSineIn* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseSineIn",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseSineIn*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseSineIn_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::EaseSineIn* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"EaseSineIn");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseSineIn_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseSineIn_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseSineIn* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseSineIn",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseSineIn*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseSineIn_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseSineIn_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseSineIn_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseSineIn* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseSineIn",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseSineIn*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseSineIn_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::ActionEase* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"ActionEase");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseSineIn_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseSineIn_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"EaseSineIn",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 1) {
		cocos2d::ActionInterval* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"ActionInterval",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::ActionInterval*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cocos2d::EaseSineIn* ret = cocos2d::EaseSineIn::create(arg0);
		tolua_pushusertype(tolua_S,ret,"EaseSineIn");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseSineIn_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_EaseSineIn_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (EaseSineIn)");
	return 0;
}

int lua_register_cocos2dx_EaseSineIn(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"EaseSineIn");
	tolua_cclass(tolua_S,"EaseSineIn","EaseSineIn","ActionEase",NULL);

	tolua_beginmodule(tolua_S,"EaseSineIn");
		tolua_function(tolua_S,"clone",lua_cocos2dx_EaseSineIn_clone);
		tolua_function(tolua_S,"update",lua_cocos2dx_EaseSineIn_update);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_EaseSineIn_reverse);
		tolua_function(tolua_S,"create", lua_cocos2dx_EaseSineIn_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_EaseSineOut_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseSineOut* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseSineOut",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseSineOut*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseSineOut_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::EaseSineOut* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"EaseSineOut");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseSineOut_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseSineOut_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseSineOut* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseSineOut",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseSineOut*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseSineOut_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseSineOut_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseSineOut_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseSineOut* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseSineOut",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseSineOut*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseSineOut_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::ActionEase* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"ActionEase");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseSineOut_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseSineOut_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"EaseSineOut",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 1) {
		cocos2d::ActionInterval* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"ActionInterval",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::ActionInterval*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cocos2d::EaseSineOut* ret = cocos2d::EaseSineOut::create(arg0);
		tolua_pushusertype(tolua_S,ret,"EaseSineOut");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseSineOut_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_EaseSineOut_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (EaseSineOut)");
	return 0;
}

int lua_register_cocos2dx_EaseSineOut(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"EaseSineOut");
	tolua_cclass(tolua_S,"EaseSineOut","EaseSineOut","ActionEase",NULL);

	tolua_beginmodule(tolua_S,"EaseSineOut");
		tolua_function(tolua_S,"clone",lua_cocos2dx_EaseSineOut_clone);
		tolua_function(tolua_S,"update",lua_cocos2dx_EaseSineOut_update);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_EaseSineOut_reverse);
		tolua_function(tolua_S,"create", lua_cocos2dx_EaseSineOut_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_EaseSineInOut_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseSineInOut* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseSineInOut",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseSineInOut*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseSineInOut_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::EaseSineInOut* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"EaseSineInOut");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseSineInOut_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseSineInOut_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseSineInOut* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseSineInOut",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseSineInOut*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseSineInOut_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseSineInOut_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseSineInOut_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseSineInOut* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseSineInOut",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseSineInOut*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseSineInOut_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::EaseSineInOut* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"EaseSineInOut");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseSineInOut_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseSineInOut_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"EaseSineInOut",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 1) {
		cocos2d::ActionInterval* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"ActionInterval",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::ActionInterval*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cocos2d::EaseSineInOut* ret = cocos2d::EaseSineInOut::create(arg0);
		tolua_pushusertype(tolua_S,ret,"EaseSineInOut");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseSineInOut_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_EaseSineInOut_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (EaseSineInOut)");
	return 0;
}

int lua_register_cocos2dx_EaseSineInOut(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"EaseSineInOut");
	tolua_cclass(tolua_S,"EaseSineInOut","EaseSineInOut","ActionEase",NULL);

	tolua_beginmodule(tolua_S,"EaseSineInOut");
		tolua_function(tolua_S,"clone",lua_cocos2dx_EaseSineInOut_clone);
		tolua_function(tolua_S,"update",lua_cocos2dx_EaseSineInOut_update);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_EaseSineInOut_reverse);
		tolua_function(tolua_S,"create", lua_cocos2dx_EaseSineInOut_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_EaseElastic_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseElastic* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseElastic",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseElastic*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseElastic_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::EaseElastic* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"EaseElastic");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseElastic_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseElastic_initWithAction(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseElastic* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseElastic",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseElastic*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseElastic_initWithAction'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::ActionInterval* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"ActionInterval",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::ActionInterval*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		bool ret = cobj->initWithAction(arg0);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	if (argc == 2) {
		cocos2d::ActionInterval* arg0;
		double arg1;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"ActionInterval",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::ActionInterval*)tolua_tousertype(tolua_S,2,0);
		};
		ok &= luaval_to_number(tolua_S, 3,&arg1);
		if(!ok)
			return 0;
		bool ret = cobj->initWithAction(arg0, arg1);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseElastic_initWithAction'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseElastic_setPeriod(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseElastic* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseElastic",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseElastic*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseElastic_setPeriod'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setPeriod(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseElastic_setPeriod'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseElastic_getPeriod(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseElastic* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseElastic",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseElastic*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseElastic_getPeriod'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getPeriod();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseElastic_getPeriod'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseElastic_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseElastic* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseElastic",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseElastic*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseElastic_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::EaseElastic* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"EaseElastic");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseElastic_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseElastic_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (EaseElastic)");
	return 0;
}

int lua_register_cocos2dx_EaseElastic(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"EaseElastic");
	tolua_cclass(tolua_S,"EaseElastic","EaseElastic","ActionEase",NULL);

	tolua_beginmodule(tolua_S,"EaseElastic");
		tolua_function(tolua_S,"clone",lua_cocos2dx_EaseElastic_clone);
		tolua_function(tolua_S,"initWithAction",lua_cocos2dx_EaseElastic_initWithAction);
		tolua_function(tolua_S,"setPeriod",lua_cocos2dx_EaseElastic_setPeriod);
		tolua_function(tolua_S,"getPeriod",lua_cocos2dx_EaseElastic_getPeriod);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_EaseElastic_reverse);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_EaseElasticIn_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseElasticIn* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseElasticIn",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseElasticIn*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseElasticIn_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::EaseElasticIn* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"EaseElasticIn");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseElasticIn_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseElasticIn_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseElasticIn* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseElasticIn",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseElasticIn*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseElasticIn_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseElasticIn_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseElasticIn_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseElasticIn* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseElasticIn",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseElasticIn*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseElasticIn_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::EaseElastic* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"EaseElastic");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseElasticIn_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseElasticIn_create(lua_State* tolua_S)
{
	int argc = 0;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"EaseElasticIn",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S)-1;

	do {
		if (argc == 1) {
			cocos2d::ActionInterval* arg0;
			#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"ActionInterval",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::ActionInterval*)tolua_tousertype(tolua_S,2,0);
		};
			if (!ok) { ok = true; break; }
			cocos2d::EaseElasticIn* ret = cocos2d::EaseElasticIn::create(arg0);
			tolua_pushusertype(tolua_S,ret,"EaseElasticIn");
			return 1;
		}
	} while (0);
	do {
		if (argc == 2) {
			cocos2d::ActionInterval* arg0;
			#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"ActionInterval",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::ActionInterval*)tolua_tousertype(tolua_S,2,0);
		};
			if (!ok) { ok = true; break; }
			double arg1;
			ok &= luaval_to_number(tolua_S, 3,&arg1);
			if (!ok) { ok = true; break; }
			cocos2d::EaseElasticIn* ret = cocos2d::EaseElasticIn::create(arg0, arg1);
			tolua_pushusertype(tolua_S,ret,"EaseElasticIn");
			return 1;
		}
	} while (0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseElasticIn_create'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseElasticIn_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (EaseElasticIn)");
	return 0;
}

int lua_register_cocos2dx_EaseElasticIn(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"EaseElasticIn");
	tolua_cclass(tolua_S,"EaseElasticIn","EaseElasticIn","EaseElastic",NULL);

	tolua_beginmodule(tolua_S,"EaseElasticIn");
		tolua_function(tolua_S,"clone",lua_cocos2dx_EaseElasticIn_clone);
		tolua_function(tolua_S,"update",lua_cocos2dx_EaseElasticIn_update);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_EaseElasticIn_reverse);
		tolua_function(tolua_S,"create", lua_cocos2dx_EaseElasticIn_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_EaseElasticOut_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseElasticOut* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseElasticOut",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseElasticOut*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseElasticOut_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::EaseElasticOut* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"EaseElasticOut");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseElasticOut_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseElasticOut_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseElasticOut* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseElasticOut",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseElasticOut*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseElasticOut_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseElasticOut_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseElasticOut_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseElasticOut* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseElasticOut",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseElasticOut*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseElasticOut_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::EaseElastic* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"EaseElastic");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseElasticOut_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseElasticOut_create(lua_State* tolua_S)
{
	int argc = 0;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"EaseElasticOut",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S)-1;

	do {
		if (argc == 1) {
			cocos2d::ActionInterval* arg0;
			#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"ActionInterval",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::ActionInterval*)tolua_tousertype(tolua_S,2,0);
		};
			if (!ok) { ok = true; break; }
			cocos2d::EaseElasticOut* ret = cocos2d::EaseElasticOut::create(arg0);
			tolua_pushusertype(tolua_S,ret,"EaseElasticOut");
			return 1;
		}
	} while (0);
	do {
		if (argc == 2) {
			cocos2d::ActionInterval* arg0;
			#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"ActionInterval",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::ActionInterval*)tolua_tousertype(tolua_S,2,0);
		};
			if (!ok) { ok = true; break; }
			double arg1;
			ok &= luaval_to_number(tolua_S, 3,&arg1);
			if (!ok) { ok = true; break; }
			cocos2d::EaseElasticOut* ret = cocos2d::EaseElasticOut::create(arg0, arg1);
			tolua_pushusertype(tolua_S,ret,"EaseElasticOut");
			return 1;
		}
	} while (0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseElasticOut_create'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseElasticOut_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (EaseElasticOut)");
	return 0;
}

int lua_register_cocos2dx_EaseElasticOut(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"EaseElasticOut");
	tolua_cclass(tolua_S,"EaseElasticOut","EaseElasticOut","EaseElastic",NULL);

	tolua_beginmodule(tolua_S,"EaseElasticOut");
		tolua_function(tolua_S,"clone",lua_cocos2dx_EaseElasticOut_clone);
		tolua_function(tolua_S,"update",lua_cocos2dx_EaseElasticOut_update);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_EaseElasticOut_reverse);
		tolua_function(tolua_S,"create", lua_cocos2dx_EaseElasticOut_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_EaseElasticInOut_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseElasticInOut* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseElasticInOut",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseElasticInOut*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseElasticInOut_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::EaseElasticInOut* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"EaseElasticInOut");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseElasticInOut_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseElasticInOut_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseElasticInOut* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseElasticInOut",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseElasticInOut*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseElasticInOut_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseElasticInOut_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseElasticInOut_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseElasticInOut* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseElasticInOut",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseElasticInOut*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseElasticInOut_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::EaseElasticInOut* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"EaseElasticInOut");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseElasticInOut_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseElasticInOut_create(lua_State* tolua_S)
{
	int argc = 0;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"EaseElasticInOut",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S)-1;

	do {
		if (argc == 1) {
			cocos2d::ActionInterval* arg0;
			#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"ActionInterval",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::ActionInterval*)tolua_tousertype(tolua_S,2,0);
		};
			if (!ok) { ok = true; break; }
			cocos2d::EaseElasticInOut* ret = cocos2d::EaseElasticInOut::create(arg0);
			tolua_pushusertype(tolua_S,ret,"EaseElasticInOut");
			return 1;
		}
	} while (0);
	do {
		if (argc == 2) {
			cocos2d::ActionInterval* arg0;
			#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"ActionInterval",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::ActionInterval*)tolua_tousertype(tolua_S,2,0);
		};
			if (!ok) { ok = true; break; }
			double arg1;
			ok &= luaval_to_number(tolua_S, 3,&arg1);
			if (!ok) { ok = true; break; }
			cocos2d::EaseElasticInOut* ret = cocos2d::EaseElasticInOut::create(arg0, arg1);
			tolua_pushusertype(tolua_S,ret,"EaseElasticInOut");
			return 1;
		}
	} while (0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseElasticInOut_create'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseElasticInOut_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (EaseElasticInOut)");
	return 0;
}

int lua_register_cocos2dx_EaseElasticInOut(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"EaseElasticInOut");
	tolua_cclass(tolua_S,"EaseElasticInOut","EaseElasticInOut","EaseElastic",NULL);

	tolua_beginmodule(tolua_S,"EaseElasticInOut");
		tolua_function(tolua_S,"clone",lua_cocos2dx_EaseElasticInOut_clone);
		tolua_function(tolua_S,"update",lua_cocos2dx_EaseElasticInOut_update);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_EaseElasticInOut_reverse);
		tolua_function(tolua_S,"create", lua_cocos2dx_EaseElasticInOut_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_EaseBounce_bounceTime(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseBounce* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseBounce",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseBounce*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseBounce_bounceTime'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		float ret = cobj->bounceTime(arg0);
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseBounce_bounceTime'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseBounce_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseBounce* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseBounce",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseBounce*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseBounce_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::EaseBounce* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"EaseBounce");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseBounce_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseBounce_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseBounce* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseBounce",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseBounce*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseBounce_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::EaseBounce* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"EaseBounce");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseBounce_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseBounce_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (EaseBounce)");
	return 0;
}

int lua_register_cocos2dx_EaseBounce(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"EaseBounce");
	tolua_cclass(tolua_S,"EaseBounce","EaseBounce","ActionEase",NULL);

	tolua_beginmodule(tolua_S,"EaseBounce");
		tolua_function(tolua_S,"bounceTime",lua_cocos2dx_EaseBounce_bounceTime);
		tolua_function(tolua_S,"clone",lua_cocos2dx_EaseBounce_clone);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_EaseBounce_reverse);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_EaseBounceIn_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseBounceIn* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseBounceIn",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseBounceIn*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseBounceIn_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::EaseBounceIn* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"EaseBounceIn");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseBounceIn_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseBounceIn_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseBounceIn* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseBounceIn",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseBounceIn*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseBounceIn_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseBounceIn_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseBounceIn_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseBounceIn* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseBounceIn",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseBounceIn*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseBounceIn_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::EaseBounce* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"EaseBounce");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseBounceIn_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseBounceIn_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"EaseBounceIn",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 1) {
		cocos2d::ActionInterval* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"ActionInterval",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::ActionInterval*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cocos2d::EaseBounceIn* ret = cocos2d::EaseBounceIn::create(arg0);
		tolua_pushusertype(tolua_S,ret,"EaseBounceIn");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseBounceIn_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_EaseBounceIn_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (EaseBounceIn)");
	return 0;
}

int lua_register_cocos2dx_EaseBounceIn(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"EaseBounceIn");
	tolua_cclass(tolua_S,"EaseBounceIn","EaseBounceIn","EaseBounce",NULL);

	tolua_beginmodule(tolua_S,"EaseBounceIn");
		tolua_function(tolua_S,"clone",lua_cocos2dx_EaseBounceIn_clone);
		tolua_function(tolua_S,"update",lua_cocos2dx_EaseBounceIn_update);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_EaseBounceIn_reverse);
		tolua_function(tolua_S,"create", lua_cocos2dx_EaseBounceIn_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_EaseBounceOut_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseBounceOut* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseBounceOut",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseBounceOut*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseBounceOut_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::EaseBounceOut* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"EaseBounceOut");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseBounceOut_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseBounceOut_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseBounceOut* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseBounceOut",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseBounceOut*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseBounceOut_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseBounceOut_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseBounceOut_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseBounceOut* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseBounceOut",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseBounceOut*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseBounceOut_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::EaseBounce* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"EaseBounce");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseBounceOut_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseBounceOut_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"EaseBounceOut",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 1) {
		cocos2d::ActionInterval* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"ActionInterval",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::ActionInterval*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cocos2d::EaseBounceOut* ret = cocos2d::EaseBounceOut::create(arg0);
		tolua_pushusertype(tolua_S,ret,"EaseBounceOut");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseBounceOut_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_EaseBounceOut_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (EaseBounceOut)");
	return 0;
}

int lua_register_cocos2dx_EaseBounceOut(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"EaseBounceOut");
	tolua_cclass(tolua_S,"EaseBounceOut","EaseBounceOut","EaseBounce",NULL);

	tolua_beginmodule(tolua_S,"EaseBounceOut");
		tolua_function(tolua_S,"clone",lua_cocos2dx_EaseBounceOut_clone);
		tolua_function(tolua_S,"update",lua_cocos2dx_EaseBounceOut_update);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_EaseBounceOut_reverse);
		tolua_function(tolua_S,"create", lua_cocos2dx_EaseBounceOut_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_EaseBounceInOut_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseBounceInOut* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseBounceInOut",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseBounceInOut*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseBounceInOut_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::EaseBounceInOut* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"EaseBounceInOut");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseBounceInOut_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseBounceInOut_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseBounceInOut* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseBounceInOut",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseBounceInOut*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseBounceInOut_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseBounceInOut_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseBounceInOut_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseBounceInOut* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseBounceInOut",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseBounceInOut*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseBounceInOut_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::EaseBounceInOut* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"EaseBounceInOut");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseBounceInOut_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseBounceInOut_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"EaseBounceInOut",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 1) {
		cocos2d::ActionInterval* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"ActionInterval",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::ActionInterval*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cocos2d::EaseBounceInOut* ret = cocos2d::EaseBounceInOut::create(arg0);
		tolua_pushusertype(tolua_S,ret,"EaseBounceInOut");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseBounceInOut_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_EaseBounceInOut_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (EaseBounceInOut)");
	return 0;
}

int lua_register_cocos2dx_EaseBounceInOut(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"EaseBounceInOut");
	tolua_cclass(tolua_S,"EaseBounceInOut","EaseBounceInOut","EaseBounce",NULL);

	tolua_beginmodule(tolua_S,"EaseBounceInOut");
		tolua_function(tolua_S,"clone",lua_cocos2dx_EaseBounceInOut_clone);
		tolua_function(tolua_S,"update",lua_cocos2dx_EaseBounceInOut_update);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_EaseBounceInOut_reverse);
		tolua_function(tolua_S,"create", lua_cocos2dx_EaseBounceInOut_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_EaseBackIn_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseBackIn* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseBackIn",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseBackIn*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseBackIn_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::EaseBackIn* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"EaseBackIn");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseBackIn_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseBackIn_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseBackIn* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseBackIn",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseBackIn*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseBackIn_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseBackIn_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseBackIn_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseBackIn* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseBackIn",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseBackIn*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseBackIn_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::ActionEase* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"ActionEase");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseBackIn_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseBackIn_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"EaseBackIn",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 1) {
		cocos2d::ActionInterval* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"ActionInterval",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::ActionInterval*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cocos2d::EaseBackIn* ret = cocos2d::EaseBackIn::create(arg0);
		tolua_pushusertype(tolua_S,ret,"EaseBackIn");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseBackIn_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_EaseBackIn_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (EaseBackIn)");
	return 0;
}

int lua_register_cocos2dx_EaseBackIn(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"EaseBackIn");
	tolua_cclass(tolua_S,"EaseBackIn","EaseBackIn","ActionEase",NULL);

	tolua_beginmodule(tolua_S,"EaseBackIn");
		tolua_function(tolua_S,"clone",lua_cocos2dx_EaseBackIn_clone);
		tolua_function(tolua_S,"update",lua_cocos2dx_EaseBackIn_update);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_EaseBackIn_reverse);
		tolua_function(tolua_S,"create", lua_cocos2dx_EaseBackIn_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_EaseBackOut_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseBackOut* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseBackOut",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseBackOut*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseBackOut_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::EaseBackOut* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"EaseBackOut");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseBackOut_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseBackOut_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseBackOut* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseBackOut",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseBackOut*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseBackOut_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseBackOut_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseBackOut_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseBackOut* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseBackOut",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseBackOut*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseBackOut_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::ActionEase* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"ActionEase");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseBackOut_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseBackOut_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"EaseBackOut",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 1) {
		cocos2d::ActionInterval* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"ActionInterval",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::ActionInterval*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cocos2d::EaseBackOut* ret = cocos2d::EaseBackOut::create(arg0);
		tolua_pushusertype(tolua_S,ret,"EaseBackOut");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseBackOut_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_EaseBackOut_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (EaseBackOut)");
	return 0;
}

int lua_register_cocos2dx_EaseBackOut(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"EaseBackOut");
	tolua_cclass(tolua_S,"EaseBackOut","EaseBackOut","ActionEase",NULL);

	tolua_beginmodule(tolua_S,"EaseBackOut");
		tolua_function(tolua_S,"clone",lua_cocos2dx_EaseBackOut_clone);
		tolua_function(tolua_S,"update",lua_cocos2dx_EaseBackOut_update);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_EaseBackOut_reverse);
		tolua_function(tolua_S,"create", lua_cocos2dx_EaseBackOut_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_EaseBackInOut_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseBackInOut* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseBackInOut",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseBackInOut*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseBackInOut_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::EaseBackInOut* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"EaseBackInOut");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseBackInOut_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseBackInOut_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseBackInOut* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseBackInOut",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseBackInOut*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseBackInOut_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseBackInOut_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseBackInOut_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::EaseBackInOut* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"EaseBackInOut",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::EaseBackInOut*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_EaseBackInOut_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::EaseBackInOut* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"EaseBackInOut");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseBackInOut_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_EaseBackInOut_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"EaseBackInOut",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 1) {
		cocos2d::ActionInterval* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"ActionInterval",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::ActionInterval*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cocos2d::EaseBackInOut* ret = cocos2d::EaseBackInOut::create(arg0);
		tolua_pushusertype(tolua_S,ret,"EaseBackInOut");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_EaseBackInOut_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_EaseBackInOut_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (EaseBackInOut)");
	return 0;
}

int lua_register_cocos2dx_EaseBackInOut(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"EaseBackInOut");
	tolua_cclass(tolua_S,"EaseBackInOut","EaseBackInOut","ActionEase",NULL);

	tolua_beginmodule(tolua_S,"EaseBackInOut");
		tolua_function(tolua_S,"clone",lua_cocos2dx_EaseBackInOut_clone);
		tolua_function(tolua_S,"update",lua_cocos2dx_EaseBackInOut_update);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_EaseBackInOut_reverse);
		tolua_function(tolua_S,"create", lua_cocos2dx_EaseBackInOut_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_ActionInstant_step(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ActionInstant* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ActionInstant",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ActionInstant*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ActionInstant_step'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->step(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ActionInstant_step'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ActionInstant_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ActionInstant* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ActionInstant",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ActionInstant*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ActionInstant_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::ActionInstant* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"ActionInstant");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ActionInstant_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ActionInstant_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ActionInstant* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ActionInstant",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ActionInstant*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ActionInstant_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::ActionInstant* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"ActionInstant");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ActionInstant_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ActionInstant_isDone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ActionInstant* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ActionInstant",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ActionInstant*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ActionInstant_isDone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->isDone();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ActionInstant_isDone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ActionInstant_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ActionInstant* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ActionInstant",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ActionInstant*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ActionInstant_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ActionInstant_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ActionInstant_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (ActionInstant)");
	return 0;
}

int lua_register_cocos2dx_ActionInstant(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"ActionInstant");
	tolua_cclass(tolua_S,"ActionInstant","ActionInstant","FiniteTimeAction",NULL);

	tolua_beginmodule(tolua_S,"ActionInstant");
		tolua_function(tolua_S,"step",lua_cocos2dx_ActionInstant_step);
		tolua_function(tolua_S,"clone",lua_cocos2dx_ActionInstant_clone);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_ActionInstant_reverse);
		tolua_function(tolua_S,"isDone",lua_cocos2dx_ActionInstant_isDone);
		tolua_function(tolua_S,"update",lua_cocos2dx_ActionInstant_update);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_Show_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Show* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Show",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Show*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Show_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Show* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"Show");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Show_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Show_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Show* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Show",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Show*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Show_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::ActionInstant* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"ActionInstant");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Show_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Show_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Show* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Show",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Show*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Show_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Show_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Show_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"Show",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 0) {
		if(!ok)
			return 0;
		cocos2d::Show* ret = cocos2d::Show::create();
		tolua_pushusertype(tolua_S,ret,"Show");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Show_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_Show_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Show* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::Show();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"Show");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Show_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_Show_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (Show)");
	return 0;
}

int lua_register_cocos2dx_Show(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"Show");
	tolua_cclass(tolua_S,"Show","Show","ActionInstant",NULL);

	tolua_beginmodule(tolua_S,"Show");
		tolua_function(tolua_S,"clone",lua_cocos2dx_Show_clone);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_Show_reverse);
		tolua_function(tolua_S,"update",lua_cocos2dx_Show_update);
		tolua_function(tolua_S,"new",lua_cocos2dx_Show_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_Show_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_Hide_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Hide* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Hide",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Hide*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Hide_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Hide* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"Hide");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Hide_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Hide_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Hide* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Hide",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Hide*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Hide_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::ActionInstant* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"ActionInstant");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Hide_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Hide_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Hide* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Hide",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Hide*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Hide_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Hide_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Hide_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"Hide",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 0) {
		if(!ok)
			return 0;
		cocos2d::Hide* ret = cocos2d::Hide::create();
		tolua_pushusertype(tolua_S,ret,"Hide");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Hide_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_Hide_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Hide* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::Hide();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"Hide");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Hide_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_Hide_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (Hide)");
	return 0;
}

int lua_register_cocos2dx_Hide(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"Hide");
	tolua_cclass(tolua_S,"Hide","Hide","ActionInstant",NULL);

	tolua_beginmodule(tolua_S,"Hide");
		tolua_function(tolua_S,"clone",lua_cocos2dx_Hide_clone);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_Hide_reverse);
		tolua_function(tolua_S,"update",lua_cocos2dx_Hide_update);
		tolua_function(tolua_S,"new",lua_cocos2dx_Hide_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_Hide_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_ToggleVisibility_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ToggleVisibility* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ToggleVisibility",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ToggleVisibility*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ToggleVisibility_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::ToggleVisibility* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"ToggleVisibility");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ToggleVisibility_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ToggleVisibility_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ToggleVisibility* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ToggleVisibility",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ToggleVisibility*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ToggleVisibility_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::ToggleVisibility* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"ToggleVisibility");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ToggleVisibility_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ToggleVisibility_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ToggleVisibility* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ToggleVisibility",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ToggleVisibility*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ToggleVisibility_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ToggleVisibility_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ToggleVisibility_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"ToggleVisibility",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 0) {
		if(!ok)
			return 0;
		cocos2d::ToggleVisibility* ret = cocos2d::ToggleVisibility::create();
		tolua_pushusertype(tolua_S,ret,"ToggleVisibility");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ToggleVisibility_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_ToggleVisibility_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ToggleVisibility* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::ToggleVisibility();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"ToggleVisibility");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ToggleVisibility_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_ToggleVisibility_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (ToggleVisibility)");
	return 0;
}

int lua_register_cocos2dx_ToggleVisibility(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"ToggleVisibility");
	tolua_cclass(tolua_S,"ToggleVisibility","ToggleVisibility","ActionInstant",NULL);

	tolua_beginmodule(tolua_S,"ToggleVisibility");
		tolua_function(tolua_S,"clone",lua_cocos2dx_ToggleVisibility_clone);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_ToggleVisibility_reverse);
		tolua_function(tolua_S,"update",lua_cocos2dx_ToggleVisibility_update);
		tolua_function(tolua_S,"new",lua_cocos2dx_ToggleVisibility_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_ToggleVisibility_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_RemoveSelf_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::RemoveSelf* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"RemoveSelf",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::RemoveSelf*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_RemoveSelf_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::RemoveSelf* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"RemoveSelf");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_RemoveSelf_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_RemoveSelf_init(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::RemoveSelf* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"RemoveSelf",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::RemoveSelf*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_RemoveSelf_init'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		bool ret = cobj->init(arg0);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_RemoveSelf_init'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_RemoveSelf_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::RemoveSelf* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"RemoveSelf",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::RemoveSelf*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_RemoveSelf_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::RemoveSelf* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"RemoveSelf");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_RemoveSelf_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_RemoveSelf_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::RemoveSelf* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"RemoveSelf",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::RemoveSelf*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_RemoveSelf_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_RemoveSelf_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_RemoveSelf_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"RemoveSelf",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 0) {
		if(!ok)
			return 0;
		cocos2d::RemoveSelf* ret = cocos2d::RemoveSelf::create();
		tolua_pushusertype(tolua_S,ret,"RemoveSelf");
	    return 1;
	}
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cocos2d::RemoveSelf* ret = cocos2d::RemoveSelf::create(arg0);
		tolua_pushusertype(tolua_S,ret,"RemoveSelf");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_RemoveSelf_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_RemoveSelf_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::RemoveSelf* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::RemoveSelf();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"RemoveSelf");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_RemoveSelf_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_RemoveSelf_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (RemoveSelf)");
	return 0;
}

int lua_register_cocos2dx_RemoveSelf(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"RemoveSelf");
	tolua_cclass(tolua_S,"RemoveSelf","RemoveSelf","ActionInstant",NULL);

	tolua_beginmodule(tolua_S,"RemoveSelf");
		tolua_function(tolua_S,"clone",lua_cocos2dx_RemoveSelf_clone);
		tolua_function(tolua_S,"init",lua_cocos2dx_RemoveSelf_init);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_RemoveSelf_reverse);
		tolua_function(tolua_S,"update",lua_cocos2dx_RemoveSelf_update);
		tolua_function(tolua_S,"new",lua_cocos2dx_RemoveSelf_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_RemoveSelf_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_FlipX_initWithFlipX(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::FlipX* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"FlipX",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::FlipX*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_FlipX_initWithFlipX'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		bool ret = cobj->initWithFlipX(arg0);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FlipX_initWithFlipX'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_FlipX_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::FlipX* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"FlipX",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::FlipX*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_FlipX_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::FlipX* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"FlipX");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FlipX_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_FlipX_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::FlipX* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"FlipX",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::FlipX*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_FlipX_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::FlipX* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"FlipX");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FlipX_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_FlipX_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::FlipX* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"FlipX",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::FlipX*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_FlipX_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FlipX_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_FlipX_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"FlipX",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cocos2d::FlipX* ret = cocos2d::FlipX::create(arg0);
		tolua_pushusertype(tolua_S,ret,"FlipX");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FlipX_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_FlipX_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::FlipX* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::FlipX();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"FlipX");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FlipX_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_FlipX_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (FlipX)");
	return 0;
}

int lua_register_cocos2dx_FlipX(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"FlipX");
	tolua_cclass(tolua_S,"FlipX","FlipX","ActionInstant",NULL);

	tolua_beginmodule(tolua_S,"FlipX");
		tolua_function(tolua_S,"initWithFlipX",lua_cocos2dx_FlipX_initWithFlipX);
		tolua_function(tolua_S,"clone",lua_cocos2dx_FlipX_clone);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_FlipX_reverse);
		tolua_function(tolua_S,"update",lua_cocos2dx_FlipX_update);
		tolua_function(tolua_S,"new",lua_cocos2dx_FlipX_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_FlipX_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_FlipY_initWithFlipY(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::FlipY* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"FlipY",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::FlipY*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_FlipY_initWithFlipY'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		bool ret = cobj->initWithFlipY(arg0);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FlipY_initWithFlipY'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_FlipY_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::FlipY* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"FlipY",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::FlipY*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_FlipY_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::FlipY* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"FlipY");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FlipY_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_FlipY_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::FlipY* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"FlipY",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::FlipY*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_FlipY_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::FlipY* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"FlipY");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FlipY_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_FlipY_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::FlipY* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"FlipY",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::FlipY*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_FlipY_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FlipY_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_FlipY_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"FlipY",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cocos2d::FlipY* ret = cocos2d::FlipY::create(arg0);
		tolua_pushusertype(tolua_S,ret,"FlipY");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FlipY_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_FlipY_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::FlipY* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::FlipY();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"FlipY");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FlipY_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_FlipY_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (FlipY)");
	return 0;
}

int lua_register_cocos2dx_FlipY(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"FlipY");
	tolua_cclass(tolua_S,"FlipY","FlipY","ActionInstant",NULL);

	tolua_beginmodule(tolua_S,"FlipY");
		tolua_function(tolua_S,"initWithFlipY",lua_cocos2dx_FlipY_initWithFlipY);
		tolua_function(tolua_S,"clone",lua_cocos2dx_FlipY_clone);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_FlipY_reverse);
		tolua_function(tolua_S,"update",lua_cocos2dx_FlipY_update);
		tolua_function(tolua_S,"new",lua_cocos2dx_FlipY_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_FlipY_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_Place_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Place* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Place",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Place*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Place_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Place* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"Place");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Place_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Place_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Place* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Place",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Place*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Place_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Place* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"Place");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Place_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Place_initWithPosition(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Place* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Place",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Place*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Place_initWithPosition'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Point arg0;
		ok &= luaval_to_point(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		bool ret = cobj->initWithPosition(arg0);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Place_initWithPosition'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Place_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Place* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Place",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Place*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Place_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Place_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Place_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"Place",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 1) {
		cocos2d::Point arg0;
		ok &= luaval_to_point(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cocos2d::Place* ret = cocos2d::Place::create(arg0);
		tolua_pushusertype(tolua_S,ret,"Place");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Place_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_Place_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Place* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::Place();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"Place");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Place_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_Place_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (Place)");
	return 0;
}

int lua_register_cocos2dx_Place(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"Place");
	tolua_cclass(tolua_S,"Place","Place","ActionInstant",NULL);

	tolua_beginmodule(tolua_S,"Place");
		tolua_function(tolua_S,"reverse",lua_cocos2dx_Place_reverse);
		tolua_function(tolua_S,"clone",lua_cocos2dx_Place_clone);
		tolua_function(tolua_S,"initWithPosition",lua_cocos2dx_Place_initWithPosition);
		tolua_function(tolua_S,"update",lua_cocos2dx_Place_update);
		tolua_function(tolua_S,"new",lua_cocos2dx_Place_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_Place_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_CallFunc_execute(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::CallFunc* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"CallFunc",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::CallFunc*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_CallFunc_execute'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->execute();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_CallFunc_execute'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_CallFunc_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::CallFunc* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"CallFunc",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::CallFunc*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_CallFunc_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::CallFunc* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"CallFunc");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_CallFunc_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_CallFunc_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::CallFunc* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"CallFunc",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::CallFunc*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_CallFunc_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::CallFunc* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"CallFunc");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_CallFunc_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_CallFunc_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::CallFunc* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"CallFunc",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::CallFunc*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_CallFunc_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_CallFunc_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_CallFunc_getTargetCallback(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::CallFunc* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"CallFunc",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::CallFunc*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_CallFunc_getTargetCallback'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Object* ret = cobj->getTargetCallback();
		tolua_pushusertype(tolua_S,ret,"Object");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_CallFunc_getTargetCallback'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_CallFunc_setTargetCallback(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::CallFunc* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"CallFunc",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::CallFunc*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_CallFunc_setTargetCallback'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Object* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Object",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Object*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->setTargetCallback(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_CallFunc_setTargetCallback'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_CallFunc_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::CallFunc* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::CallFunc();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"CallFunc");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_CallFunc_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_CallFunc_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (CallFunc)");
	return 0;
}

int lua_register_cocos2dx_CallFunc(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"CallFunc");
	tolua_cclass(tolua_S,"CallFunc","CallFunc","ActionInstant",NULL);

	tolua_beginmodule(tolua_S,"CallFunc");
		tolua_function(tolua_S,"execute",lua_cocos2dx_CallFunc_execute);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_CallFunc_reverse);
		tolua_function(tolua_S,"clone",lua_cocos2dx_CallFunc_clone);
		tolua_function(tolua_S,"update",lua_cocos2dx_CallFunc_update);
		tolua_function(tolua_S,"getTargetCallback",lua_cocos2dx_CallFunc_getTargetCallback);
		tolua_function(tolua_S,"setTargetCallback",lua_cocos2dx_CallFunc_setTargetCallback);
		tolua_function(tolua_S,"new",lua_cocos2dx_CallFunc_constructor);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_GridAction_startWithTarget(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::GridAction* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"GridAction",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::GridAction*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_GridAction_startWithTarget'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Node* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->startWithTarget(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_GridAction_startWithTarget'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_GridAction_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::GridAction* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"GridAction",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::GridAction*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_GridAction_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::GridAction* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"GridAction");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_GridAction_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_GridAction_getGrid(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::GridAction* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"GridAction",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::GridAction*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_GridAction_getGrid'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::GridBase* ret = cobj->getGrid();
		tolua_pushusertype(tolua_S,ret,"GridBase");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_GridAction_getGrid'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_GridAction_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::GridAction* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"GridAction",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::GridAction*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_GridAction_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::GridAction* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"GridAction");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_GridAction_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_GridAction_initWithDuration(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::GridAction* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"GridAction",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::GridAction*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_GridAction_initWithDuration'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		double arg0;
		cocos2d::Size arg1;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_size(tolua_S, 3, &arg1);
		if(!ok)
			return 0;
		bool ret = cobj->initWithDuration(arg0, arg1);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_GridAction_initWithDuration'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_GridAction_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (GridAction)");
	return 0;
}

int lua_register_cocos2dx_GridAction(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"GridAction");
	tolua_cclass(tolua_S,"GridAction","GridAction","ActionInterval",NULL);

	tolua_beginmodule(tolua_S,"GridAction");
		tolua_function(tolua_S,"startWithTarget",lua_cocos2dx_GridAction_startWithTarget);
		tolua_function(tolua_S,"clone",lua_cocos2dx_GridAction_clone);
		tolua_function(tolua_S,"getGrid",lua_cocos2dx_GridAction_getGrid);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_GridAction_reverse);
		tolua_function(tolua_S,"initWithDuration",lua_cocos2dx_GridAction_initWithDuration);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_Grid3DAction_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Grid3DAction* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Grid3DAction",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Grid3DAction*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Grid3DAction_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Grid3DAction* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"Grid3DAction");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Grid3DAction_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Grid3DAction_getGrid(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Grid3DAction* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Grid3DAction",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Grid3DAction*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Grid3DAction_getGrid'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::GridBase* ret = cobj->getGrid();
		tolua_pushusertype(tolua_S,ret,"GridBase");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Grid3DAction_getGrid'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Grid3DAction_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (Grid3DAction)");
	return 0;
}

int lua_register_cocos2dx_Grid3DAction(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"Grid3DAction");
	tolua_cclass(tolua_S,"Grid3DAction","Grid3DAction","GridAction",NULL);

	tolua_beginmodule(tolua_S,"Grid3DAction");
		tolua_function(tolua_S,"clone",lua_cocos2dx_Grid3DAction_clone);
		tolua_function(tolua_S,"getGrid",lua_cocos2dx_Grid3DAction_getGrid);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_TiledGrid3DAction_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TiledGrid3DAction* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TiledGrid3DAction",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TiledGrid3DAction*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TiledGrid3DAction_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::TiledGrid3DAction* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"TiledGrid3DAction");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TiledGrid3DAction_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TiledGrid3DAction_getGrid(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TiledGrid3DAction* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TiledGrid3DAction",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TiledGrid3DAction*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TiledGrid3DAction_getGrid'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::GridBase* ret = cobj->getGrid();
		tolua_pushusertype(tolua_S,ret,"GridBase");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TiledGrid3DAction_getGrid'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TiledGrid3DAction_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (TiledGrid3DAction)");
	return 0;
}

int lua_register_cocos2dx_TiledGrid3DAction(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"TiledGrid3DAction");
	tolua_cclass(tolua_S,"TiledGrid3DAction","TiledGrid3DAction","GridAction",NULL);

	tolua_beginmodule(tolua_S,"TiledGrid3DAction");
		tolua_function(tolua_S,"clone",lua_cocos2dx_TiledGrid3DAction_clone);
		tolua_function(tolua_S,"getGrid",lua_cocos2dx_TiledGrid3DAction_getGrid);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_StopGrid_startWithTarget(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::StopGrid* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"StopGrid",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::StopGrid*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_StopGrid_startWithTarget'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Node* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->startWithTarget(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_StopGrid_startWithTarget'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_StopGrid_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::StopGrid* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"StopGrid",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::StopGrid*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_StopGrid_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::StopGrid* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"StopGrid");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_StopGrid_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_StopGrid_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::StopGrid* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"StopGrid",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::StopGrid*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_StopGrid_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::StopGrid* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"StopGrid");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_StopGrid_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_StopGrid_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"StopGrid",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 0) {
		if(!ok)
			return 0;
		cocos2d::StopGrid* ret = cocos2d::StopGrid::create();
		tolua_pushusertype(tolua_S,ret,"StopGrid");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_StopGrid_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_StopGrid_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (StopGrid)");
	return 0;
}

int lua_register_cocos2dx_StopGrid(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"StopGrid");
	tolua_cclass(tolua_S,"StopGrid","StopGrid","ActionInstant",NULL);

	tolua_beginmodule(tolua_S,"StopGrid");
		tolua_function(tolua_S,"startWithTarget",lua_cocos2dx_StopGrid_startWithTarget);
		tolua_function(tolua_S,"clone",lua_cocos2dx_StopGrid_clone);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_StopGrid_reverse);
		tolua_function(tolua_S,"create", lua_cocos2dx_StopGrid_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_ReuseGrid_startWithTarget(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ReuseGrid* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ReuseGrid",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ReuseGrid*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ReuseGrid_startWithTarget'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Node* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->startWithTarget(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ReuseGrid_startWithTarget'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ReuseGrid_initWithTimes(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ReuseGrid* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ReuseGrid",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ReuseGrid*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ReuseGrid_initWithTimes'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		int arg0;
		ok &= luaval_to_int32(tolua_S, 2,(int*)&arg0);
		if(!ok)
			return 0;
		bool ret = cobj->initWithTimes(arg0);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ReuseGrid_initWithTimes'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ReuseGrid_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ReuseGrid* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ReuseGrid",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ReuseGrid*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ReuseGrid_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::ReuseGrid* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"ReuseGrid");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ReuseGrid_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ReuseGrid_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ReuseGrid* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ReuseGrid",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ReuseGrid*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ReuseGrid_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::ReuseGrid* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"ReuseGrid");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ReuseGrid_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ReuseGrid_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"ReuseGrid",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 1) {
		int arg0;
		ok &= luaval_to_int32(tolua_S, 2,(int*)&arg0);
		if(!ok)
			return 0;
		cocos2d::ReuseGrid* ret = cocos2d::ReuseGrid::create(arg0);
		tolua_pushusertype(tolua_S,ret,"ReuseGrid");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ReuseGrid_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_ReuseGrid_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (ReuseGrid)");
	return 0;
}

int lua_register_cocos2dx_ReuseGrid(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"ReuseGrid");
	tolua_cclass(tolua_S,"ReuseGrid","ReuseGrid","ActionInstant",NULL);

	tolua_beginmodule(tolua_S,"ReuseGrid");
		tolua_function(tolua_S,"startWithTarget",lua_cocos2dx_ReuseGrid_startWithTarget);
		tolua_function(tolua_S,"initWithTimes",lua_cocos2dx_ReuseGrid_initWithTimes);
		tolua_function(tolua_S,"clone",lua_cocos2dx_ReuseGrid_clone);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_ReuseGrid_reverse);
		tolua_function(tolua_S,"create", lua_cocos2dx_ReuseGrid_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_Waves3D_setAmplitudeRate(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Waves3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Waves3D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Waves3D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Waves3D_setAmplitudeRate'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setAmplitudeRate(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Waves3D_setAmplitudeRate'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Waves3D_initWithDuration(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Waves3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Waves3D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Waves3D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Waves3D_initWithDuration'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 4) {
		double arg0;
		cocos2d::Size arg1;
		unsigned int arg2;
		double arg3;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_size(tolua_S, 3, &arg1);
		ok &= luaval_to_uint32(tolua_S, 4,&arg2);
		ok &= luaval_to_number(tolua_S, 5,&arg3);
		if(!ok)
			return 0;
		bool ret = cobj->initWithDuration(arg0, arg1, arg2, arg3);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 4);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Waves3D_initWithDuration'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Waves3D_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Waves3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Waves3D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Waves3D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Waves3D_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Waves3D* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"Waves3D");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Waves3D_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Waves3D_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Waves3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Waves3D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Waves3D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Waves3D_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Waves3D_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Waves3D_getAmplitudeRate(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Waves3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Waves3D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Waves3D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Waves3D_getAmplitudeRate'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getAmplitudeRate();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Waves3D_getAmplitudeRate'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Waves3D_setAmplitude(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Waves3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Waves3D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Waves3D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Waves3D_setAmplitude'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setAmplitude(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Waves3D_setAmplitude'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Waves3D_getAmplitude(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Waves3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Waves3D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Waves3D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Waves3D_getAmplitude'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getAmplitude();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Waves3D_getAmplitude'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Waves3D_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"Waves3D",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 4) {
		double arg0;
		cocos2d::Size arg1;
		unsigned int arg2;
		double arg3;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_size(tolua_S, 3, &arg1);
		ok &= luaval_to_uint32(tolua_S, 4,&arg2);
		ok &= luaval_to_number(tolua_S, 5,&arg3);
		if(!ok)
			return 0;
		cocos2d::Waves3D* ret = cocos2d::Waves3D::create(arg0, arg1, arg2, arg3);
		tolua_pushusertype(tolua_S,ret,"Waves3D");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 4);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Waves3D_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_Waves3D_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (Waves3D)");
	return 0;
}

int lua_register_cocos2dx_Waves3D(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"Waves3D");
	tolua_cclass(tolua_S,"Waves3D","Waves3D","Grid3DAction",NULL);

	tolua_beginmodule(tolua_S,"Waves3D");
		tolua_function(tolua_S,"setAmplitudeRate",lua_cocos2dx_Waves3D_setAmplitudeRate);
		tolua_function(tolua_S,"initWithDuration",lua_cocos2dx_Waves3D_initWithDuration);
		tolua_function(tolua_S,"clone",lua_cocos2dx_Waves3D_clone);
		tolua_function(tolua_S,"update",lua_cocos2dx_Waves3D_update);
		tolua_function(tolua_S,"getAmplitudeRate",lua_cocos2dx_Waves3D_getAmplitudeRate);
		tolua_function(tolua_S,"setAmplitude",lua_cocos2dx_Waves3D_setAmplitude);
		tolua_function(tolua_S,"getAmplitude",lua_cocos2dx_Waves3D_getAmplitude);
		tolua_function(tolua_S,"create", lua_cocos2dx_Waves3D_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_FlipX3D_initWithSize(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::FlipX3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"FlipX3D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::FlipX3D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_FlipX3D_initWithSize'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		cocos2d::Size arg0;
		double arg1;
		ok &= luaval_to_size(tolua_S, 2, &arg0);
		ok &= luaval_to_number(tolua_S, 3,&arg1);
		if(!ok)
			return 0;
		bool ret = cobj->initWithSize(arg0, arg1);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FlipX3D_initWithSize'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_FlipX3D_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::FlipX3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"FlipX3D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::FlipX3D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_FlipX3D_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::FlipX3D* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"FlipX3D");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FlipX3D_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_FlipX3D_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::FlipX3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"FlipX3D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::FlipX3D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_FlipX3D_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FlipX3D_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_FlipX3D_initWithDuration(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::FlipX3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"FlipX3D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::FlipX3D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_FlipX3D_initWithDuration'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		bool ret = cobj->initWithDuration(arg0);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FlipX3D_initWithDuration'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_FlipX3D_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"FlipX3D",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cocos2d::FlipX3D* ret = cocos2d::FlipX3D::create(arg0);
		tolua_pushusertype(tolua_S,ret,"FlipX3D");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FlipX3D_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_FlipX3D_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (FlipX3D)");
	return 0;
}

int lua_register_cocos2dx_FlipX3D(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"FlipX3D");
	tolua_cclass(tolua_S,"FlipX3D","FlipX3D","Grid3DAction",NULL);

	tolua_beginmodule(tolua_S,"FlipX3D");
		tolua_function(tolua_S,"initWithSize",lua_cocos2dx_FlipX3D_initWithSize);
		tolua_function(tolua_S,"clone",lua_cocos2dx_FlipX3D_clone);
		tolua_function(tolua_S,"update",lua_cocos2dx_FlipX3D_update);
		tolua_function(tolua_S,"initWithDuration",lua_cocos2dx_FlipX3D_initWithDuration);
		tolua_function(tolua_S,"create", lua_cocos2dx_FlipX3D_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_FlipY3D_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::FlipY3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"FlipY3D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::FlipY3D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_FlipY3D_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::FlipY3D* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"FlipY3D");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FlipY3D_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_FlipY3D_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::FlipY3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"FlipY3D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::FlipY3D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_FlipY3D_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FlipY3D_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_FlipY3D_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"FlipY3D",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cocos2d::FlipY3D* ret = cocos2d::FlipY3D::create(arg0);
		tolua_pushusertype(tolua_S,ret,"FlipY3D");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FlipY3D_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_FlipY3D_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (FlipY3D)");
	return 0;
}

int lua_register_cocos2dx_FlipY3D(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"FlipY3D");
	tolua_cclass(tolua_S,"FlipY3D","FlipY3D","FlipX3D",NULL);

	tolua_beginmodule(tolua_S,"FlipY3D");
		tolua_function(tolua_S,"clone",lua_cocos2dx_FlipY3D_clone);
		tolua_function(tolua_S,"update",lua_cocos2dx_FlipY3D_update);
		tolua_function(tolua_S,"create", lua_cocos2dx_FlipY3D_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_Lens3D_setConcave(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Lens3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Lens3D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Lens3D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Lens3D_setConcave'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setConcave(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Lens3D_setConcave'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Lens3D_initWithDuration(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Lens3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Lens3D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Lens3D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Lens3D_initWithDuration'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 4) {
		double arg0;
		cocos2d::Size arg1;
		cocos2d::Point arg2;
		double arg3;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_size(tolua_S, 3, &arg1);
		ok &= luaval_to_point(tolua_S, 4, &arg2);
		ok &= luaval_to_number(tolua_S, 5,&arg3);
		if(!ok)
			return 0;
		bool ret = cobj->initWithDuration(arg0, arg1, arg2, arg3);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 4);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Lens3D_initWithDuration'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Lens3D_setLensEffect(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Lens3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Lens3D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Lens3D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Lens3D_setLensEffect'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setLensEffect(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Lens3D_setLensEffect'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Lens3D_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Lens3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Lens3D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Lens3D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Lens3D_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Lens3D_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Lens3D_getLensEffect(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Lens3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Lens3D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Lens3D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Lens3D_getLensEffect'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getLensEffect();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Lens3D_getLensEffect'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Lens3D_setPosition(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Lens3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Lens3D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Lens3D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Lens3D_setPosition'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Point arg0;
		ok &= luaval_to_point(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->setPosition(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Lens3D_setPosition'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Lens3D_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Lens3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Lens3D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Lens3D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Lens3D_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Lens3D* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"Lens3D");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Lens3D_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Lens3D_getPosition(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Lens3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Lens3D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Lens3D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Lens3D_getPosition'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Point ret = cobj->getPosition();
		point_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Lens3D_getPosition'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Lens3D_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"Lens3D",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 4) {
		double arg0;
		cocos2d::Size arg1;
		cocos2d::Point arg2;
		double arg3;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_size(tolua_S, 3, &arg1);
		ok &= luaval_to_point(tolua_S, 4, &arg2);
		ok &= luaval_to_number(tolua_S, 5,&arg3);
		if(!ok)
			return 0;
		cocos2d::Lens3D* ret = cocos2d::Lens3D::create(arg0, arg1, arg2, arg3);
		tolua_pushusertype(tolua_S,ret,"Lens3D");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 4);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Lens3D_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_Lens3D_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (Lens3D)");
	return 0;
}

int lua_register_cocos2dx_Lens3D(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"Lens3D");
	tolua_cclass(tolua_S,"Lens3D","Lens3D","Grid3DAction",NULL);

	tolua_beginmodule(tolua_S,"Lens3D");
		tolua_function(tolua_S,"setConcave",lua_cocos2dx_Lens3D_setConcave);
		tolua_function(tolua_S,"initWithDuration",lua_cocos2dx_Lens3D_initWithDuration);
		tolua_function(tolua_S,"setLensEffect",lua_cocos2dx_Lens3D_setLensEffect);
		tolua_function(tolua_S,"update",lua_cocos2dx_Lens3D_update);
		tolua_function(tolua_S,"getLensEffect",lua_cocos2dx_Lens3D_getLensEffect);
		tolua_function(tolua_S,"setPosition",lua_cocos2dx_Lens3D_setPosition);
		tolua_function(tolua_S,"clone",lua_cocos2dx_Lens3D_clone);
		tolua_function(tolua_S,"getPosition",lua_cocos2dx_Lens3D_getPosition);
		tolua_function(tolua_S,"create", lua_cocos2dx_Lens3D_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_Ripple3D_setAmplitudeRate(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Ripple3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Ripple3D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Ripple3D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Ripple3D_setAmplitudeRate'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setAmplitudeRate(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Ripple3D_setAmplitudeRate'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Ripple3D_initWithDuration(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Ripple3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Ripple3D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Ripple3D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Ripple3D_initWithDuration'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 6) {
		double arg0;
		cocos2d::Size arg1;
		cocos2d::Point arg2;
		double arg3;
		unsigned int arg4;
		double arg5;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_size(tolua_S, 3, &arg1);
		ok &= luaval_to_point(tolua_S, 4, &arg2);
		ok &= luaval_to_number(tolua_S, 5,&arg3);
		ok &= luaval_to_uint32(tolua_S, 6,&arg4);
		ok &= luaval_to_number(tolua_S, 7,&arg5);
		if(!ok)
			return 0;
		bool ret = cobj->initWithDuration(arg0, arg1, arg2, arg3, arg4, arg5);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 6);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Ripple3D_initWithDuration'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Ripple3D_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Ripple3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Ripple3D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Ripple3D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Ripple3D_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Ripple3D* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"Ripple3D");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Ripple3D_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Ripple3D_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Ripple3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Ripple3D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Ripple3D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Ripple3D_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Ripple3D_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Ripple3D_getAmplitudeRate(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Ripple3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Ripple3D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Ripple3D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Ripple3D_getAmplitudeRate'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getAmplitudeRate();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Ripple3D_getAmplitudeRate'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Ripple3D_setAmplitude(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Ripple3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Ripple3D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Ripple3D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Ripple3D_setAmplitude'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setAmplitude(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Ripple3D_setAmplitude'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Ripple3D_getAmplitude(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Ripple3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Ripple3D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Ripple3D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Ripple3D_getAmplitude'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getAmplitude();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Ripple3D_getAmplitude'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Ripple3D_setPosition(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Ripple3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Ripple3D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Ripple3D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Ripple3D_setPosition'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Point arg0;
		ok &= luaval_to_point(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->setPosition(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Ripple3D_setPosition'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Ripple3D_getPosition(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Ripple3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Ripple3D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Ripple3D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Ripple3D_getPosition'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Point ret = cobj->getPosition();
		point_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Ripple3D_getPosition'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Ripple3D_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"Ripple3D",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 6) {
		double arg0;
		cocos2d::Size arg1;
		cocos2d::Point arg2;
		double arg3;
		unsigned int arg4;
		double arg5;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_size(tolua_S, 3, &arg1);
		ok &= luaval_to_point(tolua_S, 4, &arg2);
		ok &= luaval_to_number(tolua_S, 5,&arg3);
		ok &= luaval_to_uint32(tolua_S, 6,&arg4);
		ok &= luaval_to_number(tolua_S, 7,&arg5);
		if(!ok)
			return 0;
		cocos2d::Ripple3D* ret = cocos2d::Ripple3D::create(arg0, arg1, arg2, arg3, arg4, arg5);
		tolua_pushusertype(tolua_S,ret,"Ripple3D");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 6);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Ripple3D_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_Ripple3D_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (Ripple3D)");
	return 0;
}

int lua_register_cocos2dx_Ripple3D(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"Ripple3D");
	tolua_cclass(tolua_S,"Ripple3D","Ripple3D","Grid3DAction",NULL);

	tolua_beginmodule(tolua_S,"Ripple3D");
		tolua_function(tolua_S,"setAmplitudeRate",lua_cocos2dx_Ripple3D_setAmplitudeRate);
		tolua_function(tolua_S,"initWithDuration",lua_cocos2dx_Ripple3D_initWithDuration);
		tolua_function(tolua_S,"clone",lua_cocos2dx_Ripple3D_clone);
		tolua_function(tolua_S,"update",lua_cocos2dx_Ripple3D_update);
		tolua_function(tolua_S,"getAmplitudeRate",lua_cocos2dx_Ripple3D_getAmplitudeRate);
		tolua_function(tolua_S,"setAmplitude",lua_cocos2dx_Ripple3D_setAmplitude);
		tolua_function(tolua_S,"getAmplitude",lua_cocos2dx_Ripple3D_getAmplitude);
		tolua_function(tolua_S,"setPosition",lua_cocos2dx_Ripple3D_setPosition);
		tolua_function(tolua_S,"getPosition",lua_cocos2dx_Ripple3D_getPosition);
		tolua_function(tolua_S,"create", lua_cocos2dx_Ripple3D_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_Shaky3D_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Shaky3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Shaky3D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Shaky3D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Shaky3D_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Shaky3D* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"Shaky3D");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Shaky3D_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Shaky3D_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Shaky3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Shaky3D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Shaky3D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Shaky3D_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Shaky3D_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Shaky3D_initWithDuration(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Shaky3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Shaky3D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Shaky3D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Shaky3D_initWithDuration'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 4) {
		double arg0;
		cocos2d::Size arg1;
		int arg2;
		bool arg3;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_size(tolua_S, 3, &arg1);
		ok &= luaval_to_int32(tolua_S, 4,(int*)&arg2);
		ok &= luaval_to_boolean(tolua_S, 5,&arg3);
		if(!ok)
			return 0;
		bool ret = cobj->initWithDuration(arg0, arg1, arg2, arg3);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 4);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Shaky3D_initWithDuration'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Shaky3D_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"Shaky3D",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 4) {
		double arg0;
		cocos2d::Size arg1;
		int arg2;
		bool arg3;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_size(tolua_S, 3, &arg1);
		ok &= luaval_to_int32(tolua_S, 4,(int*)&arg2);
		ok &= luaval_to_boolean(tolua_S, 5,&arg3);
		if(!ok)
			return 0;
		cocos2d::Shaky3D* ret = cocos2d::Shaky3D::create(arg0, arg1, arg2, arg3);
		tolua_pushusertype(tolua_S,ret,"Shaky3D");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 4);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Shaky3D_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_Shaky3D_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (Shaky3D)");
	return 0;
}

int lua_register_cocos2dx_Shaky3D(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"Shaky3D");
	tolua_cclass(tolua_S,"Shaky3D","Shaky3D","Grid3DAction",NULL);

	tolua_beginmodule(tolua_S,"Shaky3D");
		tolua_function(tolua_S,"clone",lua_cocos2dx_Shaky3D_clone);
		tolua_function(tolua_S,"update",lua_cocos2dx_Shaky3D_update);
		tolua_function(tolua_S,"initWithDuration",lua_cocos2dx_Shaky3D_initWithDuration);
		tolua_function(tolua_S,"create", lua_cocos2dx_Shaky3D_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_Liquid_setAmplitudeRate(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Liquid* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Liquid",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Liquid*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Liquid_setAmplitudeRate'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setAmplitudeRate(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Liquid_setAmplitudeRate'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Liquid_initWithDuration(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Liquid* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Liquid",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Liquid*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Liquid_initWithDuration'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 4) {
		double arg0;
		cocos2d::Size arg1;
		unsigned int arg2;
		double arg3;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_size(tolua_S, 3, &arg1);
		ok &= luaval_to_uint32(tolua_S, 4,&arg2);
		ok &= luaval_to_number(tolua_S, 5,&arg3);
		if(!ok)
			return 0;
		bool ret = cobj->initWithDuration(arg0, arg1, arg2, arg3);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 4);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Liquid_initWithDuration'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Liquid_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Liquid* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Liquid",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Liquid*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Liquid_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Liquid* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"Liquid");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Liquid_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Liquid_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Liquid* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Liquid",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Liquid*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Liquid_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Liquid_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Liquid_getAmplitudeRate(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Liquid* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Liquid",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Liquid*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Liquid_getAmplitudeRate'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getAmplitudeRate();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Liquid_getAmplitudeRate'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Liquid_setAmplitude(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Liquid* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Liquid",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Liquid*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Liquid_setAmplitude'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setAmplitude(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Liquid_setAmplitude'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Liquid_getAmplitude(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Liquid* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Liquid",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Liquid*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Liquid_getAmplitude'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getAmplitude();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Liquid_getAmplitude'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Liquid_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"Liquid",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 4) {
		double arg0;
		cocos2d::Size arg1;
		unsigned int arg2;
		double arg3;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_size(tolua_S, 3, &arg1);
		ok &= luaval_to_uint32(tolua_S, 4,&arg2);
		ok &= luaval_to_number(tolua_S, 5,&arg3);
		if(!ok)
			return 0;
		cocos2d::Liquid* ret = cocos2d::Liquid::create(arg0, arg1, arg2, arg3);
		tolua_pushusertype(tolua_S,ret,"Liquid");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 4);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Liquid_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_Liquid_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (Liquid)");
	return 0;
}

int lua_register_cocos2dx_Liquid(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"Liquid");
	tolua_cclass(tolua_S,"Liquid","Liquid","Grid3DAction",NULL);

	tolua_beginmodule(tolua_S,"Liquid");
		tolua_function(tolua_S,"setAmplitudeRate",lua_cocos2dx_Liquid_setAmplitudeRate);
		tolua_function(tolua_S,"initWithDuration",lua_cocos2dx_Liquid_initWithDuration);
		tolua_function(tolua_S,"clone",lua_cocos2dx_Liquid_clone);
		tolua_function(tolua_S,"update",lua_cocos2dx_Liquid_update);
		tolua_function(tolua_S,"getAmplitudeRate",lua_cocos2dx_Liquid_getAmplitudeRate);
		tolua_function(tolua_S,"setAmplitude",lua_cocos2dx_Liquid_setAmplitude);
		tolua_function(tolua_S,"getAmplitude",lua_cocos2dx_Liquid_getAmplitude);
		tolua_function(tolua_S,"create", lua_cocos2dx_Liquid_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_Waves_setAmplitudeRate(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Waves* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Waves",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Waves*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Waves_setAmplitudeRate'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setAmplitudeRate(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Waves_setAmplitudeRate'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Waves_initWithDuration(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Waves* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Waves",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Waves*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Waves_initWithDuration'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 6) {
		double arg0;
		cocos2d::Size arg1;
		unsigned int arg2;
		double arg3;
		bool arg4;
		bool arg5;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_size(tolua_S, 3, &arg1);
		ok &= luaval_to_uint32(tolua_S, 4,&arg2);
		ok &= luaval_to_number(tolua_S, 5,&arg3);
		ok &= luaval_to_boolean(tolua_S, 6,&arg4);
		ok &= luaval_to_boolean(tolua_S, 7,&arg5);
		if(!ok)
			return 0;
		bool ret = cobj->initWithDuration(arg0, arg1, arg2, arg3, arg4, arg5);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 6);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Waves_initWithDuration'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Waves_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Waves* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Waves",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Waves*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Waves_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Waves* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"Waves");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Waves_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Waves_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Waves* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Waves",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Waves*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Waves_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Waves_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Waves_getAmplitudeRate(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Waves* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Waves",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Waves*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Waves_getAmplitudeRate'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getAmplitudeRate();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Waves_getAmplitudeRate'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Waves_setAmplitude(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Waves* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Waves",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Waves*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Waves_setAmplitude'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setAmplitude(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Waves_setAmplitude'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Waves_getAmplitude(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Waves* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Waves",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Waves*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Waves_getAmplitude'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getAmplitude();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Waves_getAmplitude'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Waves_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"Waves",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 6) {
		double arg0;
		cocos2d::Size arg1;
		unsigned int arg2;
		double arg3;
		bool arg4;
		bool arg5;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_size(tolua_S, 3, &arg1);
		ok &= luaval_to_uint32(tolua_S, 4,&arg2);
		ok &= luaval_to_number(tolua_S, 5,&arg3);
		ok &= luaval_to_boolean(tolua_S, 6,&arg4);
		ok &= luaval_to_boolean(tolua_S, 7,&arg5);
		if(!ok)
			return 0;
		cocos2d::Waves* ret = cocos2d::Waves::create(arg0, arg1, arg2, arg3, arg4, arg5);
		tolua_pushusertype(tolua_S,ret,"Waves");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 6);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Waves_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_Waves_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (Waves)");
	return 0;
}

int lua_register_cocos2dx_Waves(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"Waves");
	tolua_cclass(tolua_S,"Waves","Waves","Grid3DAction",NULL);

	tolua_beginmodule(tolua_S,"Waves");
		tolua_function(tolua_S,"setAmplitudeRate",lua_cocos2dx_Waves_setAmplitudeRate);
		tolua_function(tolua_S,"initWithDuration",lua_cocos2dx_Waves_initWithDuration);
		tolua_function(tolua_S,"clone",lua_cocos2dx_Waves_clone);
		tolua_function(tolua_S,"update",lua_cocos2dx_Waves_update);
		tolua_function(tolua_S,"getAmplitudeRate",lua_cocos2dx_Waves_getAmplitudeRate);
		tolua_function(tolua_S,"setAmplitude",lua_cocos2dx_Waves_setAmplitude);
		tolua_function(tolua_S,"getAmplitude",lua_cocos2dx_Waves_getAmplitude);
		tolua_function(tolua_S,"create", lua_cocos2dx_Waves_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_Twirl_setAmplitudeRate(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Twirl* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Twirl",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Twirl*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Twirl_setAmplitudeRate'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setAmplitudeRate(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Twirl_setAmplitudeRate'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Twirl_initWithDuration(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Twirl* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Twirl",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Twirl*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Twirl_initWithDuration'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 5) {
		double arg0;
		cocos2d::Size arg1;
		cocos2d::Point arg2;
		unsigned int arg3;
		double arg4;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_size(tolua_S, 3, &arg1);
		ok &= luaval_to_point(tolua_S, 4, &arg2);
		ok &= luaval_to_uint32(tolua_S, 5,&arg3);
		ok &= luaval_to_number(tolua_S, 6,&arg4);
		if(!ok)
			return 0;
		bool ret = cobj->initWithDuration(arg0, arg1, arg2, arg3, arg4);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 5);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Twirl_initWithDuration'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Twirl_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Twirl* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Twirl",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Twirl*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Twirl_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Twirl* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"Twirl");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Twirl_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Twirl_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Twirl* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Twirl",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Twirl*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Twirl_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Twirl_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Twirl_getAmplitudeRate(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Twirl* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Twirl",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Twirl*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Twirl_getAmplitudeRate'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getAmplitudeRate();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Twirl_getAmplitudeRate'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Twirl_setAmplitude(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Twirl* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Twirl",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Twirl*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Twirl_setAmplitude'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setAmplitude(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Twirl_setAmplitude'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Twirl_getAmplitude(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Twirl* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Twirl",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Twirl*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Twirl_getAmplitude'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getAmplitude();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Twirl_getAmplitude'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Twirl_setPosition(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Twirl* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Twirl",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Twirl*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Twirl_setPosition'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Point arg0;
		ok &= luaval_to_point(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->setPosition(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Twirl_setPosition'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Twirl_getPosition(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Twirl* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Twirl",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Twirl*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Twirl_getPosition'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Point ret = cobj->getPosition();
		point_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Twirl_getPosition'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Twirl_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"Twirl",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 5) {
		double arg0;
		cocos2d::Size arg1;
		cocos2d::Point arg2;
		unsigned int arg3;
		double arg4;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_size(tolua_S, 3, &arg1);
		ok &= luaval_to_point(tolua_S, 4, &arg2);
		ok &= luaval_to_uint32(tolua_S, 5,&arg3);
		ok &= luaval_to_number(tolua_S, 6,&arg4);
		if(!ok)
			return 0;
		cocos2d::Twirl* ret = cocos2d::Twirl::create(arg0, arg1, arg2, arg3, arg4);
		tolua_pushusertype(tolua_S,ret,"Twirl");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 5);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Twirl_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_Twirl_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (Twirl)");
	return 0;
}

int lua_register_cocos2dx_Twirl(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"Twirl");
	tolua_cclass(tolua_S,"Twirl","Twirl","Grid3DAction",NULL);

	tolua_beginmodule(tolua_S,"Twirl");
		tolua_function(tolua_S,"setAmplitudeRate",lua_cocos2dx_Twirl_setAmplitudeRate);
		tolua_function(tolua_S,"initWithDuration",lua_cocos2dx_Twirl_initWithDuration);
		tolua_function(tolua_S,"clone",lua_cocos2dx_Twirl_clone);
		tolua_function(tolua_S,"update",lua_cocos2dx_Twirl_update);
		tolua_function(tolua_S,"getAmplitudeRate",lua_cocos2dx_Twirl_getAmplitudeRate);
		tolua_function(tolua_S,"setAmplitude",lua_cocos2dx_Twirl_setAmplitude);
		tolua_function(tolua_S,"getAmplitude",lua_cocos2dx_Twirl_getAmplitude);
		tolua_function(tolua_S,"setPosition",lua_cocos2dx_Twirl_setPosition);
		tolua_function(tolua_S,"getPosition",lua_cocos2dx_Twirl_getPosition);
		tolua_function(tolua_S,"create", lua_cocos2dx_Twirl_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_PageTurn3D_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::PageTurn3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"PageTurn3D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::PageTurn3D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_PageTurn3D_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::PageTurn3D* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"PageTurn3D");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_PageTurn3D_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_PageTurn3D_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::PageTurn3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"PageTurn3D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::PageTurn3D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_PageTurn3D_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_PageTurn3D_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_PageTurn3D_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"PageTurn3D",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 2) {
		double arg0;
		cocos2d::Size arg1;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_size(tolua_S, 3, &arg1);
		if(!ok)
			return 0;
		cocos2d::PageTurn3D* ret = cocos2d::PageTurn3D::create(arg0, arg1);
		tolua_pushusertype(tolua_S,ret,"PageTurn3D");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_PageTurn3D_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_PageTurn3D_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (PageTurn3D)");
	return 0;
}

int lua_register_cocos2dx_PageTurn3D(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"PageTurn3D");
	tolua_cclass(tolua_S,"PageTurn3D","PageTurn3D","Grid3DAction",NULL);

	tolua_beginmodule(tolua_S,"PageTurn3D");
		tolua_function(tolua_S,"clone",lua_cocos2dx_PageTurn3D_clone);
		tolua_function(tolua_S,"update",lua_cocos2dx_PageTurn3D_update);
		tolua_function(tolua_S,"create", lua_cocos2dx_PageTurn3D_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_ProgressTo_startWithTarget(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ProgressTo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ProgressTo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ProgressTo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ProgressTo_startWithTarget'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Node* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->startWithTarget(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ProgressTo_startWithTarget'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ProgressTo_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ProgressTo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ProgressTo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ProgressTo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ProgressTo_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::ProgressTo* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"ProgressTo");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ProgressTo_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ProgressTo_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ProgressTo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ProgressTo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ProgressTo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ProgressTo_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::ProgressTo* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"ProgressTo");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ProgressTo_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ProgressTo_initWithDuration(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ProgressTo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ProgressTo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ProgressTo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ProgressTo_initWithDuration'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		double arg0;
		double arg1;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_number(tolua_S, 3,&arg1);
		if(!ok)
			return 0;
		bool ret = cobj->initWithDuration(arg0, arg1);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ProgressTo_initWithDuration'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ProgressTo_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ProgressTo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ProgressTo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ProgressTo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ProgressTo_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ProgressTo_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ProgressTo_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"ProgressTo",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 2) {
		double arg0;
		double arg1;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_number(tolua_S, 3,&arg1);
		if(!ok)
			return 0;
		cocos2d::ProgressTo* ret = cocos2d::ProgressTo::create(arg0, arg1);
		tolua_pushusertype(tolua_S,ret,"ProgressTo");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ProgressTo_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_ProgressTo_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (ProgressTo)");
	return 0;
}

int lua_register_cocos2dx_ProgressTo(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"ProgressTo");
	tolua_cclass(tolua_S,"ProgressTo","ProgressTo","ActionInterval",NULL);

	tolua_beginmodule(tolua_S,"ProgressTo");
		tolua_function(tolua_S,"startWithTarget",lua_cocos2dx_ProgressTo_startWithTarget);
		tolua_function(tolua_S,"clone",lua_cocos2dx_ProgressTo_clone);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_ProgressTo_reverse);
		tolua_function(tolua_S,"initWithDuration",lua_cocos2dx_ProgressTo_initWithDuration);
		tolua_function(tolua_S,"update",lua_cocos2dx_ProgressTo_update);
		tolua_function(tolua_S,"create", lua_cocos2dx_ProgressTo_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_ProgressFromTo_startWithTarget(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ProgressFromTo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ProgressFromTo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ProgressFromTo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ProgressFromTo_startWithTarget'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Node* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->startWithTarget(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ProgressFromTo_startWithTarget'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ProgressFromTo_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ProgressFromTo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ProgressFromTo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ProgressFromTo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ProgressFromTo_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::ProgressFromTo* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"ProgressFromTo");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ProgressFromTo_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ProgressFromTo_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ProgressFromTo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ProgressFromTo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ProgressFromTo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ProgressFromTo_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::ProgressFromTo* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"ProgressFromTo");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ProgressFromTo_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ProgressFromTo_initWithDuration(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ProgressFromTo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ProgressFromTo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ProgressFromTo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ProgressFromTo_initWithDuration'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 3) {
		double arg0;
		double arg1;
		double arg2;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_number(tolua_S, 3,&arg1);
		ok &= luaval_to_number(tolua_S, 4,&arg2);
		if(!ok)
			return 0;
		bool ret = cobj->initWithDuration(arg0, arg1, arg2);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 3);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ProgressFromTo_initWithDuration'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ProgressFromTo_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ProgressFromTo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ProgressFromTo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ProgressFromTo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ProgressFromTo_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ProgressFromTo_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ProgressFromTo_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"ProgressFromTo",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 3) {
		double arg0;
		double arg1;
		double arg2;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_number(tolua_S, 3,&arg1);
		ok &= luaval_to_number(tolua_S, 4,&arg2);
		if(!ok)
			return 0;
		cocos2d::ProgressFromTo* ret = cocos2d::ProgressFromTo::create(arg0, arg1, arg2);
		tolua_pushusertype(tolua_S,ret,"ProgressFromTo");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 3);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ProgressFromTo_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_ProgressFromTo_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (ProgressFromTo)");
	return 0;
}

int lua_register_cocos2dx_ProgressFromTo(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"ProgressFromTo");
	tolua_cclass(tolua_S,"ProgressFromTo","ProgressFromTo","ActionInterval",NULL);

	tolua_beginmodule(tolua_S,"ProgressFromTo");
		tolua_function(tolua_S,"startWithTarget",lua_cocos2dx_ProgressFromTo_startWithTarget);
		tolua_function(tolua_S,"clone",lua_cocos2dx_ProgressFromTo_clone);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_ProgressFromTo_reverse);
		tolua_function(tolua_S,"initWithDuration",lua_cocos2dx_ProgressFromTo_initWithDuration);
		tolua_function(tolua_S,"update",lua_cocos2dx_ProgressFromTo_update);
		tolua_function(tolua_S,"create", lua_cocos2dx_ProgressFromTo_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_ShakyTiles3D_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ShakyTiles3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ShakyTiles3D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ShakyTiles3D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ShakyTiles3D_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::ShakyTiles3D* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"ShakyTiles3D");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ShakyTiles3D_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ShakyTiles3D_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ShakyTiles3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ShakyTiles3D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ShakyTiles3D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ShakyTiles3D_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ShakyTiles3D_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ShakyTiles3D_initWithDuration(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ShakyTiles3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ShakyTiles3D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ShakyTiles3D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ShakyTiles3D_initWithDuration'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 4) {
		double arg0;
		cocos2d::Size arg1;
		int arg2;
		bool arg3;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_size(tolua_S, 3, &arg1);
		ok &= luaval_to_int32(tolua_S, 4,(int*)&arg2);
		ok &= luaval_to_boolean(tolua_S, 5,&arg3);
		if(!ok)
			return 0;
		bool ret = cobj->initWithDuration(arg0, arg1, arg2, arg3);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 4);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ShakyTiles3D_initWithDuration'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ShakyTiles3D_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"ShakyTiles3D",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 4) {
		double arg0;
		cocos2d::Size arg1;
		int arg2;
		bool arg3;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_size(tolua_S, 3, &arg1);
		ok &= luaval_to_int32(tolua_S, 4,(int*)&arg2);
		ok &= luaval_to_boolean(tolua_S, 5,&arg3);
		if(!ok)
			return 0;
		cocos2d::ShakyTiles3D* ret = cocos2d::ShakyTiles3D::create(arg0, arg1, arg2, arg3);
		tolua_pushusertype(tolua_S,ret,"ShakyTiles3D");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 4);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ShakyTiles3D_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_ShakyTiles3D_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (ShakyTiles3D)");
	return 0;
}

int lua_register_cocos2dx_ShakyTiles3D(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"ShakyTiles3D");
	tolua_cclass(tolua_S,"ShakyTiles3D","ShakyTiles3D","TiledGrid3DAction",NULL);

	tolua_beginmodule(tolua_S,"ShakyTiles3D");
		tolua_function(tolua_S,"clone",lua_cocos2dx_ShakyTiles3D_clone);
		tolua_function(tolua_S,"update",lua_cocos2dx_ShakyTiles3D_update);
		tolua_function(tolua_S,"initWithDuration",lua_cocos2dx_ShakyTiles3D_initWithDuration);
		tolua_function(tolua_S,"create", lua_cocos2dx_ShakyTiles3D_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_ShatteredTiles3D_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ShatteredTiles3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ShatteredTiles3D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ShatteredTiles3D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ShatteredTiles3D_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::ShatteredTiles3D* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"ShatteredTiles3D");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ShatteredTiles3D_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ShatteredTiles3D_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ShatteredTiles3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ShatteredTiles3D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ShatteredTiles3D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ShatteredTiles3D_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ShatteredTiles3D_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ShatteredTiles3D_initWithDuration(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ShatteredTiles3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ShatteredTiles3D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ShatteredTiles3D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ShatteredTiles3D_initWithDuration'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 4) {
		double arg0;
		cocos2d::Size arg1;
		int arg2;
		bool arg3;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_size(tolua_S, 3, &arg1);
		ok &= luaval_to_int32(tolua_S, 4,(int*)&arg2);
		ok &= luaval_to_boolean(tolua_S, 5,&arg3);
		if(!ok)
			return 0;
		bool ret = cobj->initWithDuration(arg0, arg1, arg2, arg3);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 4);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ShatteredTiles3D_initWithDuration'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ShatteredTiles3D_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"ShatteredTiles3D",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 4) {
		double arg0;
		cocos2d::Size arg1;
		int arg2;
		bool arg3;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_size(tolua_S, 3, &arg1);
		ok &= luaval_to_int32(tolua_S, 4,(int*)&arg2);
		ok &= luaval_to_boolean(tolua_S, 5,&arg3);
		if(!ok)
			return 0;
		cocos2d::ShatteredTiles3D* ret = cocos2d::ShatteredTiles3D::create(arg0, arg1, arg2, arg3);
		tolua_pushusertype(tolua_S,ret,"ShatteredTiles3D");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 4);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ShatteredTiles3D_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_ShatteredTiles3D_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (ShatteredTiles3D)");
	return 0;
}

int lua_register_cocos2dx_ShatteredTiles3D(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"ShatteredTiles3D");
	tolua_cclass(tolua_S,"ShatteredTiles3D","ShatteredTiles3D","TiledGrid3DAction",NULL);

	tolua_beginmodule(tolua_S,"ShatteredTiles3D");
		tolua_function(tolua_S,"clone",lua_cocos2dx_ShatteredTiles3D_clone);
		tolua_function(tolua_S,"update",lua_cocos2dx_ShatteredTiles3D_update);
		tolua_function(tolua_S,"initWithDuration",lua_cocos2dx_ShatteredTiles3D_initWithDuration);
		tolua_function(tolua_S,"create", lua_cocos2dx_ShatteredTiles3D_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_ShuffleTiles_startWithTarget(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ShuffleTiles* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ShuffleTiles",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ShuffleTiles*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ShuffleTiles_startWithTarget'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Node* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->startWithTarget(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ShuffleTiles_startWithTarget'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ShuffleTiles_placeTile(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ShuffleTiles* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ShuffleTiles",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ShuffleTiles*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ShuffleTiles_placeTile'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		cocos2d::Point arg0;
		cocos2d::Tile* arg1;
		ok &= luaval_to_point(tolua_S, 2, &arg0);
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Tile",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Tile*)tolua_tousertype(tolua_S,3,0);
		};
		if(!ok)
			return 0;
		cobj->placeTile(arg0, arg1);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ShuffleTiles_placeTile'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ShuffleTiles_initWithDuration(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ShuffleTiles* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ShuffleTiles",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ShuffleTiles*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ShuffleTiles_initWithDuration'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 3) {
		double arg0;
		cocos2d::Size arg1;
		unsigned int arg2;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_size(tolua_S, 3, &arg1);
		ok &= luaval_to_uint32(tolua_S, 4,&arg2);
		if(!ok)
			return 0;
		bool ret = cobj->initWithDuration(arg0, arg1, arg2);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 3);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ShuffleTiles_initWithDuration'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ShuffleTiles_getDelta(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ShuffleTiles* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ShuffleTiles",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ShuffleTiles*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ShuffleTiles_getDelta'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Size arg0;
		ok &= luaval_to_size(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cocos2d::Size ret = cobj->getDelta(arg0);
		size_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ShuffleTiles_getDelta'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ShuffleTiles_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ShuffleTiles* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ShuffleTiles",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ShuffleTiles*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ShuffleTiles_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::ShuffleTiles* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"ShuffleTiles");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ShuffleTiles_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ShuffleTiles_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ShuffleTiles* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ShuffleTiles",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ShuffleTiles*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ShuffleTiles_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ShuffleTiles_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ShuffleTiles_shuffle(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ShuffleTiles* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ShuffleTiles",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ShuffleTiles*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ShuffleTiles_shuffle'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		unsigned int* arg0;
		unsigned int arg1;
		#pragma warning NO CONVERSION TO NATIVE FOR unsigned int*;
		ok &= luaval_to_uint32(tolua_S, 3,&arg1);
		if(!ok)
			return 0;
		cobj->shuffle(arg0, arg1);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ShuffleTiles_shuffle'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ShuffleTiles_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"ShuffleTiles",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 3) {
		double arg0;
		cocos2d::Size arg1;
		unsigned int arg2;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_size(tolua_S, 3, &arg1);
		ok &= luaval_to_uint32(tolua_S, 4,&arg2);
		if(!ok)
			return 0;
		cocos2d::ShuffleTiles* ret = cocos2d::ShuffleTiles::create(arg0, arg1, arg2);
		tolua_pushusertype(tolua_S,ret,"ShuffleTiles");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 3);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ShuffleTiles_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_ShuffleTiles_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (ShuffleTiles)");
	return 0;
}

int lua_register_cocos2dx_ShuffleTiles(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"ShuffleTiles");
	tolua_cclass(tolua_S,"ShuffleTiles","ShuffleTiles","TiledGrid3DAction",NULL);

	tolua_beginmodule(tolua_S,"ShuffleTiles");
		tolua_function(tolua_S,"startWithTarget",lua_cocos2dx_ShuffleTiles_startWithTarget);
		tolua_function(tolua_S,"placeTile",lua_cocos2dx_ShuffleTiles_placeTile);
		tolua_function(tolua_S,"initWithDuration",lua_cocos2dx_ShuffleTiles_initWithDuration);
		tolua_function(tolua_S,"getDelta",lua_cocos2dx_ShuffleTiles_getDelta);
		tolua_function(tolua_S,"clone",lua_cocos2dx_ShuffleTiles_clone);
		tolua_function(tolua_S,"update",lua_cocos2dx_ShuffleTiles_update);
		tolua_function(tolua_S,"shuffle",lua_cocos2dx_ShuffleTiles_shuffle);
		tolua_function(tolua_S,"create", lua_cocos2dx_ShuffleTiles_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_FadeOutTRTiles_turnOnTile(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::FadeOutTRTiles* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"FadeOutTRTiles",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::FadeOutTRTiles*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_FadeOutTRTiles_turnOnTile'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Point arg0;
		ok &= luaval_to_point(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->turnOnTile(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FadeOutTRTiles_turnOnTile'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_FadeOutTRTiles_turnOffTile(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::FadeOutTRTiles* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"FadeOutTRTiles",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::FadeOutTRTiles*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_FadeOutTRTiles_turnOffTile'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Point arg0;
		ok &= luaval_to_point(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->turnOffTile(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FadeOutTRTiles_turnOffTile'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_FadeOutTRTiles_transformTile(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::FadeOutTRTiles* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"FadeOutTRTiles",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::FadeOutTRTiles*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_FadeOutTRTiles_transformTile'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		cocos2d::Point arg0;
		double arg1;
		ok &= luaval_to_point(tolua_S, 2, &arg0);
		ok &= luaval_to_number(tolua_S, 3,&arg1);
		if(!ok)
			return 0;
		cobj->transformTile(arg0, arg1);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FadeOutTRTiles_transformTile'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_FadeOutTRTiles_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::FadeOutTRTiles* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"FadeOutTRTiles",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::FadeOutTRTiles*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_FadeOutTRTiles_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::FadeOutTRTiles* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"FadeOutTRTiles");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FadeOutTRTiles_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_FadeOutTRTiles_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::FadeOutTRTiles* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"FadeOutTRTiles",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::FadeOutTRTiles*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_FadeOutTRTiles_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FadeOutTRTiles_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_FadeOutTRTiles_testFunc(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::FadeOutTRTiles* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"FadeOutTRTiles",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::FadeOutTRTiles*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_FadeOutTRTiles_testFunc'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		cocos2d::Size arg0;
		double arg1;
		ok &= luaval_to_size(tolua_S, 2, &arg0);
		ok &= luaval_to_number(tolua_S, 3,&arg1);
		if(!ok)
			return 0;
		float ret = cobj->testFunc(arg0, arg1);
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FadeOutTRTiles_testFunc'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_FadeOutTRTiles_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"FadeOutTRTiles",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 2) {
		double arg0;
		cocos2d::Size arg1;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_size(tolua_S, 3, &arg1);
		if(!ok)
			return 0;
		cocos2d::FadeOutTRTiles* ret = cocos2d::FadeOutTRTiles::create(arg0, arg1);
		tolua_pushusertype(tolua_S,ret,"FadeOutTRTiles");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FadeOutTRTiles_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_FadeOutTRTiles_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (FadeOutTRTiles)");
	return 0;
}

int lua_register_cocos2dx_FadeOutTRTiles(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"FadeOutTRTiles");
	tolua_cclass(tolua_S,"FadeOutTRTiles","FadeOutTRTiles","TiledGrid3DAction",NULL);

	tolua_beginmodule(tolua_S,"FadeOutTRTiles");
		tolua_function(tolua_S,"turnOnTile",lua_cocos2dx_FadeOutTRTiles_turnOnTile);
		tolua_function(tolua_S,"turnOffTile",lua_cocos2dx_FadeOutTRTiles_turnOffTile);
		tolua_function(tolua_S,"transformTile",lua_cocos2dx_FadeOutTRTiles_transformTile);
		tolua_function(tolua_S,"clone",lua_cocos2dx_FadeOutTRTiles_clone);
		tolua_function(tolua_S,"update",lua_cocos2dx_FadeOutTRTiles_update);
		tolua_function(tolua_S,"testFunc",lua_cocos2dx_FadeOutTRTiles_testFunc);
		tolua_function(tolua_S,"create", lua_cocos2dx_FadeOutTRTiles_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_FadeOutBLTiles_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::FadeOutBLTiles* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"FadeOutBLTiles",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::FadeOutBLTiles*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_FadeOutBLTiles_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::FadeOutBLTiles* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"FadeOutBLTiles");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FadeOutBLTiles_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_FadeOutBLTiles_testFunc(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::FadeOutBLTiles* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"FadeOutBLTiles",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::FadeOutBLTiles*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_FadeOutBLTiles_testFunc'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		cocos2d::Size arg0;
		double arg1;
		ok &= luaval_to_size(tolua_S, 2, &arg0);
		ok &= luaval_to_number(tolua_S, 3,&arg1);
		if(!ok)
			return 0;
		float ret = cobj->testFunc(arg0, arg1);
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FadeOutBLTiles_testFunc'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_FadeOutBLTiles_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"FadeOutBLTiles",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 2) {
		double arg0;
		cocos2d::Size arg1;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_size(tolua_S, 3, &arg1);
		if(!ok)
			return 0;
		cocos2d::FadeOutBLTiles* ret = cocos2d::FadeOutBLTiles::create(arg0, arg1);
		tolua_pushusertype(tolua_S,ret,"FadeOutBLTiles");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FadeOutBLTiles_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_FadeOutBLTiles_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (FadeOutBLTiles)");
	return 0;
}

int lua_register_cocos2dx_FadeOutBLTiles(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"FadeOutBLTiles");
	tolua_cclass(tolua_S,"FadeOutBLTiles","FadeOutBLTiles","FadeOutTRTiles",NULL);

	tolua_beginmodule(tolua_S,"FadeOutBLTiles");
		tolua_function(tolua_S,"clone",lua_cocos2dx_FadeOutBLTiles_clone);
		tolua_function(tolua_S,"testFunc",lua_cocos2dx_FadeOutBLTiles_testFunc);
		tolua_function(tolua_S,"create", lua_cocos2dx_FadeOutBLTiles_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_FadeOutUpTiles_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::FadeOutUpTiles* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"FadeOutUpTiles",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::FadeOutUpTiles*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_FadeOutUpTiles_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::FadeOutUpTiles* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"FadeOutUpTiles");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FadeOutUpTiles_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_FadeOutUpTiles_transformTile(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::FadeOutUpTiles* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"FadeOutUpTiles",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::FadeOutUpTiles*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_FadeOutUpTiles_transformTile'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		cocos2d::Point arg0;
		double arg1;
		ok &= luaval_to_point(tolua_S, 2, &arg0);
		ok &= luaval_to_number(tolua_S, 3,&arg1);
		if(!ok)
			return 0;
		cobj->transformTile(arg0, arg1);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FadeOutUpTiles_transformTile'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_FadeOutUpTiles_testFunc(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::FadeOutUpTiles* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"FadeOutUpTiles",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::FadeOutUpTiles*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_FadeOutUpTiles_testFunc'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		cocos2d::Size arg0;
		double arg1;
		ok &= luaval_to_size(tolua_S, 2, &arg0);
		ok &= luaval_to_number(tolua_S, 3,&arg1);
		if(!ok)
			return 0;
		float ret = cobj->testFunc(arg0, arg1);
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FadeOutUpTiles_testFunc'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_FadeOutUpTiles_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"FadeOutUpTiles",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 2) {
		double arg0;
		cocos2d::Size arg1;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_size(tolua_S, 3, &arg1);
		if(!ok)
			return 0;
		cocos2d::FadeOutUpTiles* ret = cocos2d::FadeOutUpTiles::create(arg0, arg1);
		tolua_pushusertype(tolua_S,ret,"FadeOutUpTiles");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FadeOutUpTiles_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_FadeOutUpTiles_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (FadeOutUpTiles)");
	return 0;
}

int lua_register_cocos2dx_FadeOutUpTiles(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"FadeOutUpTiles");
	tolua_cclass(tolua_S,"FadeOutUpTiles","FadeOutUpTiles","FadeOutTRTiles",NULL);

	tolua_beginmodule(tolua_S,"FadeOutUpTiles");
		tolua_function(tolua_S,"clone",lua_cocos2dx_FadeOutUpTiles_clone);
		tolua_function(tolua_S,"transformTile",lua_cocos2dx_FadeOutUpTiles_transformTile);
		tolua_function(tolua_S,"testFunc",lua_cocos2dx_FadeOutUpTiles_testFunc);
		tolua_function(tolua_S,"create", lua_cocos2dx_FadeOutUpTiles_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_FadeOutDownTiles_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::FadeOutDownTiles* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"FadeOutDownTiles",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::FadeOutDownTiles*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_FadeOutDownTiles_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::FadeOutDownTiles* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"FadeOutDownTiles");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FadeOutDownTiles_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_FadeOutDownTiles_testFunc(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::FadeOutDownTiles* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"FadeOutDownTiles",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::FadeOutDownTiles*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_FadeOutDownTiles_testFunc'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		cocos2d::Size arg0;
		double arg1;
		ok &= luaval_to_size(tolua_S, 2, &arg0);
		ok &= luaval_to_number(tolua_S, 3,&arg1);
		if(!ok)
			return 0;
		float ret = cobj->testFunc(arg0, arg1);
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FadeOutDownTiles_testFunc'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_FadeOutDownTiles_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"FadeOutDownTiles",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 2) {
		double arg0;
		cocos2d::Size arg1;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_size(tolua_S, 3, &arg1);
		if(!ok)
			return 0;
		cocos2d::FadeOutDownTiles* ret = cocos2d::FadeOutDownTiles::create(arg0, arg1);
		tolua_pushusertype(tolua_S,ret,"FadeOutDownTiles");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FadeOutDownTiles_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_FadeOutDownTiles_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (FadeOutDownTiles)");
	return 0;
}

int lua_register_cocos2dx_FadeOutDownTiles(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"FadeOutDownTiles");
	tolua_cclass(tolua_S,"FadeOutDownTiles","FadeOutDownTiles","FadeOutUpTiles",NULL);

	tolua_beginmodule(tolua_S,"FadeOutDownTiles");
		tolua_function(tolua_S,"clone",lua_cocos2dx_FadeOutDownTiles_clone);
		tolua_function(tolua_S,"testFunc",lua_cocos2dx_FadeOutDownTiles_testFunc);
		tolua_function(tolua_S,"create", lua_cocos2dx_FadeOutDownTiles_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_TurnOffTiles_turnOnTile(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TurnOffTiles* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TurnOffTiles",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TurnOffTiles*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TurnOffTiles_turnOnTile'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Point arg0;
		ok &= luaval_to_point(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->turnOnTile(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TurnOffTiles_turnOnTile'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TurnOffTiles_startWithTarget(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TurnOffTiles* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TurnOffTiles",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TurnOffTiles*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TurnOffTiles_startWithTarget'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Node* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->startWithTarget(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TurnOffTiles_startWithTarget'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TurnOffTiles_turnOffTile(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TurnOffTiles* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TurnOffTiles",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TurnOffTiles*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TurnOffTiles_turnOffTile'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Point arg0;
		ok &= luaval_to_point(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->turnOffTile(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TurnOffTiles_turnOffTile'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TurnOffTiles_shuffle(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TurnOffTiles* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TurnOffTiles",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TurnOffTiles*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TurnOffTiles_shuffle'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		unsigned int* arg0;
		unsigned int arg1;
		#pragma warning NO CONVERSION TO NATIVE FOR unsigned int*;
		ok &= luaval_to_uint32(tolua_S, 3,&arg1);
		if(!ok)
			return 0;
		cobj->shuffle(arg0, arg1);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TurnOffTiles_shuffle'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TurnOffTiles_initWithDuration(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TurnOffTiles* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TurnOffTiles",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TurnOffTiles*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TurnOffTiles_initWithDuration'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 3) {
		double arg0;
		cocos2d::Size arg1;
		unsigned int arg2;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_size(tolua_S, 3, &arg1);
		ok &= luaval_to_uint32(tolua_S, 4,&arg2);
		if(!ok)
			return 0;
		bool ret = cobj->initWithDuration(arg0, arg1, arg2);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 3);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TurnOffTiles_initWithDuration'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TurnOffTiles_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TurnOffTiles* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TurnOffTiles",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TurnOffTiles*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TurnOffTiles_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::TurnOffTiles* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"TurnOffTiles");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TurnOffTiles_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TurnOffTiles_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TurnOffTiles* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TurnOffTiles",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TurnOffTiles*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TurnOffTiles_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TurnOffTiles_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TurnOffTiles_create(lua_State* tolua_S)
{
	int argc = 0;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"TurnOffTiles",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S)-1;

	do {
		if (argc == 3) {
			double arg0;
			ok &= luaval_to_number(tolua_S, 2,&arg0);
			if (!ok) { ok = true; break; }
			cocos2d::Size arg1;
			ok &= luaval_to_size(tolua_S, 3, &arg1);
			if (!ok) { ok = true; break; }
			unsigned int arg2;
			ok &= luaval_to_uint32(tolua_S, 4,&arg2);
			if (!ok) { ok = true; break; }
			cocos2d::TurnOffTiles* ret = cocos2d::TurnOffTiles::create(arg0, arg1, arg2);
			tolua_pushusertype(tolua_S,ret,"TurnOffTiles");
			return 1;
		}
	} while (0);
	do {
		if (argc == 2) {
			double arg0;
			ok &= luaval_to_number(tolua_S, 2,&arg0);
			if (!ok) { ok = true; break; }
			cocos2d::Size arg1;
			ok &= luaval_to_size(tolua_S, 3, &arg1);
			if (!ok) { ok = true; break; }
			cocos2d::TurnOffTiles* ret = cocos2d::TurnOffTiles::create(arg0, arg1);
			tolua_pushusertype(tolua_S,ret,"TurnOffTiles");
			return 1;
		}
	} while (0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TurnOffTiles_create'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TurnOffTiles_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (TurnOffTiles)");
	return 0;
}

int lua_register_cocos2dx_TurnOffTiles(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"TurnOffTiles");
	tolua_cclass(tolua_S,"TurnOffTiles","TurnOffTiles","TiledGrid3DAction",NULL);

	tolua_beginmodule(tolua_S,"TurnOffTiles");
		tolua_function(tolua_S,"turnOnTile",lua_cocos2dx_TurnOffTiles_turnOnTile);
		tolua_function(tolua_S,"startWithTarget",lua_cocos2dx_TurnOffTiles_startWithTarget);
		tolua_function(tolua_S,"turnOffTile",lua_cocos2dx_TurnOffTiles_turnOffTile);
		tolua_function(tolua_S,"shuffle",lua_cocos2dx_TurnOffTiles_shuffle);
		tolua_function(tolua_S,"initWithDuration",lua_cocos2dx_TurnOffTiles_initWithDuration);
		tolua_function(tolua_S,"clone",lua_cocos2dx_TurnOffTiles_clone);
		tolua_function(tolua_S,"update",lua_cocos2dx_TurnOffTiles_update);
		tolua_function(tolua_S,"create", lua_cocos2dx_TurnOffTiles_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_WavesTiles3D_setAmplitudeRate(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::WavesTiles3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"WavesTiles3D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::WavesTiles3D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_WavesTiles3D_setAmplitudeRate'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setAmplitudeRate(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_WavesTiles3D_setAmplitudeRate'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_WavesTiles3D_initWithDuration(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::WavesTiles3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"WavesTiles3D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::WavesTiles3D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_WavesTiles3D_initWithDuration'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 4) {
		double arg0;
		cocos2d::Size arg1;
		unsigned int arg2;
		double arg3;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_size(tolua_S, 3, &arg1);
		ok &= luaval_to_uint32(tolua_S, 4,&arg2);
		ok &= luaval_to_number(tolua_S, 5,&arg3);
		if(!ok)
			return 0;
		bool ret = cobj->initWithDuration(arg0, arg1, arg2, arg3);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 4);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_WavesTiles3D_initWithDuration'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_WavesTiles3D_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::WavesTiles3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"WavesTiles3D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::WavesTiles3D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_WavesTiles3D_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::WavesTiles3D* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"WavesTiles3D");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_WavesTiles3D_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_WavesTiles3D_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::WavesTiles3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"WavesTiles3D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::WavesTiles3D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_WavesTiles3D_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_WavesTiles3D_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_WavesTiles3D_getAmplitudeRate(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::WavesTiles3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"WavesTiles3D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::WavesTiles3D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_WavesTiles3D_getAmplitudeRate'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getAmplitudeRate();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_WavesTiles3D_getAmplitudeRate'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_WavesTiles3D_setAmplitude(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::WavesTiles3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"WavesTiles3D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::WavesTiles3D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_WavesTiles3D_setAmplitude'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setAmplitude(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_WavesTiles3D_setAmplitude'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_WavesTiles3D_getAmplitude(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::WavesTiles3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"WavesTiles3D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::WavesTiles3D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_WavesTiles3D_getAmplitude'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getAmplitude();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_WavesTiles3D_getAmplitude'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_WavesTiles3D_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"WavesTiles3D",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 4) {
		double arg0;
		cocos2d::Size arg1;
		unsigned int arg2;
		double arg3;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_size(tolua_S, 3, &arg1);
		ok &= luaval_to_uint32(tolua_S, 4,&arg2);
		ok &= luaval_to_number(tolua_S, 5,&arg3);
		if(!ok)
			return 0;
		cocos2d::WavesTiles3D* ret = cocos2d::WavesTiles3D::create(arg0, arg1, arg2, arg3);
		tolua_pushusertype(tolua_S,ret,"WavesTiles3D");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 4);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_WavesTiles3D_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_WavesTiles3D_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (WavesTiles3D)");
	return 0;
}

int lua_register_cocos2dx_WavesTiles3D(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"WavesTiles3D");
	tolua_cclass(tolua_S,"WavesTiles3D","WavesTiles3D","TiledGrid3DAction",NULL);

	tolua_beginmodule(tolua_S,"WavesTiles3D");
		tolua_function(tolua_S,"setAmplitudeRate",lua_cocos2dx_WavesTiles3D_setAmplitudeRate);
		tolua_function(tolua_S,"initWithDuration",lua_cocos2dx_WavesTiles3D_initWithDuration);
		tolua_function(tolua_S,"clone",lua_cocos2dx_WavesTiles3D_clone);
		tolua_function(tolua_S,"update",lua_cocos2dx_WavesTiles3D_update);
		tolua_function(tolua_S,"getAmplitudeRate",lua_cocos2dx_WavesTiles3D_getAmplitudeRate);
		tolua_function(tolua_S,"setAmplitude",lua_cocos2dx_WavesTiles3D_setAmplitude);
		tolua_function(tolua_S,"getAmplitude",lua_cocos2dx_WavesTiles3D_getAmplitude);
		tolua_function(tolua_S,"create", lua_cocos2dx_WavesTiles3D_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_JumpTiles3D_setAmplitudeRate(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::JumpTiles3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"JumpTiles3D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::JumpTiles3D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_JumpTiles3D_setAmplitudeRate'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setAmplitudeRate(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_JumpTiles3D_setAmplitudeRate'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_JumpTiles3D_initWithDuration(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::JumpTiles3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"JumpTiles3D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::JumpTiles3D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_JumpTiles3D_initWithDuration'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 4) {
		double arg0;
		cocos2d::Size arg1;
		unsigned int arg2;
		double arg3;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_size(tolua_S, 3, &arg1);
		ok &= luaval_to_uint32(tolua_S, 4,&arg2);
		ok &= luaval_to_number(tolua_S, 5,&arg3);
		if(!ok)
			return 0;
		bool ret = cobj->initWithDuration(arg0, arg1, arg2, arg3);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 4);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_JumpTiles3D_initWithDuration'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_JumpTiles3D_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::JumpTiles3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"JumpTiles3D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::JumpTiles3D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_JumpTiles3D_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::JumpTiles3D* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"JumpTiles3D");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_JumpTiles3D_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_JumpTiles3D_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::JumpTiles3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"JumpTiles3D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::JumpTiles3D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_JumpTiles3D_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_JumpTiles3D_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_JumpTiles3D_getAmplitudeRate(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::JumpTiles3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"JumpTiles3D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::JumpTiles3D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_JumpTiles3D_getAmplitudeRate'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getAmplitudeRate();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_JumpTiles3D_getAmplitudeRate'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_JumpTiles3D_setAmplitude(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::JumpTiles3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"JumpTiles3D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::JumpTiles3D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_JumpTiles3D_setAmplitude'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setAmplitude(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_JumpTiles3D_setAmplitude'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_JumpTiles3D_getAmplitude(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::JumpTiles3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"JumpTiles3D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::JumpTiles3D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_JumpTiles3D_getAmplitude'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getAmplitude();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_JumpTiles3D_getAmplitude'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_JumpTiles3D_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"JumpTiles3D",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 4) {
		double arg0;
		cocos2d::Size arg1;
		unsigned int arg2;
		double arg3;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_size(tolua_S, 3, &arg1);
		ok &= luaval_to_uint32(tolua_S, 4,&arg2);
		ok &= luaval_to_number(tolua_S, 5,&arg3);
		if(!ok)
			return 0;
		cocos2d::JumpTiles3D* ret = cocos2d::JumpTiles3D::create(arg0, arg1, arg2, arg3);
		tolua_pushusertype(tolua_S,ret,"JumpTiles3D");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 4);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_JumpTiles3D_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_JumpTiles3D_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (JumpTiles3D)");
	return 0;
}

int lua_register_cocos2dx_JumpTiles3D(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"JumpTiles3D");
	tolua_cclass(tolua_S,"JumpTiles3D","JumpTiles3D","TiledGrid3DAction",NULL);

	tolua_beginmodule(tolua_S,"JumpTiles3D");
		tolua_function(tolua_S,"setAmplitudeRate",lua_cocos2dx_JumpTiles3D_setAmplitudeRate);
		tolua_function(tolua_S,"initWithDuration",lua_cocos2dx_JumpTiles3D_initWithDuration);
		tolua_function(tolua_S,"clone",lua_cocos2dx_JumpTiles3D_clone);
		tolua_function(tolua_S,"update",lua_cocos2dx_JumpTiles3D_update);
		tolua_function(tolua_S,"getAmplitudeRate",lua_cocos2dx_JumpTiles3D_getAmplitudeRate);
		tolua_function(tolua_S,"setAmplitude",lua_cocos2dx_JumpTiles3D_setAmplitude);
		tolua_function(tolua_S,"getAmplitude",lua_cocos2dx_JumpTiles3D_getAmplitude);
		tolua_function(tolua_S,"create", lua_cocos2dx_JumpTiles3D_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_SplitRows_startWithTarget(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SplitRows* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SplitRows",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SplitRows*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SplitRows_startWithTarget'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Node* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->startWithTarget(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SplitRows_startWithTarget'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SplitRows_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SplitRows* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SplitRows",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SplitRows*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SplitRows_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::SplitRows* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"SplitRows");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SplitRows_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SplitRows_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SplitRows* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SplitRows",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SplitRows*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SplitRows_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SplitRows_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SplitRows_initWithDuration(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SplitRows* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SplitRows",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SplitRows*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SplitRows_initWithDuration'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		double arg0;
		unsigned int arg1;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_uint32(tolua_S, 3,&arg1);
		if(!ok)
			return 0;
		bool ret = cobj->initWithDuration(arg0, arg1);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SplitRows_initWithDuration'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SplitRows_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"SplitRows",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 2) {
		double arg0;
		unsigned int arg1;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_uint32(tolua_S, 3,&arg1);
		if(!ok)
			return 0;
		cocos2d::SplitRows* ret = cocos2d::SplitRows::create(arg0, arg1);
		tolua_pushusertype(tolua_S,ret,"SplitRows");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SplitRows_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_SplitRows_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (SplitRows)");
	return 0;
}

int lua_register_cocos2dx_SplitRows(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"SplitRows");
	tolua_cclass(tolua_S,"SplitRows","SplitRows","TiledGrid3DAction",NULL);

	tolua_beginmodule(tolua_S,"SplitRows");
		tolua_function(tolua_S,"startWithTarget",lua_cocos2dx_SplitRows_startWithTarget);
		tolua_function(tolua_S,"clone",lua_cocos2dx_SplitRows_clone);
		tolua_function(tolua_S,"update",lua_cocos2dx_SplitRows_update);
		tolua_function(tolua_S,"initWithDuration",lua_cocos2dx_SplitRows_initWithDuration);
		tolua_function(tolua_S,"create", lua_cocos2dx_SplitRows_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_SplitCols_startWithTarget(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SplitCols* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SplitCols",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SplitCols*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SplitCols_startWithTarget'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Node* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->startWithTarget(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SplitCols_startWithTarget'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SplitCols_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SplitCols* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SplitCols",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SplitCols*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SplitCols_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::SplitCols* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"SplitCols");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SplitCols_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SplitCols_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SplitCols* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SplitCols",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SplitCols*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SplitCols_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SplitCols_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SplitCols_initWithDuration(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SplitCols* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SplitCols",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SplitCols*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SplitCols_initWithDuration'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		double arg0;
		unsigned int arg1;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_uint32(tolua_S, 3,&arg1);
		if(!ok)
			return 0;
		bool ret = cobj->initWithDuration(arg0, arg1);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SplitCols_initWithDuration'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SplitCols_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"SplitCols",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 2) {
		double arg0;
		unsigned int arg1;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_uint32(tolua_S, 3,&arg1);
		if(!ok)
			return 0;
		cocos2d::SplitCols* ret = cocos2d::SplitCols::create(arg0, arg1);
		tolua_pushusertype(tolua_S,ret,"SplitCols");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SplitCols_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_SplitCols_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (SplitCols)");
	return 0;
}

int lua_register_cocos2dx_SplitCols(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"SplitCols");
	tolua_cclass(tolua_S,"SplitCols","SplitCols","TiledGrid3DAction",NULL);

	tolua_beginmodule(tolua_S,"SplitCols");
		tolua_function(tolua_S,"startWithTarget",lua_cocos2dx_SplitCols_startWithTarget);
		tolua_function(tolua_S,"clone",lua_cocos2dx_SplitCols_clone);
		tolua_function(tolua_S,"update",lua_cocos2dx_SplitCols_update);
		tolua_function(tolua_S,"initWithDuration",lua_cocos2dx_SplitCols_initWithDuration);
		tolua_function(tolua_S,"create", lua_cocos2dx_SplitCols_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_ActionTween_startWithTarget(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ActionTween* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ActionTween",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ActionTween*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ActionTween_startWithTarget'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Node* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->startWithTarget(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ActionTween_startWithTarget'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ActionTween_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ActionTween* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ActionTween",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ActionTween*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ActionTween_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::ActionTween* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"ActionTween");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ActionTween_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ActionTween_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ActionTween* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ActionTween",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ActionTween*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ActionTween_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ActionTween_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ActionTween_initWithDuration(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ActionTween* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ActionTween",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ActionTween*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ActionTween_initWithDuration'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 4) {
		double arg0;
		const char* arg1;
		double arg2;
		double arg3;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp); arg1 = arg1_tmp.c_str();
		ok &= luaval_to_number(tolua_S, 4,&arg2);
		ok &= luaval_to_number(tolua_S, 5,&arg3);
		if(!ok)
			return 0;
		bool ret = cobj->initWithDuration(arg0, arg1, arg2, arg3);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 4);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ActionTween_initWithDuration'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ActionTween_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ActionTween* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ActionTween",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ActionTween*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ActionTween_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::ActionTween* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"ActionTween");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ActionTween_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ActionTween_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"ActionTween",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 4) {
		double arg0;
		const char* arg1;
		double arg2;
		double arg3;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp); arg1 = arg1_tmp.c_str();
		ok &= luaval_to_number(tolua_S, 4,&arg2);
		ok &= luaval_to_number(tolua_S, 5,&arg3);
		if(!ok)
			return 0;
		cocos2d::ActionTween* ret = cocos2d::ActionTween::create(arg0, arg1, arg2, arg3);
		tolua_pushusertype(tolua_S,ret,"ActionTween");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 4);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ActionTween_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_ActionTween_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (ActionTween)");
	return 0;
}

int lua_register_cocos2dx_ActionTween(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"ActionTween");
	tolua_cclass(tolua_S,"ActionTween","ActionTween","ActionInterval",NULL);

	tolua_beginmodule(tolua_S,"ActionTween");
		tolua_function(tolua_S,"startWithTarget",lua_cocos2dx_ActionTween_startWithTarget);
		tolua_function(tolua_S,"clone",lua_cocos2dx_ActionTween_clone);
		tolua_function(tolua_S,"update",lua_cocos2dx_ActionTween_update);
		tolua_function(tolua_S,"initWithDuration",lua_cocos2dx_ActionTween_initWithDuration);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_ActionTween_reverse);
		tolua_function(tolua_S,"create", lua_cocos2dx_ActionTween_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_CardinalSplineTo_startWithTarget(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::CardinalSplineTo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"CardinalSplineTo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::CardinalSplineTo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_CardinalSplineTo_startWithTarget'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Node* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->startWithTarget(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_CardinalSplineTo_startWithTarget'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_CardinalSplineTo_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::CardinalSplineTo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"CardinalSplineTo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::CardinalSplineTo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_CardinalSplineTo_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::CardinalSplineTo* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"CardinalSplineTo");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_CardinalSplineTo_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_CardinalSplineTo_initWithDuration(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::CardinalSplineTo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"CardinalSplineTo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::CardinalSplineTo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_CardinalSplineTo_initWithDuration'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 3) {
		double arg0;
		cocos2d::PointArray* arg1;
		double arg2;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"PointArray",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::PointArray*)tolua_tousertype(tolua_S,3,0);
		};
		ok &= luaval_to_number(tolua_S, 4,&arg2);
		if(!ok)
			return 0;
		bool ret = cobj->initWithDuration(arg0, arg1, arg2);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 3);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_CardinalSplineTo_initWithDuration'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_CardinalSplineTo_getPoints(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::CardinalSplineTo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"CardinalSplineTo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::CardinalSplineTo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_CardinalSplineTo_getPoints'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::PointArray* ret = cobj->getPoints();
		tolua_pushusertype(tolua_S,ret,"PointArray");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_CardinalSplineTo_getPoints'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_CardinalSplineTo_updatePosition(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::CardinalSplineTo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"CardinalSplineTo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::CardinalSplineTo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_CardinalSplineTo_updatePosition'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Point arg0;
		ok &= luaval_to_point(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->updatePosition(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_CardinalSplineTo_updatePosition'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_CardinalSplineTo_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::CardinalSplineTo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"CardinalSplineTo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::CardinalSplineTo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_CardinalSplineTo_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::CardinalSplineTo* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"CardinalSplineTo");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_CardinalSplineTo_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_CardinalSplineTo_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::CardinalSplineTo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"CardinalSplineTo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::CardinalSplineTo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_CardinalSplineTo_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_CardinalSplineTo_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_CardinalSplineTo_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::CardinalSplineTo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::CardinalSplineTo();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"CardinalSplineTo");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_CardinalSplineTo_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_CardinalSplineTo_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (CardinalSplineTo)");
	return 0;
}

int lua_register_cocos2dx_CardinalSplineTo(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"CardinalSplineTo");
	tolua_cclass(tolua_S,"CardinalSplineTo","CardinalSplineTo","ActionInterval",NULL);

	tolua_beginmodule(tolua_S,"CardinalSplineTo");
		tolua_function(tolua_S,"startWithTarget",lua_cocos2dx_CardinalSplineTo_startWithTarget);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_CardinalSplineTo_reverse);
		tolua_function(tolua_S,"initWithDuration",lua_cocos2dx_CardinalSplineTo_initWithDuration);
		tolua_function(tolua_S,"getPoints",lua_cocos2dx_CardinalSplineTo_getPoints);
		tolua_function(tolua_S,"updatePosition",lua_cocos2dx_CardinalSplineTo_updatePosition);
		tolua_function(tolua_S,"clone",lua_cocos2dx_CardinalSplineTo_clone);
		tolua_function(tolua_S,"update",lua_cocos2dx_CardinalSplineTo_update);
		tolua_function(tolua_S,"new",lua_cocos2dx_CardinalSplineTo_constructor);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_CardinalSplineBy_startWithTarget(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::CardinalSplineBy* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"CardinalSplineBy",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::CardinalSplineBy*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_CardinalSplineBy_startWithTarget'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Node* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->startWithTarget(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_CardinalSplineBy_startWithTarget'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_CardinalSplineBy_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::CardinalSplineBy* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"CardinalSplineBy",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::CardinalSplineBy*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_CardinalSplineBy_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::CardinalSplineBy* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"CardinalSplineBy");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_CardinalSplineBy_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_CardinalSplineBy_updatePosition(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::CardinalSplineBy* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"CardinalSplineBy",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::CardinalSplineBy*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_CardinalSplineBy_updatePosition'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Point arg0;
		ok &= luaval_to_point(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->updatePosition(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_CardinalSplineBy_updatePosition'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_CardinalSplineBy_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::CardinalSplineBy* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"CardinalSplineBy",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::CardinalSplineBy*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_CardinalSplineBy_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::CardinalSplineBy* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"CardinalSplineBy");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_CardinalSplineBy_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_CardinalSplineBy_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::CardinalSplineBy* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::CardinalSplineBy();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"CardinalSplineBy");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_CardinalSplineBy_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_CardinalSplineBy_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (CardinalSplineBy)");
	return 0;
}

int lua_register_cocos2dx_CardinalSplineBy(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"CardinalSplineBy");
	tolua_cclass(tolua_S,"CardinalSplineBy","CardinalSplineBy","CardinalSplineTo",NULL);

	tolua_beginmodule(tolua_S,"CardinalSplineBy");
		tolua_function(tolua_S,"startWithTarget",lua_cocos2dx_CardinalSplineBy_startWithTarget);
		tolua_function(tolua_S,"clone",lua_cocos2dx_CardinalSplineBy_clone);
		tolua_function(tolua_S,"updatePosition",lua_cocos2dx_CardinalSplineBy_updatePosition);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_CardinalSplineBy_reverse);
		tolua_function(tolua_S,"new",lua_cocos2dx_CardinalSplineBy_constructor);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_CatmullRomTo_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::CatmullRomTo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"CatmullRomTo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::CatmullRomTo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_CatmullRomTo_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::CatmullRomTo* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"CatmullRomTo");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_CatmullRomTo_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_CatmullRomTo_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::CatmullRomTo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"CatmullRomTo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::CatmullRomTo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_CatmullRomTo_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::CatmullRomTo* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"CatmullRomTo");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_CatmullRomTo_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_CatmullRomTo_initWithDuration(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::CatmullRomTo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"CatmullRomTo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::CatmullRomTo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_CatmullRomTo_initWithDuration'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		double arg0;
		cocos2d::PointArray* arg1;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"PointArray",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::PointArray*)tolua_tousertype(tolua_S,3,0);
		};
		if(!ok)
			return 0;
		bool ret = cobj->initWithDuration(arg0, arg1);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_CatmullRomTo_initWithDuration'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_CatmullRomTo_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (CatmullRomTo)");
	return 0;
}

int lua_register_cocos2dx_CatmullRomTo(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"CatmullRomTo");
	tolua_cclass(tolua_S,"CatmullRomTo","CatmullRomTo","CardinalSplineTo",NULL);

	tolua_beginmodule(tolua_S,"CatmullRomTo");
		tolua_function(tolua_S,"clone",lua_cocos2dx_CatmullRomTo_clone);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_CatmullRomTo_reverse);
		tolua_function(tolua_S,"initWithDuration",lua_cocos2dx_CatmullRomTo_initWithDuration);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_CatmullRomBy_clone(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::CatmullRomBy* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"CatmullRomBy",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::CatmullRomBy*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_CatmullRomBy_clone'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::CatmullRomBy* ret = cobj->clone();
		tolua_pushusertype(tolua_S,ret,"CatmullRomBy");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_CatmullRomBy_clone'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_CatmullRomBy_reverse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::CatmullRomBy* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"CatmullRomBy",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::CatmullRomBy*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_CatmullRomBy_reverse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::CatmullRomBy* ret = cobj->reverse();
		tolua_pushusertype(tolua_S,ret,"CatmullRomBy");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_CatmullRomBy_reverse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_CatmullRomBy_initWithDuration(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::CatmullRomBy* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"CatmullRomBy",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::CatmullRomBy*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_CatmullRomBy_initWithDuration'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		double arg0;
		cocos2d::PointArray* arg1;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"PointArray",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::PointArray*)tolua_tousertype(tolua_S,3,0);
		};
		if(!ok)
			return 0;
		bool ret = cobj->initWithDuration(arg0, arg1);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_CatmullRomBy_initWithDuration'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_CatmullRomBy_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (CatmullRomBy)");
	return 0;
}

int lua_register_cocos2dx_CatmullRomBy(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"CatmullRomBy");
	tolua_cclass(tolua_S,"CatmullRomBy","CatmullRomBy","CardinalSplineBy",NULL);

	tolua_beginmodule(tolua_S,"CatmullRomBy");
		tolua_function(tolua_S,"clone",lua_cocos2dx_CatmullRomBy_clone);
		tolua_function(tolua_S,"reverse",lua_cocos2dx_CatmullRomBy_reverse);
		tolua_function(tolua_S,"initWithDuration",lua_cocos2dx_CatmullRomBy_initWithDuration);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_AtlasNode_draw(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::AtlasNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"AtlasNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::AtlasNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_AtlasNode_draw'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->draw();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_AtlasNode_draw'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_AtlasNode_updateAtlasValues(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::AtlasNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"AtlasNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::AtlasNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_AtlasNode_updateAtlasValues'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->updateAtlasValues();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_AtlasNode_updateAtlasValues'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_AtlasNode_initWithTexture(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::AtlasNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"AtlasNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::AtlasNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_AtlasNode_initWithTexture'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 4) {
		cocos2d::Texture2D* arg0;
		unsigned int arg1;
		unsigned int arg2;
		unsigned int arg3;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Texture2D",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Texture2D*)tolua_tousertype(tolua_S,2,0);
		};
		ok &= luaval_to_uint32(tolua_S, 3,&arg1);
		ok &= luaval_to_uint32(tolua_S, 4,&arg2);
		ok &= luaval_to_uint32(tolua_S, 5,&arg3);
		if(!ok)
			return 0;
		bool ret = cobj->initWithTexture(arg0, arg1, arg2, arg3);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 4);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_AtlasNode_initWithTexture'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_AtlasNode_setColor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::AtlasNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"AtlasNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::AtlasNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_AtlasNode_setColor'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Color3B arg0;
		ok &= luaval_to_color3b(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->setColor(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_AtlasNode_setColor'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_AtlasNode_setOpacity(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::AtlasNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"AtlasNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::AtlasNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_AtlasNode_setOpacity'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		uint16_t arg0;
		ok &= luaval_to_uint16(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setOpacity(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_AtlasNode_setOpacity'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_AtlasNode_getTexture(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::AtlasNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"AtlasNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::AtlasNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_AtlasNode_getTexture'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Texture2D* ret = cobj->getTexture();
		tolua_pushusertype(tolua_S,ret,"Texture2D");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_AtlasNode_getTexture'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_AtlasNode_setTextureAtlas(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::AtlasNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"AtlasNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::AtlasNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_AtlasNode_setTextureAtlas'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::TextureAtlas* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"TextureAtlas",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::TextureAtlas*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->setTextureAtlas(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_AtlasNode_setTextureAtlas'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_AtlasNode_getTextureAtlas(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::AtlasNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"AtlasNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::AtlasNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_AtlasNode_getTextureAtlas'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::TextureAtlas* ret = cobj->getTextureAtlas();
		tolua_pushusertype(tolua_S,ret,"TextureAtlas");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_AtlasNode_getTextureAtlas'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_AtlasNode_setOpacityModifyRGB(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::AtlasNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"AtlasNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::AtlasNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_AtlasNode_setOpacityModifyRGB'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setOpacityModifyRGB(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_AtlasNode_setOpacityModifyRGB'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_AtlasNode_getQuadsToDraw(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::AtlasNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"AtlasNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::AtlasNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_AtlasNode_getQuadsToDraw'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		unsigned int ret = cobj->getQuadsToDraw();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_AtlasNode_getQuadsToDraw'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_AtlasNode_setTexture(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::AtlasNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"AtlasNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::AtlasNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_AtlasNode_setTexture'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Texture2D* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Texture2D",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Texture2D*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->setTexture(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_AtlasNode_setTexture'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_AtlasNode_getColor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::AtlasNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"AtlasNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::AtlasNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_AtlasNode_getColor'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Color3B ret = cobj->getColor();
		color3b_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_AtlasNode_getColor'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_AtlasNode_initWithTileFile(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::AtlasNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"AtlasNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::AtlasNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_AtlasNode_initWithTileFile'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 4) {
		const char* arg0;
		unsigned int arg1;
		unsigned int arg2;
		unsigned int arg3;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		ok &= luaval_to_uint32(tolua_S, 3,&arg1);
		ok &= luaval_to_uint32(tolua_S, 4,&arg2);
		ok &= luaval_to_uint32(tolua_S, 5,&arg3);
		if(!ok)
			return 0;
		bool ret = cobj->initWithTileFile(arg0, arg1, arg2, arg3);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 4);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_AtlasNode_initWithTileFile'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_AtlasNode_isOpacityModifyRGB(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::AtlasNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"AtlasNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::AtlasNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_AtlasNode_isOpacityModifyRGB'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->isOpacityModifyRGB();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_AtlasNode_isOpacityModifyRGB'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_AtlasNode_setQuadsToDraw(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::AtlasNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"AtlasNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::AtlasNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_AtlasNode_setQuadsToDraw'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		unsigned int arg0;
		ok &= luaval_to_uint32(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setQuadsToDraw(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_AtlasNode_setQuadsToDraw'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_AtlasNode_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"AtlasNode",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 4) {
		const char* arg0;
		unsigned int arg1;
		unsigned int arg2;
		unsigned int arg3;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		ok &= luaval_to_uint32(tolua_S, 3,&arg1);
		ok &= luaval_to_uint32(tolua_S, 4,&arg2);
		ok &= luaval_to_uint32(tolua_S, 5,&arg3);
		if(!ok)
			return 0;
		cocos2d::AtlasNode* ret = cocos2d::AtlasNode::create(arg0, arg1, arg2, arg3);
		tolua_pushusertype(tolua_S,ret,"AtlasNode");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 4);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_AtlasNode_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_AtlasNode_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::AtlasNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::AtlasNode();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"AtlasNode");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_AtlasNode_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_AtlasNode_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (AtlasNode)");
	return 0;
}

int lua_register_cocos2dx_AtlasNode(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"AtlasNode");
	tolua_cclass(tolua_S,"AtlasNode","AtlasNode","NodeRGBA",NULL);

	tolua_beginmodule(tolua_S,"AtlasNode");
		tolua_function(tolua_S,"draw",lua_cocos2dx_AtlasNode_draw);
		tolua_function(tolua_S,"updateAtlasValues",lua_cocos2dx_AtlasNode_updateAtlasValues);
		tolua_function(tolua_S,"initWithTexture",lua_cocos2dx_AtlasNode_initWithTexture);
		tolua_function(tolua_S,"setColor",lua_cocos2dx_AtlasNode_setColor);
		tolua_function(tolua_S,"setOpacity",lua_cocos2dx_AtlasNode_setOpacity);
		tolua_function(tolua_S,"getTexture",lua_cocos2dx_AtlasNode_getTexture);
		tolua_function(tolua_S,"setTextureAtlas",lua_cocos2dx_AtlasNode_setTextureAtlas);
		tolua_function(tolua_S,"getTextureAtlas",lua_cocos2dx_AtlasNode_getTextureAtlas);
		tolua_function(tolua_S,"setOpacityModifyRGB",lua_cocos2dx_AtlasNode_setOpacityModifyRGB);
		tolua_function(tolua_S,"getQuadsToDraw",lua_cocos2dx_AtlasNode_getQuadsToDraw);
		tolua_function(tolua_S,"setTexture",lua_cocos2dx_AtlasNode_setTexture);
		tolua_function(tolua_S,"getColor",lua_cocos2dx_AtlasNode_getColor);
		tolua_function(tolua_S,"initWithTileFile",lua_cocos2dx_AtlasNode_initWithTileFile);
		tolua_function(tolua_S,"isOpacityModifyRGB",lua_cocos2dx_AtlasNode_isOpacityModifyRGB);
		tolua_function(tolua_S,"setQuadsToDraw",lua_cocos2dx_AtlasNode_setQuadsToDraw);
		tolua_function(tolua_S,"new",lua_cocos2dx_AtlasNode_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_AtlasNode_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_DrawNode_draw(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::DrawNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"DrawNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::DrawNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_DrawNode_draw'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->draw();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_DrawNode_draw'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_DrawNode_clear(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::DrawNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"DrawNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::DrawNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_DrawNode_clear'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->clear();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_DrawNode_clear'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_DrawNode_init(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::DrawNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"DrawNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::DrawNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_DrawNode_init'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->init();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_DrawNode_init'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_DrawNode_drawDot(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::DrawNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"DrawNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::DrawNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_DrawNode_drawDot'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 3) {
		cocos2d::Point arg0;
		double arg1;
		cocos2d::Color4F arg2;
		ok &= luaval_to_point(tolua_S, 2, &arg0);
		ok &= luaval_to_number(tolua_S, 3,&arg1);
		ok &=luaval_to_color4f(tolua_S, 4, &arg2);
		if(!ok)
			return 0;
		cobj->drawDot(arg0, arg1, arg2);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 3);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_DrawNode_drawDot'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_DrawNode_drawSegment(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::DrawNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"DrawNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::DrawNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_DrawNode_drawSegment'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 4) {
		cocos2d::Point arg0;
		cocos2d::Point arg1;
		double arg2;
		cocos2d::Color4F arg3;
		ok &= luaval_to_point(tolua_S, 2, &arg0);
		ok &= luaval_to_point(tolua_S, 3, &arg1);
		ok &= luaval_to_number(tolua_S, 4,&arg2);
		ok &=luaval_to_color4f(tolua_S, 5, &arg3);
		if(!ok)
			return 0;
		cobj->drawSegment(arg0, arg1, arg2, arg3);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 4);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_DrawNode_drawSegment'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_DrawNode_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"DrawNode",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 0) {
		if(!ok)
			return 0;
		cocos2d::DrawNode* ret = cocos2d::DrawNode::create();
		tolua_pushusertype(tolua_S,ret,"DrawNode");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_DrawNode_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_DrawNode_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::DrawNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::DrawNode();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"DrawNode");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_DrawNode_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_DrawNode_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (DrawNode)");
	return 0;
}

int lua_register_cocos2dx_DrawNode(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"DrawNode");
	tolua_cclass(tolua_S,"DrawNode","DrawNode","Node",NULL);

	tolua_beginmodule(tolua_S,"DrawNode");
		tolua_function(tolua_S,"draw",lua_cocos2dx_DrawNode_draw);
		tolua_function(tolua_S,"clear",lua_cocos2dx_DrawNode_clear);
		tolua_function(tolua_S,"init",lua_cocos2dx_DrawNode_init);
		tolua_function(tolua_S,"drawDot",lua_cocos2dx_DrawNode_drawDot);
		tolua_function(tolua_S,"drawSegment",lua_cocos2dx_DrawNode_drawSegment);
		tolua_function(tolua_S,"new",lua_cocos2dx_DrawNode_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_DrawNode_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_Camera_locate(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Camera* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Camera",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Camera*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Camera_locate'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->locate();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Camera_locate'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Camera_restore(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Camera* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Camera",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Camera*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Camera_restore'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->restore();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Camera_restore'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Camera_setEyeXYZ(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Camera* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Camera",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Camera*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Camera_setEyeXYZ'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 3) {
		double arg0;
		double arg1;
		double arg2;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_number(tolua_S, 3,&arg1);
		ok &= luaval_to_number(tolua_S, 4,&arg2);
		if(!ok)
			return 0;
		cobj->setEyeXYZ(arg0, arg1, arg2);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 3);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Camera_setEyeXYZ'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Camera_setCenterXYZ(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Camera* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Camera",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Camera*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Camera_setCenterXYZ'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 3) {
		double arg0;
		double arg1;
		double arg2;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_number(tolua_S, 3,&arg1);
		ok &= luaval_to_number(tolua_S, 4,&arg2);
		if(!ok)
			return 0;
		cobj->setCenterXYZ(arg0, arg1, arg2);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 3);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Camera_setCenterXYZ'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Camera_isDirty(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Camera* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Camera",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Camera*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Camera_isDirty'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->isDirty();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Camera_isDirty'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Camera_init(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Camera* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Camera",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Camera*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Camera_init'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->init();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Camera_init'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Camera_setDirty(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Camera* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Camera",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Camera*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Camera_setDirty'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setDirty(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Camera_setDirty'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Camera_setUpXYZ(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Camera* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Camera",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Camera*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Camera_setUpXYZ'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 3) {
		double arg0;
		double arg1;
		double arg2;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_number(tolua_S, 3,&arg1);
		ok &= luaval_to_number(tolua_S, 4,&arg2);
		if(!ok)
			return 0;
		cobj->setUpXYZ(arg0, arg1, arg2);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 3);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Camera_setUpXYZ'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Camera_getZEye(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"Camera",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 0) {
		if(!ok)
			return 0;
		float ret = cocos2d::Camera::getZEye();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Camera_getZEye'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_Camera_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Camera* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::Camera();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"Camera");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Camera_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_Camera_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (Camera)");
	return 0;
}

int lua_register_cocos2dx_Camera(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"Camera");
	tolua_cclass(tolua_S,"Camera","Camera","",NULL);

	tolua_beginmodule(tolua_S,"Camera");
		tolua_function(tolua_S,"locate",lua_cocos2dx_Camera_locate);
		tolua_function(tolua_S,"restore",lua_cocos2dx_Camera_restore);
		tolua_function(tolua_S,"setEye",lua_cocos2dx_Camera_setEyeXYZ);
		tolua_function(tolua_S,"setCenter",lua_cocos2dx_Camera_setCenterXYZ);
		tolua_function(tolua_S,"isDirty",lua_cocos2dx_Camera_isDirty);
		tolua_function(tolua_S,"init",lua_cocos2dx_Camera_init);
		tolua_function(tolua_S,"setDirty",lua_cocos2dx_Camera_setDirty);
		tolua_function(tolua_S,"setUp",lua_cocos2dx_Camera_setUpXYZ);
		tolua_function(tolua_S,"new",lua_cocos2dx_Camera_constructor);
		tolua_function(tolua_S,"getZEye", lua_cocos2dx_Camera_getZEye);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_LabelAtlas_setString(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LabelAtlas* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LabelAtlas",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LabelAtlas*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LabelAtlas_setString'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		const char* arg0;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		if(!ok)
			return 0;
		cobj->setString(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelAtlas_setString'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LabelAtlas_initWithString(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LabelAtlas* cobj = NULL;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LabelAtlas",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LabelAtlas*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LabelAtlas_initWithString'", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	do{
		if (argc == 2) {
			const char* arg0;
			std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();

			if (!ok) { ok = true; break; }
			const char* arg1;
			std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp); arg1 = arg1_tmp.c_str();

			if (!ok) { ok = true; break; }
		bool ret = cobj->initWithString(arg0, arg1);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
		}
	}while(0);
	do{
		if (argc == 5) {
			const char* arg0;
			std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();

			if (!ok) { ok = true; break; }
			const char* arg1;
			std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp); arg1 = arg1_tmp.c_str();

			if (!ok) { ok = true; break; }
			unsigned int arg2;
			ok &= luaval_to_uint32(tolua_S, 4,&arg2);

			if (!ok) { ok = true; break; }
			unsigned int arg3;
			ok &= luaval_to_uint32(tolua_S, 5,&arg3);

			if (!ok) { ok = true; break; }
			unsigned int arg4;
			ok &= luaval_to_uint32(tolua_S, 6,&arg4);

			if (!ok) { ok = true; break; }
		bool ret = cobj->initWithString(arg0, arg1, arg2, arg3, arg4);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
		}
	}while(0);
	do{
		if (argc == 5) {
			const char* arg0;
			std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();

			if (!ok) { ok = true; break; }
			cocos2d::Texture2D* arg1;
			#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Texture2D",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Texture2D*)tolua_tousertype(tolua_S,3,0);
		};

			if (!ok) { ok = true; break; }
			unsigned int arg2;
			ok &= luaval_to_uint32(tolua_S, 4,&arg2);

			if (!ok) { ok = true; break; }
			unsigned int arg3;
			ok &= luaval_to_uint32(tolua_S, 5,&arg3);

			if (!ok) { ok = true; break; }
			unsigned int arg4;
			ok &= luaval_to_uint32(tolua_S, 6,&arg4);

			if (!ok) { ok = true; break; }
		bool ret = cobj->initWithString(arg0, arg1, arg2, arg3, arg4);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
		}
	}while(0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 5);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelAtlas_initWithString'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LabelAtlas_updateAtlasValues(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LabelAtlas* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LabelAtlas",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LabelAtlas*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LabelAtlas_updateAtlasValues'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->updateAtlasValues();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelAtlas_updateAtlasValues'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LabelAtlas_getString(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LabelAtlas* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LabelAtlas",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LabelAtlas*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LabelAtlas_getString'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		const char* ret = cobj->getString();
		tolua_pushstring(tolua_S,(const char*)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelAtlas_getString'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LabelAtlas_create(lua_State* tolua_S)
{
	int argc = 0;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"LabelAtlas",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S)-1;

	do {
		if (argc == 2) {
			const char* arg0;
			std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
			if (!ok) { ok = true; break; }
			const char* arg1;
			std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp); arg1 = arg1_tmp.c_str();
			if (!ok) { ok = true; break; }
			cocos2d::LabelAtlas* ret = cocos2d::LabelAtlas::create(arg0, arg1);
			tolua_pushusertype(tolua_S,ret,"LabelAtlas");
			return 1;
		}
	} while (0);
	do {
		if (argc == 5) {
			const char* arg0;
			std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
			if (!ok) { ok = true; break; }
			const char* arg1;
			std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp); arg1 = arg1_tmp.c_str();
			if (!ok) { ok = true; break; }
			unsigned int arg2;
			ok &= luaval_to_uint32(tolua_S, 4,&arg2);
			if (!ok) { ok = true; break; }
			unsigned int arg3;
			ok &= luaval_to_uint32(tolua_S, 5,&arg3);
			if (!ok) { ok = true; break; }
			unsigned int arg4;
			ok &= luaval_to_uint32(tolua_S, 6,&arg4);
			if (!ok) { ok = true; break; }
			cocos2d::LabelAtlas* ret = cocos2d::LabelAtlas::create(arg0, arg1, arg2, arg3, arg4);
			tolua_pushusertype(tolua_S,ret,"LabelAtlas");
			return 1;
		}
	} while (0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 5);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelAtlas_create'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LabelAtlas_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LabelAtlas* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::LabelAtlas();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"LabelAtlas");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelAtlas_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_LabelAtlas_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (LabelAtlas)");
	return 0;
}

int lua_register_cocos2dx_LabelAtlas(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"LabelAtlas");
	tolua_cclass(tolua_S,"LabelAtlas","LabelAtlas","AtlasNode",NULL);

	tolua_beginmodule(tolua_S,"LabelAtlas");
		tolua_function(tolua_S,"setString",lua_cocos2dx_LabelAtlas_setString);
		tolua_function(tolua_S,"initWithString",lua_cocos2dx_LabelAtlas_initWithString);
		tolua_function(tolua_S,"updateAtlasValues",lua_cocos2dx_LabelAtlas_updateAtlasValues);
		tolua_function(tolua_S,"getString",lua_cocos2dx_LabelAtlas_getString);
		tolua_function(tolua_S,"new",lua_cocos2dx_LabelAtlas_constructor);
		tolua_function(tolua_S,"_create", lua_cocos2dx_LabelAtlas_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_Director_pause(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Director* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Director",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Director*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Director_pause'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->pause();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Director_pause'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Director_setDelegate(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Director* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Director",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Director*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Director_setDelegate'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::DirectorDelegate* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"DirectorDelegate",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::DirectorDelegate*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->setDelegate(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Director_setDelegate'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Director_setContentScaleFactor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Director* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Director",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Director*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Director_setContentScaleFactor'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setContentScaleFactor(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Director_setContentScaleFactor'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Director_getContentScaleFactor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Director* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Director",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Director*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Director_getContentScaleFactor'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getContentScaleFactor();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Director_getContentScaleFactor'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Director_getWinSizeInPixels(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Director* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Director",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Director*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Director_getWinSizeInPixels'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Size ret = cobj->getWinSizeInPixels();
		size_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Director_getWinSizeInPixels'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Director_getDeltaTime(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Director* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Director",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Director*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Director_getDeltaTime'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getDeltaTime();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Director_getDeltaTime'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Director_setGLDefaultValues(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Director* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Director",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Director*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Director_setGLDefaultValues'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->setGLDefaultValues();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Director_setGLDefaultValues'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Director_setActionManager(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Director* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Director",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Director*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Director_setActionManager'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::ActionManager* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"ActionManager",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::ActionManager*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->setActionManager(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Director_setActionManager'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Director_setAlphaBlending(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Director* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Director",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Director*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Director_setAlphaBlending'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setAlphaBlending(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Director_setAlphaBlending'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Director_popToRootScene(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Director* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Director",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Director*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Director_popToRootScene'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->popToRootScene();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Director_popToRootScene'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Director_getNotificationNode(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Director* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Director",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Director*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Director_getNotificationNode'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Node* ret = cobj->getNotificationNode();
		tolua_pushusertype(tolua_S,ret,"Node");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Director_getNotificationNode'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Director_getWinSize(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Director* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Director",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Director*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Director_getWinSize'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Size ret = cobj->getWinSize();
		size_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Director_getWinSize'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Director_end(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Director* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Director",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Director*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Director_end'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->end();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Director_end'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Director_isSendCleanupToScene(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Director* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Director",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Director*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Director_isSendCleanupToScene'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->isSendCleanupToScene();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Director_isSendCleanupToScene'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Director_getVisibleOrigin(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Director* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Director",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Director*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Director_getVisibleOrigin'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Point ret = cobj->getVisibleOrigin();
		point_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Director_getVisibleOrigin'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Director_mainLoop(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Director* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Director",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Director*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Director_mainLoop'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->mainLoop();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Director_mainLoop'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Director_setDepthTest(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Director* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Director",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Director*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Director_setDepthTest'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setDepthTest(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Director_setDepthTest'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Director_getSecondsPerFrame(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Director* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Director",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Director*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Director_getSecondsPerFrame'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getSecondsPerFrame();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Director_getSecondsPerFrame'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Director_convertToUI(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Director* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Director",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Director*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Director_convertToUI'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Point arg0;
		ok &= luaval_to_point(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cocos2d::Point ret = cobj->convertToUI(arg0);
		point_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Director_convertToUI'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Director_setAccelerometer(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Director* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Director",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Director*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Director_setAccelerometer'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Accelerometer* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Accelerometer",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Accelerometer*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->setAccelerometer(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Director_setAccelerometer'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Director_setDefaultValues(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Director* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Director",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Director*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Director_setDefaultValues'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->setDefaultValues();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Director_setDefaultValues'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Director_init(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Director* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Director",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Director*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Director_init'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->init();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Director_init'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Director_setScheduler(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Director* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Director",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Director*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Director_setScheduler'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Scheduler* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Scheduler",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Scheduler*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->setScheduler(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Director_setScheduler'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Director_startAnimation(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Director* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Director",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Director*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Director_startAnimation'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->startAnimation();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Director_startAnimation'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Director_getRunningScene(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Director* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Director",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Director*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Director_getRunningScene'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Scene* ret = cobj->getRunningScene();
		tolua_pushusertype(tolua_S,ret,"Scene");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Director_getRunningScene'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Director_setViewport(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Director* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Director",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Director*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Director_setViewport'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->setViewport();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Director_setViewport'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Director_stopAnimation(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Director* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Director",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Director*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Director_stopAnimation'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->stopAnimation();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Director_stopAnimation'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Director_popToSceneStackLevel(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Director* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Director",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Director*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Director_popToSceneStackLevel'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		int arg0;
		ok &= luaval_to_int32(tolua_S, 2,(int*)&arg0);
		if(!ok)
			return 0;
		cobj->popToSceneStackLevel(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Director_popToSceneStackLevel'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Director_resume(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Director* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Director",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Director*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Director_resume'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->resume();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Director_resume'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Director_isNextDeltaTimeZero(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Director* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Director",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Director*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Director_isNextDeltaTimeZero'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->isNextDeltaTimeZero();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Director_isNextDeltaTimeZero'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Director_getDelegate(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Director* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Director",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Director*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Director_getDelegate'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::DirectorDelegate* ret = cobj->getDelegate();
		tolua_pushusertype(tolua_S,ret,"DirectorDelegate");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Director_getDelegate'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Director_setOpenGLView(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Director* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Director",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Director*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Director_setOpenGLView'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::EGLView* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"EGLView",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::EGLView*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->setOpenGLView(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Director_setOpenGLView'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Director_convertToGL(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Director* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Director",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Director*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Director_convertToGL'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Point arg0;
		ok &= luaval_to_point(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cocos2d::Point ret = cobj->convertToGL(arg0);
		point_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Director_convertToGL'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Director_purgeCachedData(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Director* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Director",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Director*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Director_purgeCachedData'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->purgeCachedData();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Director_purgeCachedData'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Director_getTotalFrames(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Director* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Director",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Director*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Director_getTotalFrames'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		unsigned int ret = cobj->getTotalFrames();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Director_getTotalFrames'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Director_runWithScene(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Director* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Director",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Director*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Director_runWithScene'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Scene* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Scene",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Scene*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->runWithScene(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Director_runWithScene'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Director_setNotificationNode(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Director* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Director",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Director*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Director_setNotificationNode'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Node* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->setNotificationNode(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Director_setNotificationNode'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Director_drawScene(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Director* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Director",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Director*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Director_drawScene'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->drawScene();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Director_drawScene'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Director_popScene(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Director* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Director",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Director*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Director_popScene'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->popScene();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Director_popScene'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Director_isDisplayStats(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Director* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Director",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Director*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Director_isDisplayStats'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->isDisplayStats();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Director_isDisplayStats'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Director_setProjection(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Director* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Director",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Director*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Director_setProjection'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Director::Projection arg0;
		ok &= luaval_to_int32(tolua_S, 2,(int*)&arg0);
		if(!ok)
			return 0;
		cobj->setProjection(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Director_setProjection'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Director_getZEye(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Director* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Director",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Director*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Director_getZEye'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getZEye();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Director_getZEye'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Director_setNextDeltaTimeZero(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Director* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Director",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Director*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Director_setNextDeltaTimeZero'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setNextDeltaTimeZero(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Director_setNextDeltaTimeZero'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Director_getVisibleSize(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Director* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Director",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Director*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Director_getVisibleSize'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Size ret = cobj->getVisibleSize();
		size_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Director_getVisibleSize'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Director_getScheduler(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Director* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Director",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Director*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Director_getScheduler'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Scheduler* ret = cobj->getScheduler();
		tolua_pushusertype(tolua_S,ret,"Scheduler");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Director_getScheduler'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Director_pushScene(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Director* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Director",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Director*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Director_pushScene'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Scene* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Scene",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Scene*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->pushScene(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Director_pushScene'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Director_getAnimationInterval(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Director* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Director",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Director*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Director_getAnimationInterval'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		double ret = cobj->getAnimationInterval();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Director_getAnimationInterval'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Director_isPaused(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Director* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Director",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Director*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Director_isPaused'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->isPaused();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Director_isPaused'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Director_setDisplayStats(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Director* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Director",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Director*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Director_setDisplayStats'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setDisplayStats(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Director_setDisplayStats'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Director_replaceScene(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Director* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Director",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Director*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Director_replaceScene'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Scene* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Scene",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Scene*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->replaceScene(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Director_replaceScene'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Director_setAnimationInterval(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Director* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Director",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Director*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Director_setAnimationInterval'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setAnimationInterval(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Director_setAnimationInterval'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Director_getActionManager(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Director* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Director",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Director*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Director_getActionManager'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::ActionManager* ret = cobj->getActionManager();
		tolua_pushusertype(tolua_S,ret,"ActionManager");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Director_getActionManager'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Director_getInstance(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"Director",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 0) {
		if(!ok)
			return 0;
		cocos2d::Director* ret = cocos2d::Director::getInstance();
		tolua_pushusertype(tolua_S,ret,"Director");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Director_getInstance'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_Director_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (Director)");
	return 0;
}

int lua_register_cocos2dx_Director(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"Director");
	tolua_cclass(tolua_S,"Director","Director","",NULL);

	tolua_beginmodule(tolua_S,"Director");
		tolua_function(tolua_S,"pause",lua_cocos2dx_Director_pause);
		tolua_function(tolua_S,"setDelegate",lua_cocos2dx_Director_setDelegate);
		tolua_function(tolua_S,"setContentScaleFactor",lua_cocos2dx_Director_setContentScaleFactor);
		tolua_function(tolua_S,"getContentScaleFactor",lua_cocos2dx_Director_getContentScaleFactor);
		tolua_function(tolua_S,"getWinSizeInPixels",lua_cocos2dx_Director_getWinSizeInPixels);
		tolua_function(tolua_S,"getDeltaTime",lua_cocos2dx_Director_getDeltaTime);
		tolua_function(tolua_S,"setGLDefaultValues",lua_cocos2dx_Director_setGLDefaultValues);
		tolua_function(tolua_S,"setActionManager",lua_cocos2dx_Director_setActionManager);
		tolua_function(tolua_S,"setAlphaBlending",lua_cocos2dx_Director_setAlphaBlending);
		tolua_function(tolua_S,"popToRootScene",lua_cocos2dx_Director_popToRootScene);
		tolua_function(tolua_S,"getNotificationNode",lua_cocos2dx_Director_getNotificationNode);
		tolua_function(tolua_S,"getWinSize",lua_cocos2dx_Director_getWinSize);
		tolua_function(tolua_S,"end",lua_cocos2dx_Director_end);
		tolua_function(tolua_S,"isSendCleanupToScene",lua_cocos2dx_Director_isSendCleanupToScene);
		tolua_function(tolua_S,"getVisibleOrigin",lua_cocos2dx_Director_getVisibleOrigin);
		tolua_function(tolua_S,"mainLoop",lua_cocos2dx_Director_mainLoop);
		tolua_function(tolua_S,"setDepthTest",lua_cocos2dx_Director_setDepthTest);
		tolua_function(tolua_S,"getSecondsPerFrame",lua_cocos2dx_Director_getSecondsPerFrame);
		tolua_function(tolua_S,"convertToUI",lua_cocos2dx_Director_convertToUI);
		tolua_function(tolua_S,"setAccelerometer",lua_cocos2dx_Director_setAccelerometer);
		tolua_function(tolua_S,"setDefaultValues",lua_cocos2dx_Director_setDefaultValues);
		tolua_function(tolua_S,"init",lua_cocos2dx_Director_init);
		tolua_function(tolua_S,"setScheduler",lua_cocos2dx_Director_setScheduler);
		tolua_function(tolua_S,"startAnimation",lua_cocos2dx_Director_startAnimation);
		tolua_function(tolua_S,"getRunningScene",lua_cocos2dx_Director_getRunningScene);
		tolua_function(tolua_S,"setViewport",lua_cocos2dx_Director_setViewport);
		tolua_function(tolua_S,"stopAnimation",lua_cocos2dx_Director_stopAnimation);
		tolua_function(tolua_S,"popToSceneStackLevel",lua_cocos2dx_Director_popToSceneStackLevel);
		tolua_function(tolua_S,"resume",lua_cocos2dx_Director_resume);
		tolua_function(tolua_S,"isNextDeltaTimeZero",lua_cocos2dx_Director_isNextDeltaTimeZero);
		tolua_function(tolua_S,"getDelegate",lua_cocos2dx_Director_getDelegate);
		tolua_function(tolua_S,"setOpenGLView",lua_cocos2dx_Director_setOpenGLView);
		tolua_function(tolua_S,"convertToGL",lua_cocos2dx_Director_convertToGL);
		tolua_function(tolua_S,"purgeCachedData",lua_cocos2dx_Director_purgeCachedData);
		tolua_function(tolua_S,"getTotalFrames",lua_cocos2dx_Director_getTotalFrames);
		tolua_function(tolua_S,"runWithScene",lua_cocos2dx_Director_runWithScene);
		tolua_function(tolua_S,"setNotificationNode",lua_cocos2dx_Director_setNotificationNode);
		tolua_function(tolua_S,"drawScene",lua_cocos2dx_Director_drawScene);
		tolua_function(tolua_S,"popScene",lua_cocos2dx_Director_popScene);
		tolua_function(tolua_S,"isDisplayStats",lua_cocos2dx_Director_isDisplayStats);
		tolua_function(tolua_S,"setProjection",lua_cocos2dx_Director_setProjection);
		tolua_function(tolua_S,"getZEye",lua_cocos2dx_Director_getZEye);
		tolua_function(tolua_S,"setNextDeltaTimeZero",lua_cocos2dx_Director_setNextDeltaTimeZero);
		tolua_function(tolua_S,"getVisibleSize",lua_cocos2dx_Director_getVisibleSize);
		tolua_function(tolua_S,"getScheduler",lua_cocos2dx_Director_getScheduler);
		tolua_function(tolua_S,"pushScene",lua_cocos2dx_Director_pushScene);
		tolua_function(tolua_S,"getAnimationInterval",lua_cocos2dx_Director_getAnimationInterval);
		tolua_function(tolua_S,"isPaused",lua_cocos2dx_Director_isPaused);
		tolua_function(tolua_S,"setDisplayStats",lua_cocos2dx_Director_setDisplayStats);
		tolua_function(tolua_S,"replaceScene",lua_cocos2dx_Director_replaceScene);
		tolua_function(tolua_S,"setAnimationInterval",lua_cocos2dx_Director_setAnimationInterval);
		tolua_function(tolua_S,"getActionManager",lua_cocos2dx_Director_getActionManager);
		tolua_function(tolua_S,"getInstance", lua_cocos2dx_Director_getInstance);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_GridBase_setGridSize(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::GridBase* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"GridBase",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::GridBase*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_GridBase_setGridSize'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Size arg0;
		ok &= luaval_to_size(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->setGridSize(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_GridBase_setGridSize'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_GridBase_calculateVertexPoints(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::GridBase* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"GridBase",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::GridBase*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_GridBase_calculateVertexPoints'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->calculateVertexPoints();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_GridBase_calculateVertexPoints'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_GridBase_afterDraw(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::GridBase* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"GridBase",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::GridBase*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_GridBase_afterDraw'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Node* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->afterDraw(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_GridBase_afterDraw'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_GridBase_beforeDraw(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::GridBase* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"GridBase",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::GridBase*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_GridBase_beforeDraw'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->beforeDraw();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_GridBase_beforeDraw'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_GridBase_isTextureFlipped(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::GridBase* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"GridBase",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::GridBase*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_GridBase_isTextureFlipped'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->isTextureFlipped();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_GridBase_isTextureFlipped'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_GridBase_getGridSize(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::GridBase* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"GridBase",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::GridBase*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_GridBase_getGridSize'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Size ret = cobj->getGridSize();
		size_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_GridBase_getGridSize'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_GridBase_getStep(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::GridBase* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"GridBase",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::GridBase*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_GridBase_getStep'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Point ret = cobj->getStep();
		point_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_GridBase_getStep'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_GridBase_set2DProjection(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::GridBase* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"GridBase",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::GridBase*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_GridBase_set2DProjection'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->set2DProjection();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_GridBase_set2DProjection'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_GridBase_setStep(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::GridBase* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"GridBase",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::GridBase*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_GridBase_setStep'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Point arg0;
		ok &= luaval_to_point(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->setStep(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_GridBase_setStep'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_GridBase_setTextureFlipped(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::GridBase* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"GridBase",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::GridBase*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_GridBase_setTextureFlipped'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setTextureFlipped(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_GridBase_setTextureFlipped'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_GridBase_blit(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::GridBase* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"GridBase",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::GridBase*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_GridBase_blit'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->blit();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_GridBase_blit'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_GridBase_setActive(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::GridBase* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"GridBase",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::GridBase*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_GridBase_setActive'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setActive(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_GridBase_setActive'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_GridBase_getReuseGrid(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::GridBase* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"GridBase",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::GridBase*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_GridBase_getReuseGrid'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		int ret = cobj->getReuseGrid();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_GridBase_getReuseGrid'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_GridBase_initWithSize(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::GridBase* cobj = NULL;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"GridBase",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::GridBase*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_GridBase_initWithSize'", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	do{
		if (argc == 1) {
			cocos2d::Size arg0;
			ok &= luaval_to_size(tolua_S, 2, &arg0);

			if (!ok) { ok = true; break; }
		bool ret = cobj->initWithSize(arg0);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
		}
	}while(0);
	do{
		if (argc == 3) {
			cocos2d::Size arg0;
			ok &= luaval_to_size(tolua_S, 2, &arg0);

			if (!ok) { ok = true; break; }
			cocos2d::Texture2D* arg1;
			#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Texture2D",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Texture2D*)tolua_tousertype(tolua_S,3,0);
		};

			if (!ok) { ok = true; break; }
			bool arg2;
			ok &= luaval_to_boolean(tolua_S, 4,&arg2);

			if (!ok) { ok = true; break; }
		bool ret = cobj->initWithSize(arg0, arg1, arg2);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
		}
	}while(0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 3);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_GridBase_initWithSize'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_GridBase_setReuseGrid(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::GridBase* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"GridBase",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::GridBase*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_GridBase_setReuseGrid'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		int arg0;
		ok &= luaval_to_int32(tolua_S, 2,(int*)&arg0);
		if(!ok)
			return 0;
		cobj->setReuseGrid(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_GridBase_setReuseGrid'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_GridBase_isActive(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::GridBase* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"GridBase",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::GridBase*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_GridBase_isActive'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->isActive();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_GridBase_isActive'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_GridBase_reuse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::GridBase* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"GridBase",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::GridBase*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_GridBase_reuse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->reuse();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_GridBase_reuse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_GridBase_create(lua_State* tolua_S)
{
	int argc = 0;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"GridBase",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S)-1;

	do {
		if (argc == 1) {
			cocos2d::Size arg0;
			ok &= luaval_to_size(tolua_S, 2, &arg0);
			if (!ok) { ok = true; break; }
			cocos2d::GridBase* ret = cocos2d::GridBase::create(arg0);
			tolua_pushusertype(tolua_S,ret,"GridBase");
			return 1;
		}
	} while (0);
	do {
		if (argc == 3) {
			cocos2d::Size arg0;
			ok &= luaval_to_size(tolua_S, 2, &arg0);
			if (!ok) { ok = true; break; }
			cocos2d::Texture2D* arg1;
			#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Texture2D",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Texture2D*)tolua_tousertype(tolua_S,3,0);
		};
			if (!ok) { ok = true; break; }
			bool arg2;
			ok &= luaval_to_boolean(tolua_S, 4,&arg2);
			if (!ok) { ok = true; break; }
			cocos2d::GridBase* ret = cocos2d::GridBase::create(arg0, arg1, arg2);
			tolua_pushusertype(tolua_S,ret,"GridBase");
			return 1;
		}
	} while (0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 3);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_GridBase_create'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_GridBase_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (GridBase)");
	return 0;
}

int lua_register_cocos2dx_GridBase(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"GridBase");
	tolua_cclass(tolua_S,"GridBase","GridBase","",NULL);

	tolua_beginmodule(tolua_S,"GridBase");
		tolua_function(tolua_S,"setGridSize",lua_cocos2dx_GridBase_setGridSize);
		tolua_function(tolua_S,"calculateVertexPoints",lua_cocos2dx_GridBase_calculateVertexPoints);
		tolua_function(tolua_S,"afterDraw",lua_cocos2dx_GridBase_afterDraw);
		tolua_function(tolua_S,"beforeDraw",lua_cocos2dx_GridBase_beforeDraw);
		tolua_function(tolua_S,"isTextureFlipped",lua_cocos2dx_GridBase_isTextureFlipped);
		tolua_function(tolua_S,"getGridSize",lua_cocos2dx_GridBase_getGridSize);
		tolua_function(tolua_S,"getStep",lua_cocos2dx_GridBase_getStep);
		tolua_function(tolua_S,"set2DProjection",lua_cocos2dx_GridBase_set2DProjection);
		tolua_function(tolua_S,"setStep",lua_cocos2dx_GridBase_setStep);
		tolua_function(tolua_S,"setTextureFlipped",lua_cocos2dx_GridBase_setTextureFlipped);
		tolua_function(tolua_S,"blit",lua_cocos2dx_GridBase_blit);
		tolua_function(tolua_S,"setActive",lua_cocos2dx_GridBase_setActive);
		tolua_function(tolua_S,"getReuseGrid",lua_cocos2dx_GridBase_getReuseGrid);
		tolua_function(tolua_S,"initWithSize",lua_cocos2dx_GridBase_initWithSize);
		tolua_function(tolua_S,"setReuseGrid",lua_cocos2dx_GridBase_setReuseGrid);
		tolua_function(tolua_S,"isActive",lua_cocos2dx_GridBase_isActive);
		tolua_function(tolua_S,"reuse",lua_cocos2dx_GridBase_reuse);
		tolua_function(tolua_S,"create", lua_cocos2dx_GridBase_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_Grid3D_calculateVertexPoints(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Grid3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Grid3D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Grid3D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Grid3D_calculateVertexPoints'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->calculateVertexPoints();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Grid3D_calculateVertexPoints'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Grid3D_reuse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Grid3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Grid3D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Grid3D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Grid3D_reuse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->reuse();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Grid3D_reuse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Grid3D_blit(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Grid3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Grid3D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Grid3D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Grid3D_blit'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->blit();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Grid3D_blit'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Grid3D_create(lua_State* tolua_S)
{
	int argc = 0;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"Grid3D",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S)-1;

	do {
		if (argc == 1) {
			cocos2d::Size arg0;
			ok &= luaval_to_size(tolua_S, 2, &arg0);
			if (!ok) { ok = true; break; }
			cocos2d::Grid3D* ret = cocos2d::Grid3D::create(arg0);
			tolua_pushusertype(tolua_S,ret,"Grid3D");
			return 1;
		}
	} while (0);
	do {
		if (argc == 3) {
			cocos2d::Size arg0;
			ok &= luaval_to_size(tolua_S, 2, &arg0);
			if (!ok) { ok = true; break; }
			cocos2d::Texture2D* arg1;
			#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Texture2D",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Texture2D*)tolua_tousertype(tolua_S,3,0);
		};
			if (!ok) { ok = true; break; }
			bool arg2;
			ok &= luaval_to_boolean(tolua_S, 4,&arg2);
			if (!ok) { ok = true; break; }
			cocos2d::Grid3D* ret = cocos2d::Grid3D::create(arg0, arg1, arg2);
			tolua_pushusertype(tolua_S,ret,"Grid3D");
			return 1;
		}
	} while (0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 3);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Grid3D_create'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Grid3D_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Grid3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::Grid3D();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"Grid3D");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Grid3D_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_Grid3D_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (Grid3D)");
	return 0;
}

int lua_register_cocos2dx_Grid3D(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"Grid3D");
	tolua_cclass(tolua_S,"Grid3D","Grid3D","GridBase",NULL);

	tolua_beginmodule(tolua_S,"Grid3D");
		tolua_function(tolua_S,"calculateVertexPoints",lua_cocos2dx_Grid3D_calculateVertexPoints);
		tolua_function(tolua_S,"reuse",lua_cocos2dx_Grid3D_reuse);
		tolua_function(tolua_S,"blit",lua_cocos2dx_Grid3D_blit);
		tolua_function(tolua_S,"new",lua_cocos2dx_Grid3D_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_Grid3D_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_TiledGrid3D_calculateVertexPoints(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TiledGrid3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TiledGrid3D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TiledGrid3D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TiledGrid3D_calculateVertexPoints'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->calculateVertexPoints();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TiledGrid3D_calculateVertexPoints'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TiledGrid3D_reuse(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TiledGrid3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TiledGrid3D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TiledGrid3D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TiledGrid3D_reuse'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->reuse();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TiledGrid3D_reuse'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TiledGrid3D_blit(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TiledGrid3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TiledGrid3D",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TiledGrid3D*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TiledGrid3D_blit'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->blit();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TiledGrid3D_blit'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TiledGrid3D_create(lua_State* tolua_S)
{
	int argc = 0;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"TiledGrid3D",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S)-1;

	do {
		if (argc == 1) {
			cocos2d::Size arg0;
			ok &= luaval_to_size(tolua_S, 2, &arg0);
			if (!ok) { ok = true; break; }
			cocos2d::TiledGrid3D* ret = cocos2d::TiledGrid3D::create(arg0);
			tolua_pushusertype(tolua_S,ret,"TiledGrid3D");
			return 1;
		}
	} while (0);
	do {
		if (argc == 3) {
			cocos2d::Size arg0;
			ok &= luaval_to_size(tolua_S, 2, &arg0);
			if (!ok) { ok = true; break; }
			cocos2d::Texture2D* arg1;
			#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Texture2D",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Texture2D*)tolua_tousertype(tolua_S,3,0);
		};
			if (!ok) { ok = true; break; }
			bool arg2;
			ok &= luaval_to_boolean(tolua_S, 4,&arg2);
			if (!ok) { ok = true; break; }
			cocos2d::TiledGrid3D* ret = cocos2d::TiledGrid3D::create(arg0, arg1, arg2);
			tolua_pushusertype(tolua_S,ret,"TiledGrid3D");
			return 1;
		}
	} while (0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 3);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TiledGrid3D_create'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TiledGrid3D_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TiledGrid3D* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::TiledGrid3D();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"TiledGrid3D");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TiledGrid3D_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TiledGrid3D_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (TiledGrid3D)");
	return 0;
}

int lua_register_cocos2dx_TiledGrid3D(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"TiledGrid3D");
	tolua_cclass(tolua_S,"TiledGrid3D","TiledGrid3D","GridBase",NULL);

	tolua_beginmodule(tolua_S,"TiledGrid3D");
		tolua_function(tolua_S,"calculateVertexPoints",lua_cocos2dx_TiledGrid3D_calculateVertexPoints);
		tolua_function(tolua_S,"reuse",lua_cocos2dx_TiledGrid3D_reuse);
		tolua_function(tolua_S,"blit",lua_cocos2dx_TiledGrid3D_blit);
		tolua_function(tolua_S,"new",lua_cocos2dx_TiledGrid3D_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_TiledGrid3D_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_Sprite_draw(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Sprite* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Sprite",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Sprite*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Sprite_draw'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->draw();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Sprite_draw'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Sprite_addChild(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Sprite* cobj = NULL;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Sprite",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Sprite*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Sprite_addChild'", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	do{
		if (argc == 2) {
			cocos2d::Node* arg0;
			#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};

			if (!ok) { ok = true; break; }
			int arg1;
			ok &= luaval_to_int32(tolua_S, 3,(int*)&arg1);

			if (!ok) { ok = true; break; }
		cobj->addChild(arg0, arg1);
		return 0;
		}
	}while(0);
	do{
		if (argc == 1) {
			cocos2d::Node* arg0;
			#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};

			if (!ok) { ok = true; break; }
		cobj->addChild(arg0);
		return 0;
		}
	}while(0);
	do{
		if (argc == 3) {
			cocos2d::Node* arg0;
			#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};

			if (!ok) { ok = true; break; }
			int arg1;
			ok &= luaval_to_int32(tolua_S, 3,(int*)&arg1);

			if (!ok) { ok = true; break; }
			int arg2;
			ok &= luaval_to_int32(tolua_S, 4,(int*)&arg2);

			if (!ok) { ok = true; break; }
		cobj->addChild(arg0, arg1, arg2);
		return 0;
		}
	}while(0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 3);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Sprite_addChild'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Sprite_setTexture(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Sprite* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Sprite",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Sprite*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Sprite_setTexture'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Texture2D* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Texture2D",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Texture2D*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->setTexture(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Sprite_setTexture'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Sprite_isFlipX(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Sprite* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Sprite",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Sprite*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Sprite_isFlipX'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->isFlipX();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Sprite_isFlipX'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Sprite_getTexture(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Sprite* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Sprite",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Sprite*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Sprite_getTexture'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Texture2D* ret = cobj->getTexture();
		tolua_pushusertype(tolua_S,ret,"Texture2D");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Sprite_getTexture'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Sprite_setRotationY(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Sprite* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Sprite",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Sprite*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Sprite_setRotationY'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setRotationY(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Sprite_setRotationY'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Sprite_setRotationX(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Sprite* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Sprite",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Sprite*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Sprite_setRotationX'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setRotationX(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Sprite_setRotationX'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Sprite_setScale(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Sprite* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Sprite",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Sprite*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Sprite_setScale'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setScale(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Sprite_setScale'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Sprite_setOpacity(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Sprite* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Sprite",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Sprite*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Sprite_setOpacity'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		uint16_t arg0;
		ok &= luaval_to_uint16(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setOpacity(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Sprite_setOpacity'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Sprite_setDisplayFrameWithAnimationName(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Sprite* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Sprite",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Sprite*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Sprite_setDisplayFrameWithAnimationName'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		const char* arg0;
		int arg1;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		ok &= luaval_to_int32(tolua_S, 3,(int*)&arg1);
		if(!ok)
			return 0;
		cobj->setDisplayFrameWithAnimationName(arg0, arg1);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Sprite_setDisplayFrameWithAnimationName'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Sprite_setScaleX(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Sprite* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Sprite",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Sprite*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Sprite_setScaleX'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setScaleX(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Sprite_setScaleX'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Sprite_setAnchorPoint(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Sprite* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Sprite",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Sprite*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Sprite_setAnchorPoint'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Point arg0;
		ok &= luaval_to_point(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->setAnchorPoint(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Sprite_setAnchorPoint'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Sprite_getBatchNode(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Sprite* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Sprite",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Sprite*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Sprite_getBatchNode'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::SpriteBatchNode* ret = cobj->getBatchNode();
		tolua_pushusertype(tolua_S,ret,"SpriteBatchNode");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Sprite_getBatchNode'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Sprite_getOffsetPosition(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Sprite* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Sprite",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Sprite*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Sprite_getOffsetPosition'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Point ret = cobj->getOffsetPosition();
		point_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Sprite_getOffsetPosition'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Sprite_isOpacityModifyRGB(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Sprite* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Sprite",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Sprite*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Sprite_isOpacityModifyRGB'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->isOpacityModifyRGB();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Sprite_isOpacityModifyRGB'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Sprite_updateDisplayedOpacity(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Sprite* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Sprite",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Sprite*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Sprite_updateDisplayedOpacity'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		uint16_t arg0;
		ok &= luaval_to_uint16(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->updateDisplayedOpacity(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Sprite_updateDisplayedOpacity'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Sprite_initWithSpriteFrameName(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Sprite* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Sprite",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Sprite*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Sprite_initWithSpriteFrameName'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		const char* arg0;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		if(!ok)
			return 0;
		bool ret = cobj->initWithSpriteFrameName(arg0);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Sprite_initWithSpriteFrameName'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Sprite_setVertexZ(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Sprite* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Sprite",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Sprite*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Sprite_setVertexZ'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setVertexZ(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Sprite_setVertexZ'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Sprite_reorderChild(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Sprite* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Sprite",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Sprite*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Sprite_reorderChild'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		cocos2d::Node* arg0;
		int arg1;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		ok &= luaval_to_int32(tolua_S, 3,(int*)&arg1);
		if(!ok)
			return 0;
		cobj->reorderChild(arg0, arg1);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Sprite_reorderChild'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Sprite_setTextureRect(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Sprite* cobj = NULL;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Sprite",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Sprite*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Sprite_setTextureRect'", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	do{
		if (argc == 3) {
			cocos2d::Rect arg0;
			ok &= luaval_to_rect(tolua_S, 2, &arg0);

			if (!ok) { ok = true; break; }
			bool arg1;
			ok &= luaval_to_boolean(tolua_S, 3,&arg1);

			if (!ok) { ok = true; break; }
			cocos2d::Size arg2;
			ok &= luaval_to_size(tolua_S, 4, &arg2);

			if (!ok) { ok = true; break; }
		cobj->setTextureRect(arg0, arg1, arg2);
		return 0;
		}
	}while(0);
	do{
		if (argc == 1) {
			cocos2d::Rect arg0;
			ok &= luaval_to_rect(tolua_S, 2, &arg0);

			if (!ok) { ok = true; break; }
		cobj->setTextureRect(arg0);
		return 0;
		}
	}while(0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Sprite_setTextureRect'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Sprite_initWithFile(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Sprite* cobj = NULL;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Sprite",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Sprite*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Sprite_initWithFile'", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	do{
		if (argc == 1) {
			const char* arg0;
			std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();

			if (!ok) { ok = true; break; }
		bool ret = cobj->initWithFile(arg0);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
		}
	}while(0);
	do{
		if (argc == 0) {
		bool ret = cobj->init();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
		}
	}while(0);
	do{
		if (argc == 2) {
			const char* arg0;
			std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();

			if (!ok) { ok = true; break; }
			cocos2d::Rect arg1;
			ok &= luaval_to_rect(tolua_S, 3, &arg1);

			if (!ok) { ok = true; break; }
		bool ret = cobj->initWithFile(arg0, arg1);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
		}
	}while(0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Sprite_initWithFile'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Sprite_isFrameDisplayed(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Sprite* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Sprite",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Sprite*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Sprite_isFrameDisplayed'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::SpriteFrame* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"SpriteFrame",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::SpriteFrame*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		bool ret = cobj->isFrameDisplayed(arg0);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Sprite_isFrameDisplayed'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Sprite_getAtlasIndex(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Sprite* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Sprite",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Sprite*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Sprite_getAtlasIndex'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		int ret = cobj->getAtlasIndex();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Sprite_getAtlasIndex'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Sprite_setRotation(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Sprite* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Sprite",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Sprite*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Sprite_setRotation'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setRotation(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Sprite_setRotation'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Sprite_setDisplayFrame(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Sprite* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Sprite",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Sprite*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Sprite_setDisplayFrame'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::SpriteFrame* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"SpriteFrame",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::SpriteFrame*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->setDisplayFrame(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Sprite_setDisplayFrame'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Sprite_setBatchNode(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Sprite* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Sprite",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Sprite*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Sprite_setBatchNode'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::SpriteBatchNode* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"SpriteBatchNode",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::SpriteBatchNode*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->setBatchNode(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Sprite_setBatchNode'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Sprite_setScaleY(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Sprite* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Sprite",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Sprite*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Sprite_setScaleY'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setScaleY(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Sprite_setScaleY'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Sprite_initWithTexture(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Sprite* cobj = NULL;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Sprite",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Sprite*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Sprite_initWithTexture'", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	do{
		if (argc == 2) {
			cocos2d::Texture2D* arg0;
			#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Texture2D",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Texture2D*)tolua_tousertype(tolua_S,2,0);
		};

			if (!ok) { ok = true; break; }
			cocos2d::Rect arg1;
			ok &= luaval_to_rect(tolua_S, 3, &arg1);

			if (!ok) { ok = true; break; }
		bool ret = cobj->initWithTexture(arg0, arg1);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
		}
	}while(0);
	do{
		if (argc == 1) {
			cocos2d::Texture2D* arg0;
			#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Texture2D",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Texture2D*)tolua_tousertype(tolua_S,2,0);
		};

			if (!ok) { ok = true; break; }
		bool ret = cobj->initWithTexture(arg0);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
		}
	}while(0);
	do{
		if (argc == 3) {
			cocos2d::Texture2D* arg0;
			#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Texture2D",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Texture2D*)tolua_tousertype(tolua_S,2,0);
		};

			if (!ok) { ok = true; break; }
			cocos2d::Rect arg1;
			ok &= luaval_to_rect(tolua_S, 3, &arg1);

			if (!ok) { ok = true; break; }
			bool arg2;
			ok &= luaval_to_boolean(tolua_S, 4,&arg2);

			if (!ok) { ok = true; break; }
		bool ret = cobj->initWithTexture(arg0, arg1, arg2);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
		}
	}while(0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 3);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Sprite_initWithTexture'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Sprite_setTextureAtlas(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Sprite* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Sprite",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Sprite*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Sprite_setTextureAtlas'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::TextureAtlas* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"TextureAtlas",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::TextureAtlas*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->setTextureAtlas(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Sprite_setTextureAtlas'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Sprite_setFlipY(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Sprite* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Sprite",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Sprite*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Sprite_setFlipY'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setFlipY(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Sprite_setFlipY'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Sprite_setFlipX(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Sprite* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Sprite",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Sprite*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Sprite_setFlipX'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setFlipX(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Sprite_setFlipX'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Sprite_removeAllChildrenWithCleanup(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Sprite* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Sprite",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Sprite*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Sprite_removeAllChildrenWithCleanup'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->removeAllChildrenWithCleanup(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Sprite_removeAllChildrenWithCleanup'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Sprite_isDirty(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Sprite* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Sprite",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Sprite*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Sprite_isDirty'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->isDirty();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Sprite_isDirty'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Sprite_setAtlasIndex(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Sprite* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Sprite",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Sprite*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Sprite_setAtlasIndex'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		int arg0;
		ok &= luaval_to_int32(tolua_S, 2,(int*)&arg0);
		if(!ok)
			return 0;
		cobj->setAtlasIndex(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Sprite_setAtlasIndex'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Sprite_updateDisplayedColor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Sprite* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Sprite",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Sprite*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Sprite_updateDisplayedColor'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Color3B arg0;
		ok &= luaval_to_color3b(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->updateDisplayedColor(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Sprite_updateDisplayedColor'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Sprite_setDirty(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Sprite* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Sprite",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Sprite*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Sprite_setDirty'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setDirty(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Sprite_setDirty'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Sprite_isTextureRectRotated(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Sprite* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Sprite",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Sprite*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Sprite_isTextureRectRotated'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->isTextureRectRotated();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Sprite_isTextureRectRotated'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Sprite_sortAllChildren(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Sprite* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Sprite",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Sprite*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Sprite_sortAllChildren'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->sortAllChildren();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Sprite_sortAllChildren'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Sprite_getTextureRect(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Sprite* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Sprite",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Sprite*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Sprite_getTextureRect'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Rect ret = cobj->getTextureRect();
		rect_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Sprite_getTextureRect'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Sprite_ignoreAnchorPointForPosition(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Sprite* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Sprite",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Sprite*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Sprite_ignoreAnchorPointForPosition'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->ignoreAnchorPointForPosition(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Sprite_ignoreAnchorPointForPosition'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Sprite_setColor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Sprite* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Sprite",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Sprite*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Sprite_setColor'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Color3B arg0;
		ok &= luaval_to_color3b(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->setColor(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Sprite_setColor'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Sprite_getTextureAtlas(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Sprite* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Sprite",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Sprite*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Sprite_getTextureAtlas'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::TextureAtlas* ret = cobj->getTextureAtlas();
		tolua_pushusertype(tolua_S,ret,"TextureAtlas");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Sprite_getTextureAtlas'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Sprite_initWithSpriteFrame(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Sprite* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Sprite",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Sprite*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Sprite_initWithSpriteFrame'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::SpriteFrame* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"SpriteFrame",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::SpriteFrame*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		bool ret = cobj->initWithSpriteFrame(arg0);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Sprite_initWithSpriteFrame'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Sprite_removeChild(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Sprite* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Sprite",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Sprite*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Sprite_removeChild'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		cocos2d::Node* arg0;
		bool arg1;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		ok &= luaval_to_boolean(tolua_S, 3,&arg1);
		if(!ok)
			return 0;
		cobj->removeChild(arg0, arg1);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Sprite_removeChild'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Sprite_updateTransform(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Sprite* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Sprite",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Sprite*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Sprite_updateTransform'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->updateTransform();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Sprite_updateTransform'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Sprite_isFlipY(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Sprite* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Sprite",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Sprite*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Sprite_isFlipY'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->isFlipY();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Sprite_isFlipY'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Sprite_setOpacityModifyRGB(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Sprite* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Sprite",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Sprite*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Sprite_setOpacityModifyRGB'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setOpacityModifyRGB(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Sprite_setOpacityModifyRGB'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Sprite_setVertexRect(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Sprite* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Sprite",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Sprite*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Sprite_setVertexRect'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Rect arg0;
		ok &= luaval_to_rect(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->setVertexRect(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Sprite_setVertexRect'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Sprite_setSkewX(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Sprite* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Sprite",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Sprite*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Sprite_setSkewX'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setSkewX(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Sprite_setSkewX'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Sprite_setSkewY(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Sprite* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Sprite",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Sprite*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Sprite_setSkewY'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setSkewY(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Sprite_setSkewY'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Sprite_setVisible(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Sprite* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Sprite",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Sprite*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Sprite_setVisible'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setVisible(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Sprite_setVisible'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Sprite_create(lua_State* tolua_S)
{
	int argc = 0;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"Sprite",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S)-1;

	do {
		if (argc == 1) {
			const char* arg0;
			std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
			if (!ok) { ok = true; break; }
			cocos2d::Sprite* ret = cocos2d::Sprite::create(arg0);
			tolua_pushusertype(tolua_S,ret,"Sprite");
			return 1;
		}
	} while (0);
	do {
		if (argc == 0) {
			cocos2d::Sprite* ret = cocos2d::Sprite::create();
			tolua_pushusertype(tolua_S,ret,"Sprite");
			return 1;
		}
	} while (0);
	do {
		if (argc == 2) {
			const char* arg0;
			std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
			if (!ok) { ok = true; break; }
			cocos2d::Rect arg1;
			ok &= luaval_to_rect(tolua_S, 3, &arg1);
			if (!ok) { ok = true; break; }
			cocos2d::Sprite* ret = cocos2d::Sprite::create(arg0, arg1);
			tolua_pushusertype(tolua_S,ret,"Sprite");
			return 1;
		}
	} while (0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Sprite_create'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Sprite_createWithTexture(lua_State* tolua_S)
{
	int argc = 0;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"Sprite",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S)-1;

	do {
		if (argc == 2) {
			cocos2d::Texture2D* arg0;
			#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Texture2D",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Texture2D*)tolua_tousertype(tolua_S,2,0);
		};
			if (!ok) { ok = true; break; }
			cocos2d::Rect arg1;
			ok &= luaval_to_rect(tolua_S, 3, &arg1);
			if (!ok) { ok = true; break; }
			cocos2d::Sprite* ret = cocos2d::Sprite::createWithTexture(arg0, arg1);
			tolua_pushusertype(tolua_S,ret,"Sprite");
			return 1;
		}
	} while (0);
	do {
		if (argc == 1) {
			cocos2d::Texture2D* arg0;
			#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Texture2D",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Texture2D*)tolua_tousertype(tolua_S,2,0);
		};
			if (!ok) { ok = true; break; }
			cocos2d::Sprite* ret = cocos2d::Sprite::createWithTexture(arg0);
			tolua_pushusertype(tolua_S,ret,"Sprite");
			return 1;
		}
	} while (0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Sprite_createWithTexture'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Sprite_createWithSpriteFrameName(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"Sprite",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 1) {
		const char* arg0;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		if(!ok)
			return 0;
		cocos2d::Sprite* ret = cocos2d::Sprite::createWithSpriteFrameName(arg0);
		tolua_pushusertype(tolua_S,ret,"Sprite");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Sprite_createWithSpriteFrameName'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_Sprite_createWithSpriteFrame(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"Sprite",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 1) {
		cocos2d::SpriteFrame* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"SpriteFrame",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::SpriteFrame*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cocos2d::Sprite* ret = cocos2d::Sprite::createWithSpriteFrame(arg0);
		tolua_pushusertype(tolua_S,ret,"Sprite");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Sprite_createWithSpriteFrame'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_Sprite_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Sprite* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::Sprite();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"Sprite");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Sprite_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_Sprite_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (Sprite)");
	return 0;
}

int lua_register_cocos2dx_Sprite(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"Sprite");
	tolua_cclass(tolua_S,"Sprite","Sprite","NodeRGBA",NULL);

	tolua_beginmodule(tolua_S,"Sprite");
		tolua_function(tolua_S,"draw",lua_cocos2dx_Sprite_draw);
		tolua_function(tolua_S,"addChild",lua_cocos2dx_Sprite_addChild);
		tolua_function(tolua_S,"setTexture",lua_cocos2dx_Sprite_setTexture);
		tolua_function(tolua_S,"isFlippedX",lua_cocos2dx_Sprite_isFlipX);
		tolua_function(tolua_S,"getTexture",lua_cocos2dx_Sprite_getTexture);
		tolua_function(tolua_S,"setRotationY",lua_cocos2dx_Sprite_setRotationY);
		tolua_function(tolua_S,"setRotationX",lua_cocos2dx_Sprite_setRotationX);
		tolua_function(tolua_S,"setScale",lua_cocos2dx_Sprite_setScale);
		tolua_function(tolua_S,"setOpacity",lua_cocos2dx_Sprite_setOpacity);
		tolua_function(tolua_S,"setDisplayFrameWithAnimationName",lua_cocos2dx_Sprite_setDisplayFrameWithAnimationName);
		tolua_function(tolua_S,"setScaleX",lua_cocos2dx_Sprite_setScaleX);
		tolua_function(tolua_S,"setAnchorPoint",lua_cocos2dx_Sprite_setAnchorPoint);
		tolua_function(tolua_S,"getBatchNode",lua_cocos2dx_Sprite_getBatchNode);
		tolua_function(tolua_S,"getOffsetPosition",lua_cocos2dx_Sprite_getOffsetPosition);
		tolua_function(tolua_S,"isOpacityModifyRGB",lua_cocos2dx_Sprite_isOpacityModifyRGB);
		tolua_function(tolua_S,"updateDisplayedOpacity",lua_cocos2dx_Sprite_updateDisplayedOpacity);
		tolua_function(tolua_S,"initWithSpriteFrameName",lua_cocos2dx_Sprite_initWithSpriteFrameName);
		tolua_function(tolua_S,"setVertexZ",lua_cocos2dx_Sprite_setVertexZ);
		tolua_function(tolua_S,"reorderChild",lua_cocos2dx_Sprite_reorderChild);
		tolua_function(tolua_S,"setTextureRect",lua_cocos2dx_Sprite_setTextureRect);
		tolua_function(tolua_S,"init",lua_cocos2dx_Sprite_initWithFile);
		tolua_function(tolua_S,"isFrameDisplayed",lua_cocos2dx_Sprite_isFrameDisplayed);
		tolua_function(tolua_S,"getAtlasIndex",lua_cocos2dx_Sprite_getAtlasIndex);
		tolua_function(tolua_S,"setRotation",lua_cocos2dx_Sprite_setRotation);
		tolua_function(tolua_S,"setDisplayFrame",lua_cocos2dx_Sprite_setDisplayFrame);
		tolua_function(tolua_S,"setBatchNode",lua_cocos2dx_Sprite_setBatchNode);
		tolua_function(tolua_S,"setScaleY",lua_cocos2dx_Sprite_setScaleY);
		tolua_function(tolua_S,"initWithTexture",lua_cocos2dx_Sprite_initWithTexture);
		tolua_function(tolua_S,"setTextureAtlas",lua_cocos2dx_Sprite_setTextureAtlas);
		tolua_function(tolua_S,"setFlipY",lua_cocos2dx_Sprite_setFlipY);
		tolua_function(tolua_S,"setFlipX",lua_cocos2dx_Sprite_setFlipX);
		tolua_function(tolua_S,"removeAllChildrenWithCleanup",lua_cocos2dx_Sprite_removeAllChildrenWithCleanup);
		tolua_function(tolua_S,"isDirty",lua_cocos2dx_Sprite_isDirty);
		tolua_function(tolua_S,"setAtlasIndex",lua_cocos2dx_Sprite_setAtlasIndex);
		tolua_function(tolua_S,"updateDisplayedColor",lua_cocos2dx_Sprite_updateDisplayedColor);
		tolua_function(tolua_S,"setDirty",lua_cocos2dx_Sprite_setDirty);
		tolua_function(tolua_S,"isTextureRectRotated",lua_cocos2dx_Sprite_isTextureRectRotated);
		tolua_function(tolua_S,"sortAllChildren",lua_cocos2dx_Sprite_sortAllChildren);
		tolua_function(tolua_S,"getTextureRect",lua_cocos2dx_Sprite_getTextureRect);
		tolua_function(tolua_S,"ignoreAnchorPointForPosition",lua_cocos2dx_Sprite_ignoreAnchorPointForPosition);
		tolua_function(tolua_S,"setColor",lua_cocos2dx_Sprite_setColor);
		tolua_function(tolua_S,"getTextureAtlas",lua_cocos2dx_Sprite_getTextureAtlas);
		tolua_function(tolua_S,"initWithSpriteFrame",lua_cocos2dx_Sprite_initWithSpriteFrame);
		tolua_function(tolua_S,"removeChild",lua_cocos2dx_Sprite_removeChild);
		tolua_function(tolua_S,"updateTransform",lua_cocos2dx_Sprite_updateTransform);
		tolua_function(tolua_S,"isFlippedY",lua_cocos2dx_Sprite_isFlipY);
		tolua_function(tolua_S,"setOpacityModifyRGB",lua_cocos2dx_Sprite_setOpacityModifyRGB);
		tolua_function(tolua_S,"setVertexRect",lua_cocos2dx_Sprite_setVertexRect);
		tolua_function(tolua_S,"setSkewX",lua_cocos2dx_Sprite_setSkewX);
		tolua_function(tolua_S,"setSkewY",lua_cocos2dx_Sprite_setSkewY);
		tolua_function(tolua_S,"setVisible",lua_cocos2dx_Sprite_setVisible);
		tolua_function(tolua_S,"new",lua_cocos2dx_Sprite_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_Sprite_create);
		tolua_function(tolua_S,"createWithTexture", lua_cocos2dx_Sprite_createWithTexture);
		tolua_function(tolua_S,"createWithSpriteFrameName", lua_cocos2dx_Sprite_createWithSpriteFrameName);
		tolua_function(tolua_S,"createWithSpriteFrame", lua_cocos2dx_Sprite_createWithSpriteFrame);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_LabelTTF_enableShadow(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LabelTTF* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LabelTTF",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LabelTTF*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LabelTTF_enableShadow'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 3) {
		cocos2d::Size arg0;
		double arg1;
		double arg2;
		ok &= luaval_to_size(tolua_S, 2, &arg0);
		ok &= luaval_to_number(tolua_S, 3,&arg1);
		ok &= luaval_to_number(tolua_S, 4,&arg2);
		if(!ok)
			return 0;
		cobj->enableShadow(arg0, arg1, arg2);
		return 0;
	}
	if (argc == 4) {
		cocos2d::Size arg0;
		double arg1;
		double arg2;
		bool arg3;
		ok &= luaval_to_size(tolua_S, 2, &arg0);
		ok &= luaval_to_number(tolua_S, 3,&arg1);
		ok &= luaval_to_number(tolua_S, 4,&arg2);
		ok &= luaval_to_boolean(tolua_S, 5,&arg3);
		if(!ok)
			return 0;
		cobj->enableShadow(arg0, arg1, arg2, arg3);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 3);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelTTF_enableShadow'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LabelTTF_setDimensions(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LabelTTF* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LabelTTF",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LabelTTF*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LabelTTF_setDimensions'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Size arg0;
		ok &= luaval_to_size(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->setDimensions(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelTTF_setDimensions'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LabelTTF_getFontSize(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LabelTTF* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LabelTTF",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LabelTTF*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LabelTTF_getFontSize'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getFontSize();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelTTF_getFontSize'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LabelTTF_getString(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LabelTTF* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LabelTTF",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LabelTTF*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LabelTTF_getString'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		const char* ret = cobj->getString();
		tolua_pushstring(tolua_S,(const char*)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelTTF_getString'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LabelTTF_setTextDefinition(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LabelTTF* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LabelTTF",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LabelTTF*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LabelTTF_setTextDefinition'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::FontDefinition arg0;
		ok &= luaval_to_fontdefinition(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->setTextDefinition(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelTTF_setTextDefinition'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LabelTTF_setFontName(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LabelTTF* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LabelTTF",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LabelTTF*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LabelTTF_setFontName'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		const char* arg0;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		if(!ok)
			return 0;
		cobj->setFontName(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelTTF_setFontName'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LabelTTF_getHorizontalAlignment(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LabelTTF* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LabelTTF",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LabelTTF*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LabelTTF_getHorizontalAlignment'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		int ret = (int)cobj->getHorizontalAlignment();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelTTF_getHorizontalAlignment'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LabelTTF_initWithStringAndTextDefinition(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LabelTTF* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LabelTTF",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LabelTTF*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LabelTTF_initWithStringAndTextDefinition'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		const char* arg0;
		cocos2d::FontDefinition arg1;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		ok &= luaval_to_fontdefinition(tolua_S, 3, &arg1);
		if(!ok)
			return 0;
		bool ret = cobj->initWithStringAndTextDefinition(arg0, arg1);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelTTF_initWithStringAndTextDefinition'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LabelTTF_setString(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LabelTTF* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LabelTTF",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LabelTTF*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LabelTTF_setString'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		const char* arg0;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		if(!ok)
			return 0;
		cobj->setString(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelTTF_setString'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LabelTTF_initWithString(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LabelTTF* cobj = NULL;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LabelTTF",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LabelTTF*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LabelTTF_initWithString'", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	do{
		if (argc == 5) {
			const char* arg0;
			std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();

			if (!ok) { ok = true; break; }
			const char* arg1;
			std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp); arg1 = arg1_tmp.c_str();

			if (!ok) { ok = true; break; }
			double arg2;
			ok &= luaval_to_number(tolua_S, 4,&arg2);

			if (!ok) { ok = true; break; }
			cocos2d::Size arg3;
			ok &= luaval_to_size(tolua_S, 5, &arg3);

			if (!ok) { ok = true; break; }
			cocos2d::TextHAlignment arg4;
			ok &= luaval_to_int32(tolua_S, 6,(int*)&arg4);

			if (!ok) { ok = true; break; }
		bool ret = cobj->initWithString(arg0, arg1, arg2, arg3, arg4);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
		}
	}while(0);
	do{
		if (argc == 3) {
			const char* arg0;
			std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();

			if (!ok) { ok = true; break; }
			const char* arg1;
			std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp); arg1 = arg1_tmp.c_str();

			if (!ok) { ok = true; break; }
			double arg2;
			ok &= luaval_to_number(tolua_S, 4,&arg2);

			if (!ok) { ok = true; break; }
		bool ret = cobj->initWithString(arg0, arg1, arg2);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
		}
	}while(0);
	do{
		if (argc == 6) {
			const char* arg0;
			std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();

			if (!ok) { ok = true; break; }
			const char* arg1;
			std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp); arg1 = arg1_tmp.c_str();

			if (!ok) { ok = true; break; }
			double arg2;
			ok &= luaval_to_number(tolua_S, 4,&arg2);

			if (!ok) { ok = true; break; }
			cocos2d::Size arg3;
			ok &= luaval_to_size(tolua_S, 5, &arg3);

			if (!ok) { ok = true; break; }
			cocos2d::TextHAlignment arg4;
			ok &= luaval_to_int32(tolua_S, 6,(int*)&arg4);

			if (!ok) { ok = true; break; }
			cocos2d::TextVAlignment arg5;
			ok &= luaval_to_int32(tolua_S, 7,(int*)&arg5);

			if (!ok) { ok = true; break; }
		bool ret = cobj->initWithString(arg0, arg1, arg2, arg3, arg4, arg5);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
		}
	}while(0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 6);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelTTF_initWithString'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LabelTTF_init(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LabelTTF* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LabelTTF",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LabelTTF*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LabelTTF_init'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->init();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelTTF_init'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LabelTTF_setFontFillColor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LabelTTF* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LabelTTF",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LabelTTF*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LabelTTF_setFontFillColor'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Color3B arg0;
		ok &= luaval_to_color3b(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->setFontFillColor(arg0);
		return 0;
	}
	if (argc == 2) {
		cocos2d::Color3B arg0;
		bool arg1;
		ok &= luaval_to_color3b(tolua_S, 2, &arg0);
		ok &= luaval_to_boolean(tolua_S, 3,&arg1);
		if(!ok)
			return 0;
		cobj->setFontFillColor(arg0, arg1);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelTTF_setFontFillColor'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LabelTTF_enableStroke(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LabelTTF* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LabelTTF",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LabelTTF*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LabelTTF_enableStroke'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		cocos2d::Color3B arg0;
		double arg1;
		ok &= luaval_to_color3b(tolua_S, 2, &arg0);
		ok &= luaval_to_number(tolua_S, 3,&arg1);
		if(!ok)
			return 0;
		cobj->enableStroke(arg0, arg1);
		return 0;
	}
	if (argc == 3) {
		cocos2d::Color3B arg0;
		double arg1;
		bool arg2;
		ok &= luaval_to_color3b(tolua_S, 2, &arg0);
		ok &= luaval_to_number(tolua_S, 3,&arg1);
		ok &= luaval_to_boolean(tolua_S, 4,&arg2);
		if(!ok)
			return 0;
		cobj->enableStroke(arg0, arg1, arg2);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelTTF_enableStroke'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LabelTTF_getDimensions(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LabelTTF* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LabelTTF",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LabelTTF*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LabelTTF_getDimensions'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Size ret = cobj->getDimensions();
		size_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelTTF_getDimensions'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LabelTTF_setVerticalAlignment(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LabelTTF* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LabelTTF",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LabelTTF*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LabelTTF_setVerticalAlignment'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::TextVAlignment arg0;
		ok &= luaval_to_int32(tolua_S, 2,(int*)&arg0);
		if(!ok)
			return 0;
		cobj->setVerticalAlignment(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelTTF_setVerticalAlignment'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LabelTTF_setFontSize(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LabelTTF* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LabelTTF",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LabelTTF*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LabelTTF_setFontSize'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setFontSize(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelTTF_setFontSize'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LabelTTF_getVerticalAlignment(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LabelTTF* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LabelTTF",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LabelTTF*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LabelTTF_getVerticalAlignment'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		int ret = (int)cobj->getVerticalAlignment();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelTTF_getVerticalAlignment'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LabelTTF_getTextDefinition(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LabelTTF* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LabelTTF",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LabelTTF*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LabelTTF_getTextDefinition'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::FontDefinition ret = cobj->getTextDefinition();
		fontdefinition_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelTTF_getTextDefinition'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LabelTTF_getFontName(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LabelTTF* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LabelTTF",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LabelTTF*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LabelTTF_getFontName'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		const char* ret = cobj->getFontName();
		tolua_pushstring(tolua_S,(const char*)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelTTF_getFontName'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LabelTTF_setHorizontalAlignment(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LabelTTF* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LabelTTF",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LabelTTF*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LabelTTF_setHorizontalAlignment'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::TextHAlignment arg0;
		ok &= luaval_to_int32(tolua_S, 2,(int*)&arg0);
		if(!ok)
			return 0;
		cobj->setHorizontalAlignment(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelTTF_setHorizontalAlignment'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LabelTTF_disableShadow(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LabelTTF* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LabelTTF",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LabelTTF*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LabelTTF_disableShadow'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->disableShadow();
		return 0;
	}
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->disableShadow(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelTTF_disableShadow'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LabelTTF_disableStroke(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LabelTTF* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LabelTTF",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LabelTTF*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LabelTTF_disableStroke'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->disableStroke();
		return 0;
	}
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->disableStroke(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelTTF_disableStroke'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LabelTTF_create(lua_State* tolua_S)
{
	int argc = 0;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"LabelTTF",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S)-1;

	do {
		if (argc == 5) {
			const char* arg0;
			std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
			if (!ok) { ok = true; break; }
			const char* arg1;
			std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp); arg1 = arg1_tmp.c_str();
			if (!ok) { ok = true; break; }
			double arg2;
			ok &= luaval_to_number(tolua_S, 4,&arg2);
			if (!ok) { ok = true; break; }
			cocos2d::Size arg3;
			ok &= luaval_to_size(tolua_S, 5, &arg3);
			if (!ok) { ok = true; break; }
			cocos2d::TextHAlignment arg4;
			ok &= luaval_to_int32(tolua_S, 6,(int*)&arg4);
			if (!ok) { ok = true; break; }
			cocos2d::LabelTTF* ret = cocos2d::LabelTTF::create(arg0, arg1, arg2, arg3, arg4);
			tolua_pushusertype(tolua_S,ret,"LabelTTF");
			return 1;
		}
	} while (0);
	do {
		if (argc == 3) {
			const char* arg0;
			std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
			if (!ok) { ok = true; break; }
			const char* arg1;
			std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp); arg1 = arg1_tmp.c_str();
			if (!ok) { ok = true; break; }
			double arg2;
			ok &= luaval_to_number(tolua_S, 4,&arg2);
			if (!ok) { ok = true; break; }
			cocos2d::LabelTTF* ret = cocos2d::LabelTTF::create(arg0, arg1, arg2);
			tolua_pushusertype(tolua_S,ret,"LabelTTF");
			return 1;
		}
	} while (0);
	do {
		if (argc == 6) {
			const char* arg0;
			std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
			if (!ok) { ok = true; break; }
			const char* arg1;
			std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp); arg1 = arg1_tmp.c_str();
			if (!ok) { ok = true; break; }
			double arg2;
			ok &= luaval_to_number(tolua_S, 4,&arg2);
			if (!ok) { ok = true; break; }
			cocos2d::Size arg3;
			ok &= luaval_to_size(tolua_S, 5, &arg3);
			if (!ok) { ok = true; break; }
			cocos2d::TextHAlignment arg4;
			ok &= luaval_to_int32(tolua_S, 6,(int*)&arg4);
			if (!ok) { ok = true; break; }
			cocos2d::TextVAlignment arg5;
			ok &= luaval_to_int32(tolua_S, 7,(int*)&arg5);
			if (!ok) { ok = true; break; }
			cocos2d::LabelTTF* ret = cocos2d::LabelTTF::create(arg0, arg1, arg2, arg3, arg4, arg5);
			tolua_pushusertype(tolua_S,ret,"LabelTTF");
			return 1;
		}
	} while (0);
	do {
		if (argc == 0) {
			cocos2d::LabelTTF* ret = cocos2d::LabelTTF::create();
			tolua_pushusertype(tolua_S,ret,"LabelTTF");
			return 1;
		}
	} while (0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelTTF_create'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LabelTTF_createWithFontDefinition(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"LabelTTF",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 2) {
		const char* arg0;
		cocos2d::FontDefinition arg1;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		ok &= luaval_to_fontdefinition(tolua_S, 3, &arg1);
		if(!ok)
			return 0;
		cocos2d::LabelTTF* ret = cocos2d::LabelTTF::createWithFontDefinition(arg0, arg1);
		tolua_pushusertype(tolua_S,ret,"LabelTTF");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelTTF_createWithFontDefinition'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_LabelTTF_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LabelTTF* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::LabelTTF();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"LabelTTF");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelTTF_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_LabelTTF_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (LabelTTF)");
	return 0;
}

int lua_register_cocos2dx_LabelTTF(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"LabelTTF");
	tolua_cclass(tolua_S,"LabelTTF","LabelTTF","Sprite",NULL);

	tolua_beginmodule(tolua_S,"LabelTTF");
		tolua_function(tolua_S,"enableShadow",lua_cocos2dx_LabelTTF_enableShadow);
		tolua_function(tolua_S,"setDimensions",lua_cocos2dx_LabelTTF_setDimensions);
		tolua_function(tolua_S,"getFontSize",lua_cocos2dx_LabelTTF_getFontSize);
		tolua_function(tolua_S,"getString",lua_cocos2dx_LabelTTF_getString);
		tolua_function(tolua_S,"setTextDefinition",lua_cocos2dx_LabelTTF_setTextDefinition);
		tolua_function(tolua_S,"setFontName",lua_cocos2dx_LabelTTF_setFontName);
		tolua_function(tolua_S,"getHorizontalAlignment",lua_cocos2dx_LabelTTF_getHorizontalAlignment);
		tolua_function(tolua_S,"initWithStringAndTextDefinition",lua_cocos2dx_LabelTTF_initWithStringAndTextDefinition);
		tolua_function(tolua_S,"setString",lua_cocos2dx_LabelTTF_setString);
		tolua_function(tolua_S,"initWithString",lua_cocos2dx_LabelTTF_initWithString);
		tolua_function(tolua_S,"init",lua_cocos2dx_LabelTTF_init);
		tolua_function(tolua_S,"setFontFillColor",lua_cocos2dx_LabelTTF_setFontFillColor);
		tolua_function(tolua_S,"enableStroke",lua_cocos2dx_LabelTTF_enableStroke);
		tolua_function(tolua_S,"getDimensions",lua_cocos2dx_LabelTTF_getDimensions);
		tolua_function(tolua_S,"setVerticalAlignment",lua_cocos2dx_LabelTTF_setVerticalAlignment);
		tolua_function(tolua_S,"setFontSize",lua_cocos2dx_LabelTTF_setFontSize);
		tolua_function(tolua_S,"getVerticalAlignment",lua_cocos2dx_LabelTTF_getVerticalAlignment);
		tolua_function(tolua_S,"getTextDefinition",lua_cocos2dx_LabelTTF_getTextDefinition);
		tolua_function(tolua_S,"getFontName",lua_cocos2dx_LabelTTF_getFontName);
		tolua_function(tolua_S,"setHorizontalAlignment",lua_cocos2dx_LabelTTF_setHorizontalAlignment);
		tolua_function(tolua_S,"disableShadow",lua_cocos2dx_LabelTTF_disableShadow);
		tolua_function(tolua_S,"disableStroke",lua_cocos2dx_LabelTTF_disableStroke);
		tolua_function(tolua_S,"new",lua_cocos2dx_LabelTTF_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_LabelTTF_create);
		tolua_function(tolua_S,"createWithFontDefinition", lua_cocos2dx_LabelTTF_createWithFontDefinition);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_SpriteBatchNode_appendChild(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SpriteBatchNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SpriteBatchNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SpriteBatchNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SpriteBatchNode_appendChild'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Sprite* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Sprite",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Sprite*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->appendChild(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SpriteBatchNode_appendChild'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SpriteBatchNode_reorderBatch(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SpriteBatchNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SpriteBatchNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SpriteBatchNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SpriteBatchNode_reorderBatch'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->reorderBatch(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SpriteBatchNode_reorderBatch'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SpriteBatchNode_addChild(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SpriteBatchNode* cobj = NULL;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SpriteBatchNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SpriteBatchNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SpriteBatchNode_addChild'", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	do{
		if (argc == 2) {
			cocos2d::Node* arg0;
			#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};

			if (!ok) { ok = true; break; }
			int arg1;
			ok &= luaval_to_int32(tolua_S, 3,(int*)&arg1);

			if (!ok) { ok = true; break; }
		cobj->addChild(arg0, arg1);
		return 0;
		}
	}while(0);
	do{
		if (argc == 1) {
			cocos2d::Node* arg0;
			#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};

			if (!ok) { ok = true; break; }
		cobj->addChild(arg0);
		return 0;
		}
	}while(0);
	do{
		if (argc == 3) {
			cocos2d::Node* arg0;
			#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};

			if (!ok) { ok = true; break; }
			int arg1;
			ok &= luaval_to_int32(tolua_S, 3,(int*)&arg1);

			if (!ok) { ok = true; break; }
			int arg2;
			ok &= luaval_to_int32(tolua_S, 4,(int*)&arg2);

			if (!ok) { ok = true; break; }
		cobj->addChild(arg0, arg1, arg2);
		return 0;
		}
	}while(0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 3);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SpriteBatchNode_addChild'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SpriteBatchNode_visit(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SpriteBatchNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SpriteBatchNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SpriteBatchNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SpriteBatchNode_visit'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->visit();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SpriteBatchNode_visit'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SpriteBatchNode_setTexture(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SpriteBatchNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SpriteBatchNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SpriteBatchNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SpriteBatchNode_setTexture'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Texture2D* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Texture2D",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Texture2D*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->setTexture(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SpriteBatchNode_setTexture'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SpriteBatchNode_removeChildAtIndex(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SpriteBatchNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SpriteBatchNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SpriteBatchNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SpriteBatchNode_removeChildAtIndex'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		unsigned int arg0;
		bool arg1;
		ok &= luaval_to_uint32(tolua_S, 2,&arg0);
		ok &= luaval_to_boolean(tolua_S, 3,&arg1);
		if(!ok)
			return 0;
		cobj->removeChildAtIndex(arg0, arg1);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SpriteBatchNode_removeChildAtIndex'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SpriteBatchNode_removeSpriteFromAtlas(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SpriteBatchNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SpriteBatchNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SpriteBatchNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SpriteBatchNode_removeSpriteFromAtlas'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Sprite* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Sprite",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Sprite*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->removeSpriteFromAtlas(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SpriteBatchNode_removeSpriteFromAtlas'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SpriteBatchNode_atlasIndexForChild(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SpriteBatchNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SpriteBatchNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SpriteBatchNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SpriteBatchNode_atlasIndexForChild'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		cocos2d::Sprite* arg0;
		int arg1;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Sprite",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Sprite*)tolua_tousertype(tolua_S,2,0);
		};
		ok &= luaval_to_int32(tolua_S, 3,(int*)&arg1);
		if(!ok)
			return 0;
		unsigned int ret = cobj->atlasIndexForChild(arg0, arg1);
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SpriteBatchNode_atlasIndexForChild'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SpriteBatchNode_getTexture(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SpriteBatchNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SpriteBatchNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SpriteBatchNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SpriteBatchNode_getTexture'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Texture2D* ret = cobj->getTexture();
		tolua_pushusertype(tolua_S,ret,"Texture2D");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SpriteBatchNode_getTexture'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SpriteBatchNode_increaseAtlasCapacity(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SpriteBatchNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SpriteBatchNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SpriteBatchNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SpriteBatchNode_increaseAtlasCapacity'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->increaseAtlasCapacity();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SpriteBatchNode_increaseAtlasCapacity'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SpriteBatchNode_init(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SpriteBatchNode* cobj = NULL;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SpriteBatchNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SpriteBatchNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SpriteBatchNode_init'", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	do{
		if (argc == 0) {
		bool ret = cobj->init();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
		}
	}while(0);
	do{
		if (argc == 2) {
			const char* arg0;
			std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();

			if (!ok) { ok = true; break; }
			int arg1;
			ok &= luaval_to_int32(tolua_S, 3,(int*)&arg1);

			if (!ok) { ok = true; break; }
		bool ret = cobj->initWithFile(arg0, arg1);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
		}
	}while(0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SpriteBatchNode_init'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SpriteBatchNode_insertChild(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SpriteBatchNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SpriteBatchNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SpriteBatchNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SpriteBatchNode_insertChild'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		cocos2d::Sprite* arg0;
		unsigned int arg1;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Sprite",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Sprite*)tolua_tousertype(tolua_S,2,0);
		};
		ok &= luaval_to_uint32(tolua_S, 3,&arg1);
		if(!ok)
			return 0;
		cobj->insertChild(arg0, arg1);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SpriteBatchNode_insertChild'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SpriteBatchNode_lowestAtlasIndexInChild(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SpriteBatchNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SpriteBatchNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SpriteBatchNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SpriteBatchNode_lowestAtlasIndexInChild'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Sprite* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Sprite",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Sprite*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		unsigned int ret = cobj->lowestAtlasIndexInChild(arg0);
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SpriteBatchNode_lowestAtlasIndexInChild'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SpriteBatchNode_draw(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SpriteBatchNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SpriteBatchNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SpriteBatchNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SpriteBatchNode_draw'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->draw();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SpriteBatchNode_draw'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SpriteBatchNode_initWithTexture(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SpriteBatchNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SpriteBatchNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SpriteBatchNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SpriteBatchNode_initWithTexture'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		cocos2d::Texture2D* arg0;
		int arg1;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Texture2D",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Texture2D*)tolua_tousertype(tolua_S,2,0);
		};
		ok &= luaval_to_int32(tolua_S, 3,(int*)&arg1);
		if(!ok)
			return 0;
		bool ret = cobj->initWithTexture(arg0, arg1);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SpriteBatchNode_initWithTexture'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SpriteBatchNode_setTextureAtlas(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SpriteBatchNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SpriteBatchNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SpriteBatchNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SpriteBatchNode_setTextureAtlas'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::TextureAtlas* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"TextureAtlas",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::TextureAtlas*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->setTextureAtlas(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SpriteBatchNode_setTextureAtlas'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SpriteBatchNode_removeAllChildrenWithCleanup(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SpriteBatchNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SpriteBatchNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SpriteBatchNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SpriteBatchNode_removeAllChildrenWithCleanup'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->removeAllChildrenWithCleanup(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SpriteBatchNode_removeAllChildrenWithCleanup'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SpriteBatchNode_sortAllChildren(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SpriteBatchNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SpriteBatchNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SpriteBatchNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SpriteBatchNode_sortAllChildren'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->sortAllChildren();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SpriteBatchNode_sortAllChildren'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SpriteBatchNode_reorderChild(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SpriteBatchNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SpriteBatchNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SpriteBatchNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SpriteBatchNode_reorderChild'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		cocos2d::Node* arg0;
		int arg1;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		ok &= luaval_to_int32(tolua_S, 3,(int*)&arg1);
		if(!ok)
			return 0;
		cobj->reorderChild(arg0, arg1);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SpriteBatchNode_reorderChild'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SpriteBatchNode_rebuildIndexInOrder(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SpriteBatchNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SpriteBatchNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SpriteBatchNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SpriteBatchNode_rebuildIndexInOrder'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		cocos2d::Sprite* arg0;
		unsigned int arg1;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Sprite",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Sprite*)tolua_tousertype(tolua_S,2,0);
		};
		ok &= luaval_to_uint32(tolua_S, 3,&arg1);
		if(!ok)
			return 0;
		unsigned int ret = cobj->rebuildIndexInOrder(arg0, arg1);
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SpriteBatchNode_rebuildIndexInOrder'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SpriteBatchNode_getTextureAtlas(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SpriteBatchNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SpriteBatchNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SpriteBatchNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SpriteBatchNode_getTextureAtlas'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::TextureAtlas* ret = cobj->getTextureAtlas();
		tolua_pushusertype(tolua_S,ret,"TextureAtlas");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SpriteBatchNode_getTextureAtlas'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SpriteBatchNode_getDescendants(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SpriteBatchNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SpriteBatchNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SpriteBatchNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SpriteBatchNode_getDescendants'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Array* ret = cobj->getDescendants();
		array_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SpriteBatchNode_getDescendants'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SpriteBatchNode_removeChild(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SpriteBatchNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SpriteBatchNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SpriteBatchNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SpriteBatchNode_removeChild'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		cocos2d::Node* arg0;
		bool arg1;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		ok &= luaval_to_boolean(tolua_S, 3,&arg1);
		if(!ok)
			return 0;
		cobj->removeChild(arg0, arg1);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SpriteBatchNode_removeChild'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SpriteBatchNode_highestAtlasIndexInChild(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SpriteBatchNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SpriteBatchNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SpriteBatchNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SpriteBatchNode_highestAtlasIndexInChild'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Sprite* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Sprite",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Sprite*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		unsigned int ret = cobj->highestAtlasIndexInChild(arg0);
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SpriteBatchNode_highestAtlasIndexInChild'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SpriteBatchNode_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"SpriteBatchNode",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 1) {
		const char* arg0;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		if(!ok)
			return 0;
		cocos2d::SpriteBatchNode* ret = cocos2d::SpriteBatchNode::create(arg0);
		tolua_pushusertype(tolua_S,ret,"SpriteBatchNode");
	    return 1;
	}
	if (argc == 2) {
		const char* arg0;
		int arg1;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		ok &= luaval_to_int32(tolua_S, 3,(int*)&arg1);
		if(!ok)
			return 0;
		cocos2d::SpriteBatchNode* ret = cocos2d::SpriteBatchNode::create(arg0, arg1);
		tolua_pushusertype(tolua_S,ret,"SpriteBatchNode");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SpriteBatchNode_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_SpriteBatchNode_createWithTexture(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"SpriteBatchNode",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 1) {
		cocos2d::Texture2D* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Texture2D",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Texture2D*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cocos2d::SpriteBatchNode* ret = cocos2d::SpriteBatchNode::createWithTexture(arg0);
		tolua_pushusertype(tolua_S,ret,"SpriteBatchNode");
	    return 1;
	}
	if (argc == 2) {
		cocos2d::Texture2D* arg0;
		int arg1;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Texture2D",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Texture2D*)tolua_tousertype(tolua_S,2,0);
		};
		ok &= luaval_to_int32(tolua_S, 3,(int*)&arg1);
		if(!ok)
			return 0;
		cocos2d::SpriteBatchNode* ret = cocos2d::SpriteBatchNode::createWithTexture(arg0, arg1);
		tolua_pushusertype(tolua_S,ret,"SpriteBatchNode");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SpriteBatchNode_createWithTexture'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_SpriteBatchNode_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SpriteBatchNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::SpriteBatchNode();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"SpriteBatchNode");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SpriteBatchNode_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_SpriteBatchNode_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (SpriteBatchNode)");
	return 0;
}

int lua_register_cocos2dx_SpriteBatchNode(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"SpriteBatchNode");
	tolua_cclass(tolua_S,"SpriteBatchNode","SpriteBatchNode","Node",NULL);

	tolua_beginmodule(tolua_S,"SpriteBatchNode");
		tolua_function(tolua_S,"appendChild",lua_cocos2dx_SpriteBatchNode_appendChild);
		tolua_function(tolua_S,"reorderBatch",lua_cocos2dx_SpriteBatchNode_reorderBatch);
		tolua_function(tolua_S,"addChild",lua_cocos2dx_SpriteBatchNode_addChild);
		tolua_function(tolua_S,"visit",lua_cocos2dx_SpriteBatchNode_visit);
		tolua_function(tolua_S,"setTexture",lua_cocos2dx_SpriteBatchNode_setTexture);
		tolua_function(tolua_S,"removeChildAtIndex",lua_cocos2dx_SpriteBatchNode_removeChildAtIndex);
		tolua_function(tolua_S,"removeSpriteFromAtlas",lua_cocos2dx_SpriteBatchNode_removeSpriteFromAtlas);
		tolua_function(tolua_S,"atlasIndexForChild",lua_cocos2dx_SpriteBatchNode_atlasIndexForChild);
		tolua_function(tolua_S,"getTexture",lua_cocos2dx_SpriteBatchNode_getTexture);
		tolua_function(tolua_S,"increaseAtlasCapacity",lua_cocos2dx_SpriteBatchNode_increaseAtlasCapacity);
		tolua_function(tolua_S,"init",lua_cocos2dx_SpriteBatchNode_init);
		tolua_function(tolua_S,"insertChild",lua_cocos2dx_SpriteBatchNode_insertChild);
		tolua_function(tolua_S,"lowestAtlasIndexInChild",lua_cocos2dx_SpriteBatchNode_lowestAtlasIndexInChild);
		tolua_function(tolua_S,"draw",lua_cocos2dx_SpriteBatchNode_draw);
		tolua_function(tolua_S,"initWithTexture",lua_cocos2dx_SpriteBatchNode_initWithTexture);
		tolua_function(tolua_S,"setTextureAtlas",lua_cocos2dx_SpriteBatchNode_setTextureAtlas);
		tolua_function(tolua_S,"removeAllChildrenWithCleanup",lua_cocos2dx_SpriteBatchNode_removeAllChildrenWithCleanup);
		tolua_function(tolua_S,"sortAllChildren",lua_cocos2dx_SpriteBatchNode_sortAllChildren);
		tolua_function(tolua_S,"reorderChild",lua_cocos2dx_SpriteBatchNode_reorderChild);
		tolua_function(tolua_S,"rebuildIndexInOrder",lua_cocos2dx_SpriteBatchNode_rebuildIndexInOrder);
		tolua_function(tolua_S,"getTextureAtlas",lua_cocos2dx_SpriteBatchNode_getTextureAtlas);
		tolua_function(tolua_S,"getDescendants",lua_cocos2dx_SpriteBatchNode_getDescendants);
		tolua_function(tolua_S,"removeChild",lua_cocos2dx_SpriteBatchNode_removeChild);
		tolua_function(tolua_S,"highestAtlasIndexInChild",lua_cocos2dx_SpriteBatchNode_highestAtlasIndexInChild);
		tolua_function(tolua_S,"new",lua_cocos2dx_SpriteBatchNode_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_SpriteBatchNode_create);
		tolua_function(tolua_S,"createWithTexture", lua_cocos2dx_SpriteBatchNode_createWithTexture);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_LabelBMFont_setAnchorPoint(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LabelBMFont* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LabelBMFont",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LabelBMFont*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LabelBMFont_setAnchorPoint'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Point arg0;
		ok &= luaval_to_point(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->setAnchorPoint(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelBMFont_setAnchorPoint'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LabelBMFont_createFontChars(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LabelBMFont* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LabelBMFont",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LabelBMFont*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LabelBMFont_createFontChars'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->createFontChars();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelBMFont_createFontChars'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LabelBMFont_getString(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LabelBMFont* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LabelBMFont",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LabelBMFont*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LabelBMFont_getString'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		const char* ret = cobj->getString();
		tolua_pushstring(tolua_S,(const char*)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelBMFont_getString'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LabelBMFont_setScale(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LabelBMFont* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LabelBMFont",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LabelBMFont*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LabelBMFont_setScale'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setScale(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelBMFont_setScale'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LabelBMFont_setOpacity(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LabelBMFont* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LabelBMFont",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LabelBMFont*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LabelBMFont_setOpacity'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		uint16_t arg0;
		ok &= luaval_to_uint16(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setOpacity(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelBMFont_setOpacity'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LabelBMFont_setCascadeOpacityEnabled(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LabelBMFont* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LabelBMFont",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LabelBMFont*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LabelBMFont_setCascadeOpacityEnabled'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setCascadeOpacityEnabled(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelBMFont_setCascadeOpacityEnabled'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LabelBMFont_getFntFile(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LabelBMFont* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LabelBMFont",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LabelBMFont*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LabelBMFont_getFntFile'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		const char* ret = cobj->getFntFile();
		tolua_pushstring(tolua_S,(const char*)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelBMFont_getFntFile'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LabelBMFont_updateLabel(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LabelBMFont* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LabelBMFont",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LabelBMFont*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LabelBMFont_updateLabel'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->updateLabel();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelBMFont_updateLabel'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LabelBMFont_setWidth(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LabelBMFont* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LabelBMFont",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LabelBMFont*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LabelBMFont_setWidth'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setWidth(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelBMFont_setWidth'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LabelBMFont_isOpacityModifyRGB(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LabelBMFont* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LabelBMFont",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LabelBMFont*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LabelBMFont_isOpacityModifyRGB'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->isOpacityModifyRGB();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelBMFont_isOpacityModifyRGB'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LabelBMFont_isCascadeOpacityEnabled(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LabelBMFont* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LabelBMFont",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LabelBMFont*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LabelBMFont_isCascadeOpacityEnabled'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->isCascadeOpacityEnabled();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelBMFont_isCascadeOpacityEnabled'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LabelBMFont_setString(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LabelBMFont* cobj = NULL;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LabelBMFont",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LabelBMFont*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LabelBMFont_setString'", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	do{
		if (argc == 2) {
			const char* arg0;
			std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();

			if (!ok) { ok = true; break; }
			bool arg1;
			ok &= luaval_to_boolean(tolua_S, 3,&arg1);

			if (!ok) { ok = true; break; }
		cobj->setString(arg0, arg1);
		return 0;
		}
	}while(0);
	do{
		if (argc == 1) {
			const char* arg0;
			std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();

			if (!ok) { ok = true; break; }
		cobj->setString(arg0);
		return 0;
		}
	}while(0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelBMFont_setString'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LabelBMFont_initWithString(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LabelBMFont* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LabelBMFont",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LabelBMFont*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LabelBMFont_initWithString'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		const char* arg0;
		const char* arg1;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp); arg1 = arg1_tmp.c_str();
		if(!ok)
			return 0;
		bool ret = cobj->initWithString(arg0, arg1);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	if (argc == 3) {
		const char* arg0;
		const char* arg1;
		double arg2;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp); arg1 = arg1_tmp.c_str();
		ok &= luaval_to_number(tolua_S, 4,&arg2);
		if(!ok)
			return 0;
		bool ret = cobj->initWithString(arg0, arg1, arg2);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	if (argc == 4) {
		const char* arg0;
		const char* arg1;
		double arg2;
		cocos2d::TextHAlignment arg3;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp); arg1 = arg1_tmp.c_str();
		ok &= luaval_to_number(tolua_S, 4,&arg2);
		ok &= luaval_to_int32(tolua_S, 5,(int*)&arg3);
		if(!ok)
			return 0;
		bool ret = cobj->initWithString(arg0, arg1, arg2, arg3);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	if (argc == 5) {
		const char* arg0;
		const char* arg1;
		double arg2;
		cocos2d::TextHAlignment arg3;
		cocos2d::Point arg4;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp); arg1 = arg1_tmp.c_str();
		ok &= luaval_to_number(tolua_S, 4,&arg2);
		ok &= luaval_to_int32(tolua_S, 5,(int*)&arg3);
		ok &= luaval_to_point(tolua_S, 6, &arg4);
		if(!ok)
			return 0;
		bool ret = cobj->initWithString(arg0, arg1, arg2, arg3, arg4);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelBMFont_initWithString'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LabelBMFont_setCascadeColorEnabled(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LabelBMFont* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LabelBMFont",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LabelBMFont*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LabelBMFont_setCascadeColorEnabled'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setCascadeColorEnabled(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelBMFont_setCascadeColorEnabled'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LabelBMFont_setOpacityModifyRGB(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LabelBMFont* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LabelBMFont",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LabelBMFont*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LabelBMFont_setOpacityModifyRGB'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setOpacityModifyRGB(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelBMFont_setOpacityModifyRGB'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LabelBMFont_updateDisplayedOpacity(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LabelBMFont* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LabelBMFont",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LabelBMFont*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LabelBMFont_updateDisplayedOpacity'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		uint16_t arg0;
		ok &= luaval_to_uint16(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->updateDisplayedOpacity(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelBMFont_updateDisplayedOpacity'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LabelBMFont_init(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LabelBMFont* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LabelBMFont",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LabelBMFont*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LabelBMFont_init'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->init();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelBMFont_init'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LabelBMFont_setFntFile(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LabelBMFont* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LabelBMFont",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LabelBMFont*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LabelBMFont_setFntFile'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		const char* arg0;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		if(!ok)
			return 0;
		cobj->setFntFile(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelBMFont_setFntFile'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LabelBMFont_getOpacity(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LabelBMFont* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LabelBMFont",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LabelBMFont*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LabelBMFont_getOpacity'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		unsigned char ret = cobj->getOpacity();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelBMFont_getOpacity'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LabelBMFont_setLineBreakWithoutSpace(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LabelBMFont* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LabelBMFont",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LabelBMFont*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LabelBMFont_setLineBreakWithoutSpace'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setLineBreakWithoutSpace(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelBMFont_setLineBreakWithoutSpace'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LabelBMFont_setScaleY(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LabelBMFont* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LabelBMFont",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LabelBMFont*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LabelBMFont_setScaleY'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setScaleY(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelBMFont_setScaleY'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LabelBMFont_setScaleX(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LabelBMFont* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LabelBMFont",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LabelBMFont*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LabelBMFont_setScaleX'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setScaleX(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelBMFont_setScaleX'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LabelBMFont_getColor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LabelBMFont* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LabelBMFont",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LabelBMFont*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LabelBMFont_getColor'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Color3B ret = cobj->getColor();
		color3b_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelBMFont_getColor'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LabelBMFont_getDisplayedOpacity(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LabelBMFont* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LabelBMFont",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LabelBMFont*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LabelBMFont_getDisplayedOpacity'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		unsigned char ret = cobj->getDisplayedOpacity();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelBMFont_getDisplayedOpacity'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LabelBMFont_isCascadeColorEnabled(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LabelBMFont* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LabelBMFont",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LabelBMFont*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LabelBMFont_isCascadeColorEnabled'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->isCascadeColorEnabled();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelBMFont_isCascadeColorEnabled'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LabelBMFont_setColor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LabelBMFont* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LabelBMFont",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LabelBMFont*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LabelBMFont_setColor'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Color3B arg0;
		ok &= luaval_to_color3b(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->setColor(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelBMFont_setColor'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LabelBMFont_setCString(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LabelBMFont* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LabelBMFont",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LabelBMFont*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LabelBMFont_setCString'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		const char* arg0;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		if(!ok)
			return 0;
		cobj->setCString(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelBMFont_setCString'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LabelBMFont_getDisplayedColor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LabelBMFont* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LabelBMFont",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LabelBMFont*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LabelBMFont_getDisplayedColor'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Color3B ret = cobj->getDisplayedColor();
		color3b_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelBMFont_getDisplayedColor'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LabelBMFont_updateDisplayedColor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LabelBMFont* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LabelBMFont",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LabelBMFont*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LabelBMFont_updateDisplayedColor'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Color3B arg0;
		ok &= luaval_to_color3b(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->updateDisplayedColor(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelBMFont_updateDisplayedColor'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LabelBMFont_setAlignment(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LabelBMFont* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LabelBMFont",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LabelBMFont*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LabelBMFont_setAlignment'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::TextHAlignment arg0;
		ok &= luaval_to_int32(tolua_S, 2,(int*)&arg0);
		if(!ok)
			return 0;
		cobj->setAlignment(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelBMFont_setAlignment'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LabelBMFont_purgeCachedData(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"LabelBMFont",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 0) {
		if(!ok)
			return 0;
		cocos2d::LabelBMFont::purgeCachedData();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelBMFont_purgeCachedData'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_LabelBMFont_create(lua_State* tolua_S)
{
	int argc = 0;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"LabelBMFont",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S)-1;

	do {
		if (argc == 4) {
			const char* arg0;
			std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
			if (!ok) { ok = true; break; }
			const char* arg1;
			std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp); arg1 = arg1_tmp.c_str();
			if (!ok) { ok = true; break; }
			double arg2;
			ok &= luaval_to_number(tolua_S, 4,&arg2);
			if (!ok) { ok = true; break; }
			cocos2d::TextHAlignment arg3;
			ok &= luaval_to_int32(tolua_S, 5,(int*)&arg3);
			if (!ok) { ok = true; break; }
			cocos2d::LabelBMFont* ret = cocos2d::LabelBMFont::create(arg0, arg1, arg2, arg3);
			tolua_pushusertype(tolua_S,ret,"LabelBMFont");
			return 1;
		}
	} while (0);
	do {
		if (argc == 5) {
			const char* arg0;
			std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
			if (!ok) { ok = true; break; }
			const char* arg1;
			std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp); arg1 = arg1_tmp.c_str();
			if (!ok) { ok = true; break; }
			double arg2;
			ok &= luaval_to_number(tolua_S, 4,&arg2);
			if (!ok) { ok = true; break; }
			cocos2d::TextHAlignment arg3;
			ok &= luaval_to_int32(tolua_S, 5,(int*)&arg3);
			if (!ok) { ok = true; break; }
			cocos2d::Point arg4;
			ok &= luaval_to_point(tolua_S, 6, &arg4);
			if (!ok) { ok = true; break; }
			cocos2d::LabelBMFont* ret = cocos2d::LabelBMFont::create(arg0, arg1, arg2, arg3, arg4);
			tolua_pushusertype(tolua_S,ret,"LabelBMFont");
			return 1;
		}
	} while (0);
	do {
		if (argc == 3) {
			const char* arg0;
			std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
			if (!ok) { ok = true; break; }
			const char* arg1;
			std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp); arg1 = arg1_tmp.c_str();
			if (!ok) { ok = true; break; }
			double arg2;
			ok &= luaval_to_number(tolua_S, 4,&arg2);
			if (!ok) { ok = true; break; }
			cocos2d::LabelBMFont* ret = cocos2d::LabelBMFont::create(arg0, arg1, arg2);
			tolua_pushusertype(tolua_S,ret,"LabelBMFont");
			return 1;
		}
	} while (0);
	do {
		if (argc == 2) {
			const char* arg0;
			std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
			if (!ok) { ok = true; break; }
			const char* arg1;
			std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp); arg1 = arg1_tmp.c_str();
			if (!ok) { ok = true; break; }
			cocos2d::LabelBMFont* ret = cocos2d::LabelBMFont::create(arg0, arg1);
			tolua_pushusertype(tolua_S,ret,"LabelBMFont");
			return 1;
		}
	} while (0);
	do {
		if (argc == 0) {
			cocos2d::LabelBMFont* ret = cocos2d::LabelBMFont::create();
			tolua_pushusertype(tolua_S,ret,"LabelBMFont");
			return 1;
		}
	} while (0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelBMFont_create'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LabelBMFont_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LabelBMFont* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::LabelBMFont();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"LabelBMFont");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LabelBMFont_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_LabelBMFont_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (LabelBMFont)");
	return 0;
}

int lua_register_cocos2dx_LabelBMFont(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"LabelBMFont");
	tolua_cclass(tolua_S,"LabelBMFont","LabelBMFont","SpriteBatchNode",NULL);

	tolua_beginmodule(tolua_S,"LabelBMFont");
		tolua_function(tolua_S,"setAnchorPoint",lua_cocos2dx_LabelBMFont_setAnchorPoint);
		tolua_function(tolua_S,"createFontChars",lua_cocos2dx_LabelBMFont_createFontChars);
		tolua_function(tolua_S,"getString",lua_cocos2dx_LabelBMFont_getString);
		tolua_function(tolua_S,"setScale",lua_cocos2dx_LabelBMFont_setScale);
		tolua_function(tolua_S,"setOpacity",lua_cocos2dx_LabelBMFont_setOpacity);
		tolua_function(tolua_S,"setCascadeOpacityEnabled",lua_cocos2dx_LabelBMFont_setCascadeOpacityEnabled);
		tolua_function(tolua_S,"getFntFile",lua_cocos2dx_LabelBMFont_getFntFile);
		tolua_function(tolua_S,"updateLabel",lua_cocos2dx_LabelBMFont_updateLabel);
		tolua_function(tolua_S,"setWidth",lua_cocos2dx_LabelBMFont_setWidth);
		tolua_function(tolua_S,"isOpacityModifyRGB",lua_cocos2dx_LabelBMFont_isOpacityModifyRGB);
		tolua_function(tolua_S,"isCascadeOpacityEnabled",lua_cocos2dx_LabelBMFont_isCascadeOpacityEnabled);
		tolua_function(tolua_S,"setString",lua_cocos2dx_LabelBMFont_setString);
		tolua_function(tolua_S,"initWithString",lua_cocos2dx_LabelBMFont_initWithString);
		tolua_function(tolua_S,"setCascadeColorEnabled",lua_cocos2dx_LabelBMFont_setCascadeColorEnabled);
		tolua_function(tolua_S,"setOpacityModifyRGB",lua_cocos2dx_LabelBMFont_setOpacityModifyRGB);
		tolua_function(tolua_S,"updateDisplayedOpacity",lua_cocos2dx_LabelBMFont_updateDisplayedOpacity);
		tolua_function(tolua_S,"init",lua_cocos2dx_LabelBMFont_init);
		tolua_function(tolua_S,"setFntFile",lua_cocos2dx_LabelBMFont_setFntFile);
		tolua_function(tolua_S,"getOpacity",lua_cocos2dx_LabelBMFont_getOpacity);
		tolua_function(tolua_S,"setLineBreakWithoutSpace",lua_cocos2dx_LabelBMFont_setLineBreakWithoutSpace);
		tolua_function(tolua_S,"setScaleY",lua_cocos2dx_LabelBMFont_setScaleY);
		tolua_function(tolua_S,"setScaleX",lua_cocos2dx_LabelBMFont_setScaleX);
		tolua_function(tolua_S,"getColor",lua_cocos2dx_LabelBMFont_getColor);
		tolua_function(tolua_S,"getDisplayedOpacity",lua_cocos2dx_LabelBMFont_getDisplayedOpacity);
		tolua_function(tolua_S,"isCascadeColorEnabled",lua_cocos2dx_LabelBMFont_isCascadeColorEnabled);
		tolua_function(tolua_S,"setColor",lua_cocos2dx_LabelBMFont_setColor);
		tolua_function(tolua_S,"setCString",lua_cocos2dx_LabelBMFont_setCString);
		tolua_function(tolua_S,"getDisplayedColor",lua_cocos2dx_LabelBMFont_getDisplayedColor);
		tolua_function(tolua_S,"updateDisplayedColor",lua_cocos2dx_LabelBMFont_updateDisplayedColor);
		tolua_function(tolua_S,"setAlignment",lua_cocos2dx_LabelBMFont_setAlignment);
		tolua_function(tolua_S,"new",lua_cocos2dx_LabelBMFont_constructor);
		tolua_function(tolua_S,"purgeCachedData", lua_cocos2dx_LabelBMFont_purgeCachedData);
		tolua_function(tolua_S,"create", lua_cocos2dx_LabelBMFont_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_Label_setLineBreakWithoutSpace(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Label* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Label",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Label*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Label_setLineBreakWithoutSpace'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setLineBreakWithoutSpace(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Label_setLineBreakWithoutSpace'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Label_setScaleY(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Label* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Label",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Label*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Label_setScaleY'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setScaleY(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Label_setScaleY'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Label_setScaleX(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Label* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Label",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Label*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Label_setScaleX'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setScaleX(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Label_setScaleX'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Label_setScale(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Label* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Label",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Label*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Label_setScale'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setScale(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Label_setScale'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Label_setAlignment(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Label* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Label",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Label*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Label_setAlignment'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::TextHAlignment arg0;
		ok &= luaval_to_int32(tolua_S, 2,(int*)&arg0);
		if(!ok)
			return 0;
		cobj->setAlignment(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Label_setAlignment'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Label_setWidth(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Label* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Label",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Label*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Label_setWidth'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setWidth(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Label_setWidth'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Label_createWithBMFont(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"Label",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 2) {
		const char* arg0;
		const char* arg1;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp); arg1 = arg1_tmp.c_str();
		if(!ok)
			return 0;
		cocos2d::Label* ret = cocos2d::Label::createWithBMFont(arg0, arg1);
		tolua_pushusertype(tolua_S,ret,"Label");
	    return 1;
	}
	if (argc == 3) {
		const char* arg0;
		const char* arg1;
		int arg2;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp); arg1 = arg1_tmp.c_str();
		ok &= luaval_to_int32(tolua_S, 4,(int*)&arg2);
		if(!ok)
			return 0;
		cocos2d::Label* ret = cocos2d::Label::createWithBMFont(arg0, arg1, arg2);
		tolua_pushusertype(tolua_S,ret,"Label");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Label_createWithBMFont'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_Label_createWithBMFontOLD(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"Label",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 2) {
		const char* arg0;
		const char* arg1;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp); arg1 = arg1_tmp.c_str();
		if(!ok)
			return 0;
		cocos2d::Label* ret = cocos2d::Label::createWithBMFontOLD(arg0, arg1);
		tolua_pushusertype(tolua_S,ret,"Label");
	    return 1;
	}
	if (argc == 3) {
		const char* arg0;
		const char* arg1;
		int arg2;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp); arg1 = arg1_tmp.c_str();
		ok &= luaval_to_int32(tolua_S, 4,(int*)&arg2);
		if(!ok)
			return 0;
		cocos2d::Label* ret = cocos2d::Label::createWithBMFontOLD(arg0, arg1, arg2);
		tolua_pushusertype(tolua_S,ret,"Label");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Label_createWithBMFontOLD'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_Label_createWithTTF(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"Label",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 3) {
		const char* arg0;
		const char* arg1;
		int arg2;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp); arg1 = arg1_tmp.c_str();
		ok &= luaval_to_int32(tolua_S, 4,(int*)&arg2);
		if(!ok)
			return 0;
		cocos2d::Label* ret = cocos2d::Label::createWithTTF(arg0, arg1, arg2);
		tolua_pushusertype(tolua_S,ret,"Label");
	    return 1;
	}
	if (argc == 4) {
		const char* arg0;
		const char* arg1;
		int arg2;
		cocos2d::GlyphCollection arg3;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp); arg1 = arg1_tmp.c_str();
		ok &= luaval_to_int32(tolua_S, 4,(int*)&arg2);
		ok &= luaval_to_int32(tolua_S, 5,(int*)&arg3);
		if(!ok)
			return 0;
		cocos2d::Label* ret = cocos2d::Label::createWithTTF(arg0, arg1, arg2, arg3);
		tolua_pushusertype(tolua_S,ret,"Label");
	    return 1;
	}
	if (argc == 5) {
		const char* arg0;
		const char* arg1;
		int arg2;
		cocos2d::GlyphCollection arg3;
		int arg4;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp); arg1 = arg1_tmp.c_str();
		ok &= luaval_to_int32(tolua_S, 4,(int*)&arg2);
		ok &= luaval_to_int32(tolua_S, 5,(int*)&arg3);
		ok &= luaval_to_int32(tolua_S, 6,(int*)&arg4);
		if(!ok)
			return 0;
		cocos2d::Label* ret = cocos2d::Label::createWithTTF(arg0, arg1, arg2, arg3, arg4);
		tolua_pushusertype(tolua_S,ret,"Label");
	    return 1;
	}
	if (argc == 6) {
		const char* arg0;
		const char* arg1;
		int arg2;
		cocos2d::GlyphCollection arg3;
		int arg4;
		const char* arg5;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp); arg1 = arg1_tmp.c_str();
		ok &= luaval_to_int32(tolua_S, 4,(int*)&arg2);
		ok &= luaval_to_int32(tolua_S, 5,(int*)&arg3);
		ok &= luaval_to_int32(tolua_S, 6,(int*)&arg4);
		std::string arg5_tmp; ok &= luaval_to_std_string(tolua_S, 7, &arg5_tmp); arg5 = arg5_tmp.c_str();
		if(!ok)
			return 0;
		cocos2d::Label* ret = cocos2d::Label::createWithTTF(arg0, arg1, arg2, arg3, arg4, arg5);
		tolua_pushusertype(tolua_S,ret,"Label");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 3);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Label_createWithTTF'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_Label_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (Label)");
	return 0;
}

int lua_register_cocos2dx_Label(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"Label");
	tolua_cclass(tolua_S,"Label","Label","SpriteBatchNode",NULL);

	tolua_beginmodule(tolua_S,"Label");
		tolua_function(tolua_S,"setLineBreakWithoutSpace",lua_cocos2dx_Label_setLineBreakWithoutSpace);
		tolua_function(tolua_S,"setScaleY",lua_cocos2dx_Label_setScaleY);
		tolua_function(tolua_S,"setScaleX",lua_cocos2dx_Label_setScaleX);
		tolua_function(tolua_S,"setScale",lua_cocos2dx_Label_setScale);
		tolua_function(tolua_S,"setAlignment",lua_cocos2dx_Label_setAlignment);
		tolua_function(tolua_S,"setWidth",lua_cocos2dx_Label_setWidth);
		tolua_function(tolua_S,"createWithBMFont", lua_cocos2dx_Label_createWithBMFont);
		tolua_function(tolua_S,"createWithBMFontOLD", lua_cocos2dx_Label_createWithBMFontOLD);
		tolua_function(tolua_S,"createWithTTF", lua_cocos2dx_Label_createWithTTF);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_Layer_keyBackClicked(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Layer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Layer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Layer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Layer_keyBackClicked'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->keyBackClicked();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Layer_keyBackClicked'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Layer_ccTouchBegan(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Layer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Layer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Layer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Layer_ccTouchBegan'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		cocos2d::Touch* arg0;
		cocos2d::Event* arg1;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Touch",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Touch*)tolua_tousertype(tolua_S,2,0);
		};
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Event",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Event*)tolua_tousertype(tolua_S,3,0);
		};
		if(!ok)
			return 0;
		bool ret = cobj->ccTouchBegan(arg0, arg1);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Layer_ccTouchBegan'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Layer_isKeyboardEnabled(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Layer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Layer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Layer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Layer_isKeyboardEnabled'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->isKeyboardEnabled();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Layer_isKeyboardEnabled'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Layer_setAccelerometerInterval(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Layer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Layer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Layer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Layer_setAccelerometerInterval'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setAccelerometerInterval(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Layer_setAccelerometerInterval'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Layer_ccTouchesCancelled(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Layer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Layer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Layer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Layer_ccTouchesCancelled'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		cocos2d::Set* arg0;
		cocos2d::Event* arg1;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Set",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Set*)tolua_tousertype(tolua_S,2,0);
		};
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Event",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Event*)tolua_tousertype(tolua_S,3,0);
		};
		if(!ok)
			return 0;
		cobj->ccTouchesCancelled(arg0, arg1);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Layer_ccTouchesCancelled'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Layer_ccTouchesMoved(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Layer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Layer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Layer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Layer_ccTouchesMoved'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		cocos2d::Set* arg0;
		cocos2d::Event* arg1;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Set",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Set*)tolua_tousertype(tolua_S,2,0);
		};
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Event",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Event*)tolua_tousertype(tolua_S,3,0);
		};
		if(!ok)
			return 0;
		cobj->ccTouchesMoved(arg0, arg1);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Layer_ccTouchesMoved'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Layer_isSwallowsTouches(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Layer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Layer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Layer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Layer_isSwallowsTouches'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->isSwallowsTouches();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Layer_isSwallowsTouches'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Layer_getTouchMode(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Layer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Layer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Layer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Layer_getTouchMode'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		int ret = (int)cobj->getTouchMode();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Layer_getTouchMode'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Layer_setAccelerometerEnabled(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Layer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Layer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Layer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Layer_setAccelerometerEnabled'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setAccelerometerEnabled(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Layer_setAccelerometerEnabled'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Layer_init(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Layer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Layer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Layer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Layer_init'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->init();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Layer_init'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Layer_isTouchEnabled(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Layer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Layer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Layer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Layer_isTouchEnabled'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->isTouchEnabled();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Layer_isTouchEnabled'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Layer_ccTouchMoved(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Layer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Layer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Layer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Layer_ccTouchMoved'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		cocos2d::Touch* arg0;
		cocos2d::Event* arg1;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Touch",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Touch*)tolua_tousertype(tolua_S,2,0);
		};
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Event",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Event*)tolua_tousertype(tolua_S,3,0);
		};
		if(!ok)
			return 0;
		cobj->ccTouchMoved(arg0, arg1);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Layer_ccTouchMoved'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Layer_setTouchEnabled(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Layer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Layer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Layer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Layer_setTouchEnabled'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setTouchEnabled(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Layer_setTouchEnabled'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Layer_setKeyboardEnabled(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Layer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Layer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Layer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Layer_setKeyboardEnabled'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setKeyboardEnabled(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Layer_setKeyboardEnabled'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Layer_isKeypadEnabled(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Layer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Layer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Layer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Layer_isKeypadEnabled'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->isKeypadEnabled();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Layer_isKeypadEnabled'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Layer_ccTouchesEnded(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Layer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Layer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Layer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Layer_ccTouchesEnded'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		cocos2d::Set* arg0;
		cocos2d::Event* arg1;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Set",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Set*)tolua_tousertype(tolua_S,2,0);
		};
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Event",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Event*)tolua_tousertype(tolua_S,3,0);
		};
		if(!ok)
			return 0;
		cobj->ccTouchesEnded(arg0, arg1);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Layer_ccTouchesEnded'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Layer_setTouchMode(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Layer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Layer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Layer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Layer_setTouchMode'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Touch::DispatchMode arg0;
		ok &= luaval_to_int32(tolua_S, 2,(int*)&arg0);
		if(!ok)
			return 0;
		cobj->setTouchMode(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Layer_setTouchMode'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Layer_isAccelerometerEnabled(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Layer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Layer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Layer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Layer_isAccelerometerEnabled'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->isAccelerometerEnabled();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Layer_isAccelerometerEnabled'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Layer_ccTouchEnded(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Layer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Layer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Layer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Layer_ccTouchEnded'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		cocos2d::Touch* arg0;
		cocos2d::Event* arg1;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Touch",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Touch*)tolua_tousertype(tolua_S,2,0);
		};
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Event",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Event*)tolua_tousertype(tolua_S,3,0);
		};
		if(!ok)
			return 0;
		cobj->ccTouchEnded(arg0, arg1);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Layer_ccTouchEnded'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Layer_ccTouchCancelled(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Layer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Layer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Layer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Layer_ccTouchCancelled'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		cocos2d::Touch* arg0;
		cocos2d::Event* arg1;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Touch",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Touch*)tolua_tousertype(tolua_S,2,0);
		};
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Event",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Event*)tolua_tousertype(tolua_S,3,0);
		};
		if(!ok)
			return 0;
		cobj->ccTouchCancelled(arg0, arg1);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Layer_ccTouchCancelled'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Layer_setSwallowsTouches(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Layer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Layer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Layer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Layer_setSwallowsTouches'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setSwallowsTouches(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Layer_setSwallowsTouches'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Layer_ccTouchesBegan(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Layer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Layer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Layer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Layer_ccTouchesBegan'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		cocos2d::Set* arg0;
		cocos2d::Event* arg1;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Set",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Set*)tolua_tousertype(tolua_S,2,0);
		};
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Event",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Event*)tolua_tousertype(tolua_S,3,0);
		};
		if(!ok)
			return 0;
		cobj->ccTouchesBegan(arg0, arg1);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Layer_ccTouchesBegan'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Layer_setTouchPriority(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Layer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Layer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Layer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Layer_setTouchPriority'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		int arg0;
		ok &= luaval_to_int32(tolua_S, 2,(int*)&arg0);
		if(!ok)
			return 0;
		cobj->setTouchPriority(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Layer_setTouchPriority'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Layer_getTouchPriority(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Layer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Layer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Layer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Layer_getTouchPriority'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		int ret = cobj->getTouchPriority();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Layer_getTouchPriority'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Layer_setKeypadEnabled(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Layer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Layer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Layer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Layer_setKeypadEnabled'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setKeypadEnabled(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Layer_setKeypadEnabled'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Layer_registerWithTouchDispatcher(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Layer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Layer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Layer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Layer_registerWithTouchDispatcher'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->registerWithTouchDispatcher();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Layer_registerWithTouchDispatcher'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Layer_keyMenuClicked(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Layer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Layer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Layer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Layer_keyMenuClicked'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->keyMenuClicked();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Layer_keyMenuClicked'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Layer_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"Layer",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 0) {
		if(!ok)
			return 0;
		cocos2d::Layer* ret = cocos2d::Layer::create();
		tolua_pushusertype(tolua_S,ret,"Layer");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Layer_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_Layer_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Layer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::Layer();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"Layer");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Layer_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_Layer_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (Layer)");
	return 0;
}

int lua_register_cocos2dx_Layer(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"Layer");
	tolua_cclass(tolua_S,"Layer","Layer","Node",NULL);

	tolua_beginmodule(tolua_S,"Layer");
		tolua_function(tolua_S,"keyBackClicked",lua_cocos2dx_Layer_keyBackClicked);
		tolua_function(tolua_S,"ccTouchBegan",lua_cocos2dx_Layer_ccTouchBegan);
		tolua_function(tolua_S,"isKeyboardEnabled",lua_cocos2dx_Layer_isKeyboardEnabled);
		tolua_function(tolua_S,"setAccelerometerInterval",lua_cocos2dx_Layer_setAccelerometerInterval);
		tolua_function(tolua_S,"ccTouchesCancelled",lua_cocos2dx_Layer_ccTouchesCancelled);
		tolua_function(tolua_S,"ccTouchesMoved",lua_cocos2dx_Layer_ccTouchesMoved);
		tolua_function(tolua_S,"isSwallowsTouches",lua_cocos2dx_Layer_isSwallowsTouches);
		tolua_function(tolua_S,"getTouchMode",lua_cocos2dx_Layer_getTouchMode);
		tolua_function(tolua_S,"setAccelerometerEnabled",lua_cocos2dx_Layer_setAccelerometerEnabled);
		tolua_function(tolua_S,"init",lua_cocos2dx_Layer_init);
		tolua_function(tolua_S,"isTouchEnabled",lua_cocos2dx_Layer_isTouchEnabled);
		tolua_function(tolua_S,"ccTouchMoved",lua_cocos2dx_Layer_ccTouchMoved);
		tolua_function(tolua_S,"setTouchEnabled",lua_cocos2dx_Layer_setTouchEnabled);
		tolua_function(tolua_S,"setKeyboardEnabled",lua_cocos2dx_Layer_setKeyboardEnabled);
		tolua_function(tolua_S,"isKeypadEnabled",lua_cocos2dx_Layer_isKeypadEnabled);
		tolua_function(tolua_S,"ccTouchesEnded",lua_cocos2dx_Layer_ccTouchesEnded);
		tolua_function(tolua_S,"setTouchMode",lua_cocos2dx_Layer_setTouchMode);
		tolua_function(tolua_S,"isAccelerometerEnabled",lua_cocos2dx_Layer_isAccelerometerEnabled);
		tolua_function(tolua_S,"ccTouchEnded",lua_cocos2dx_Layer_ccTouchEnded);
		tolua_function(tolua_S,"ccTouchCancelled",lua_cocos2dx_Layer_ccTouchCancelled);
		tolua_function(tolua_S,"setSwallowsTouches",lua_cocos2dx_Layer_setSwallowsTouches);
		tolua_function(tolua_S,"ccTouchesBegan",lua_cocos2dx_Layer_ccTouchesBegan);
		tolua_function(tolua_S,"setTouchPriority",lua_cocos2dx_Layer_setTouchPriority);
		tolua_function(tolua_S,"getTouchPriority",lua_cocos2dx_Layer_getTouchPriority);
		tolua_function(tolua_S,"setKeypadEnabled",lua_cocos2dx_Layer_setKeypadEnabled);
		tolua_function(tolua_S,"registerWithTouchDispatcher",lua_cocos2dx_Layer_registerWithTouchDispatcher);
		tolua_function(tolua_S,"keyMenuClicked",lua_cocos2dx_Layer_keyMenuClicked);
		tolua_function(tolua_S,"new",lua_cocos2dx_Layer_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_Layer_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_LayerRGBA_updateDisplayedColor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LayerRGBA* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LayerRGBA",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LayerRGBA*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LayerRGBA_updateDisplayedColor'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Color3B arg0;
		ok &= luaval_to_color3b(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->updateDisplayedColor(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LayerRGBA_updateDisplayedColor'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LayerRGBA_setColor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LayerRGBA* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LayerRGBA",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LayerRGBA*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LayerRGBA_setColor'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Color3B arg0;
		ok &= luaval_to_color3b(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->setColor(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LayerRGBA_setColor'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LayerRGBA_isCascadeOpacityEnabled(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LayerRGBA* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LayerRGBA",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LayerRGBA*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LayerRGBA_isCascadeOpacityEnabled'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->isCascadeOpacityEnabled();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LayerRGBA_isCascadeOpacityEnabled'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LayerRGBA_getColor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LayerRGBA* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LayerRGBA",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LayerRGBA*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LayerRGBA_getColor'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Color3B ret = cobj->getColor();
		color3b_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LayerRGBA_getColor'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LayerRGBA_getDisplayedOpacity(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LayerRGBA* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LayerRGBA",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LayerRGBA*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LayerRGBA_getDisplayedOpacity'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		unsigned char ret = cobj->getDisplayedOpacity();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LayerRGBA_getDisplayedOpacity'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LayerRGBA_setCascadeColorEnabled(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LayerRGBA* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LayerRGBA",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LayerRGBA*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LayerRGBA_setCascadeColorEnabled'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setCascadeColorEnabled(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LayerRGBA_setCascadeColorEnabled'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LayerRGBA_setOpacity(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LayerRGBA* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LayerRGBA",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LayerRGBA*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LayerRGBA_setOpacity'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		uint16_t arg0;
		ok &= luaval_to_uint16(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setOpacity(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LayerRGBA_setOpacity'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LayerRGBA_setOpacityModifyRGB(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LayerRGBA* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LayerRGBA",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LayerRGBA*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LayerRGBA_setOpacityModifyRGB'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setOpacityModifyRGB(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LayerRGBA_setOpacityModifyRGB'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LayerRGBA_setCascadeOpacityEnabled(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LayerRGBA* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LayerRGBA",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LayerRGBA*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LayerRGBA_setCascadeOpacityEnabled'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setCascadeOpacityEnabled(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LayerRGBA_setCascadeOpacityEnabled'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LayerRGBA_updateDisplayedOpacity(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LayerRGBA* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LayerRGBA",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LayerRGBA*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LayerRGBA_updateDisplayedOpacity'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		uint16_t arg0;
		ok &= luaval_to_uint16(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->updateDisplayedOpacity(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LayerRGBA_updateDisplayedOpacity'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LayerRGBA_init(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LayerRGBA* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LayerRGBA",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LayerRGBA*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LayerRGBA_init'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->init();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LayerRGBA_init'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LayerRGBA_getOpacity(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LayerRGBA* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LayerRGBA",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LayerRGBA*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LayerRGBA_getOpacity'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		unsigned char ret = cobj->getOpacity();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LayerRGBA_getOpacity'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LayerRGBA_isOpacityModifyRGB(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LayerRGBA* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LayerRGBA",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LayerRGBA*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LayerRGBA_isOpacityModifyRGB'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->isOpacityModifyRGB();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LayerRGBA_isOpacityModifyRGB'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LayerRGBA_isCascadeColorEnabled(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LayerRGBA* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LayerRGBA",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LayerRGBA*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LayerRGBA_isCascadeColorEnabled'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->isCascadeColorEnabled();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LayerRGBA_isCascadeColorEnabled'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LayerRGBA_getDisplayedColor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LayerRGBA* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LayerRGBA",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LayerRGBA*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LayerRGBA_getDisplayedColor'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Color3B ret = cobj->getDisplayedColor();
		color3b_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LayerRGBA_getDisplayedColor'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LayerRGBA_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"LayerRGBA",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 0) {
		if(!ok)
			return 0;
		cocos2d::LayerRGBA* ret = cocos2d::LayerRGBA::create();
		tolua_pushusertype(tolua_S,ret,"LayerRGBA");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LayerRGBA_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_LayerRGBA_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LayerRGBA* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::LayerRGBA();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"LayerRGBA");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LayerRGBA_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_LayerRGBA_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (LayerRGBA)");
	return 0;
}

int lua_register_cocos2dx_LayerRGBA(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"LayerRGBA");
	tolua_cclass(tolua_S,"LayerRGBA","LayerRGBA","Layer",NULL);

	tolua_beginmodule(tolua_S,"LayerRGBA");
		tolua_function(tolua_S,"updateDisplayedColor",lua_cocos2dx_LayerRGBA_updateDisplayedColor);
		tolua_function(tolua_S,"setColor",lua_cocos2dx_LayerRGBA_setColor);
		tolua_function(tolua_S,"isCascadeOpacityEnabled",lua_cocos2dx_LayerRGBA_isCascadeOpacityEnabled);
		tolua_function(tolua_S,"getColor",lua_cocos2dx_LayerRGBA_getColor);
		tolua_function(tolua_S,"getDisplayedOpacity",lua_cocos2dx_LayerRGBA_getDisplayedOpacity);
		tolua_function(tolua_S,"setCascadeColorEnabled",lua_cocos2dx_LayerRGBA_setCascadeColorEnabled);
		tolua_function(tolua_S,"setOpacity",lua_cocos2dx_LayerRGBA_setOpacity);
		tolua_function(tolua_S,"setOpacityModifyRGB",lua_cocos2dx_LayerRGBA_setOpacityModifyRGB);
		tolua_function(tolua_S,"setCascadeOpacityEnabled",lua_cocos2dx_LayerRGBA_setCascadeOpacityEnabled);
		tolua_function(tolua_S,"updateDisplayedOpacity",lua_cocos2dx_LayerRGBA_updateDisplayedOpacity);
		tolua_function(tolua_S,"init",lua_cocos2dx_LayerRGBA_init);
		tolua_function(tolua_S,"getOpacity",lua_cocos2dx_LayerRGBA_getOpacity);
		tolua_function(tolua_S,"isOpacityModifyRGB",lua_cocos2dx_LayerRGBA_isOpacityModifyRGB);
		tolua_function(tolua_S,"isCascadeColorEnabled",lua_cocos2dx_LayerRGBA_isCascadeColorEnabled);
		tolua_function(tolua_S,"getDisplayedColor",lua_cocos2dx_LayerRGBA_getDisplayedColor);
		tolua_function(tolua_S,"new",lua_cocos2dx_LayerRGBA_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_LayerRGBA_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_LayerColor_changeWidthAndHeight(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LayerColor* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LayerColor",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LayerColor*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LayerColor_changeWidthAndHeight'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		double arg0;
		double arg1;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_number(tolua_S, 3,&arg1);
		if(!ok)
			return 0;
		cobj->changeWidthAndHeight(arg0, arg1);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LayerColor_changeWidthAndHeight'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LayerColor_setColor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LayerColor* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LayerColor",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LayerColor*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LayerColor_setColor'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Color3B arg0;
		ok &= luaval_to_color3b(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->setColor(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LayerColor_setColor'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LayerColor_draw(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LayerColor* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LayerColor",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LayerColor*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LayerColor_draw'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->draw();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LayerColor_draw'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LayerColor_setOpacity(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LayerColor* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LayerColor",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LayerColor*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LayerColor_setOpacity'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		uint16_t arg0;
		ok &= luaval_to_uint16(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setOpacity(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LayerColor_setOpacity'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LayerColor_initWithColor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LayerColor* cobj = NULL;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LayerColor",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LayerColor*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LayerColor_initWithColor'", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	do{
		if (argc == 3) {
			cocos2d::Color4B arg0;
			ok &=luaval_to_color4b(tolua_S, 2, &arg0);

			if (!ok) { ok = true; break; }
			double arg1;
			ok &= luaval_to_number(tolua_S, 3,&arg1);

			if (!ok) { ok = true; break; }
			double arg2;
			ok &= luaval_to_number(tolua_S, 4,&arg2);

			if (!ok) { ok = true; break; }
		bool ret = cobj->initWithColor(arg0, arg1, arg2);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
		}
	}while(0);
	do{
		if (argc == 0) {
		bool ret = cobj->init();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
		}
	}while(0);
	do{
		if (argc == 1) {
			cocos2d::Color4B arg0;
			ok &=luaval_to_color4b(tolua_S, 2, &arg0);

			if (!ok) { ok = true; break; }
		bool ret = cobj->initWithColor(arg0);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
		}
	}while(0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LayerColor_initWithColor'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LayerColor_changeWidth(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LayerColor* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LayerColor",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LayerColor*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LayerColor_changeWidth'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->changeWidth(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LayerColor_changeWidth'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LayerColor_setContentSize(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LayerColor* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LayerColor",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LayerColor*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LayerColor_setContentSize'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Size arg0;
		ok &= luaval_to_size(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->setContentSize(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LayerColor_setContentSize'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LayerColor_changeHeight(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LayerColor* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LayerColor",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LayerColor*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LayerColor_changeHeight'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->changeHeight(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LayerColor_changeHeight'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LayerColor_create(lua_State* tolua_S)
{
	int argc = 0;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"LayerColor",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S)-1;

	do {
		if (argc == 3) {
			cocos2d::Color4B arg0;
			ok &=luaval_to_color4b(tolua_S, 2, &arg0);
			if (!ok) { ok = true; break; }
			double arg1;
			ok &= luaval_to_number(tolua_S, 3,&arg1);
			if (!ok) { ok = true; break; }
			double arg2;
			ok &= luaval_to_number(tolua_S, 4,&arg2);
			if (!ok) { ok = true; break; }
			cocos2d::LayerColor* ret = cocos2d::LayerColor::create(arg0, arg1, arg2);
			tolua_pushusertype(tolua_S,ret,"LayerColor");
			return 1;
		}
	} while (0);
	do {
		if (argc == 0) {
			cocos2d::LayerColor* ret = cocos2d::LayerColor::create();
			tolua_pushusertype(tolua_S,ret,"LayerColor");
			return 1;
		}
	} while (0);
	do {
		if (argc == 1) {
			cocos2d::Color4B arg0;
			ok &=luaval_to_color4b(tolua_S, 2, &arg0);
			if (!ok) { ok = true; break; }
			cocos2d::LayerColor* ret = cocos2d::LayerColor::create(arg0);
			tolua_pushusertype(tolua_S,ret,"LayerColor");
			return 1;
		}
	} while (0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LayerColor_create'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LayerColor_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LayerColor* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::LayerColor();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"LayerColor");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LayerColor_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_LayerColor_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (LayerColor)");
	return 0;
}

int lua_register_cocos2dx_LayerColor(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"LayerColor");
	tolua_cclass(tolua_S,"LayerColor","LayerColor","LayerRGBA",NULL);

	tolua_beginmodule(tolua_S,"LayerColor");
		tolua_function(tolua_S,"changeWidthAndHeight",lua_cocos2dx_LayerColor_changeWidthAndHeight);
		tolua_function(tolua_S,"setColor",lua_cocos2dx_LayerColor_setColor);
		tolua_function(tolua_S,"draw",lua_cocos2dx_LayerColor_draw);
		tolua_function(tolua_S,"setOpacity",lua_cocos2dx_LayerColor_setOpacity);
		tolua_function(tolua_S,"init",lua_cocos2dx_LayerColor_initWithColor);
		tolua_function(tolua_S,"changeWidth",lua_cocos2dx_LayerColor_changeWidth);
		tolua_function(tolua_S,"setContentSize",lua_cocos2dx_LayerColor_setContentSize);
		tolua_function(tolua_S,"changeHeight",lua_cocos2dx_LayerColor_changeHeight);
		tolua_function(tolua_S,"new",lua_cocos2dx_LayerColor_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_LayerColor_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_LayerGradient_getStartColor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LayerGradient* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LayerGradient",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LayerGradient*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LayerGradient_getStartColor'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Color3B ret = cobj->getStartColor();
		color3b_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LayerGradient_getStartColor'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LayerGradient_isCompressedInterpolation(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LayerGradient* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LayerGradient",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LayerGradient*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LayerGradient_isCompressedInterpolation'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->isCompressedInterpolation();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LayerGradient_isCompressedInterpolation'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LayerGradient_getStartOpacity(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LayerGradient* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LayerGradient",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LayerGradient*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LayerGradient_getStartOpacity'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		unsigned char ret = cobj->getStartOpacity();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LayerGradient_getStartOpacity'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LayerGradient_setVector(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LayerGradient* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LayerGradient",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LayerGradient*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LayerGradient_setVector'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Point arg0;
		ok &= luaval_to_point(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->setVector(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LayerGradient_setVector'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LayerGradient_setStartOpacity(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LayerGradient* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LayerGradient",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LayerGradient*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LayerGradient_setStartOpacity'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		uint16_t arg0;
		ok &= luaval_to_uint16(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setStartOpacity(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LayerGradient_setStartOpacity'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LayerGradient_setCompressedInterpolation(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LayerGradient* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LayerGradient",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LayerGradient*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LayerGradient_setCompressedInterpolation'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setCompressedInterpolation(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LayerGradient_setCompressedInterpolation'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LayerGradient_setEndOpacity(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LayerGradient* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LayerGradient",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LayerGradient*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LayerGradient_setEndOpacity'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		uint16_t arg0;
		ok &= luaval_to_uint16(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setEndOpacity(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LayerGradient_setEndOpacity'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LayerGradient_getVector(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LayerGradient* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LayerGradient",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LayerGradient*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LayerGradient_getVector'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Point ret = cobj->getVector();
		point_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LayerGradient_getVector'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LayerGradient_initWithColor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LayerGradient* cobj = NULL;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LayerGradient",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LayerGradient*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LayerGradient_initWithColor'", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	do{
		if (argc == 2) {
			cocos2d::Color4B arg0;
			ok &=luaval_to_color4b(tolua_S, 2, &arg0);

			if (!ok) { ok = true; break; }
			cocos2d::Color4B arg1;
			ok &=luaval_to_color4b(tolua_S, 3, &arg1);

			if (!ok) { ok = true; break; }
		bool ret = cobj->initWithColor(arg0, arg1);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
		}
	}while(0);
	do{
		if (argc == 0) {
		bool ret = cobj->init();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
		}
	}while(0);
	do{
		if (argc == 3) {
			cocos2d::Color4B arg0;
			ok &=luaval_to_color4b(tolua_S, 2, &arg0);

			if (!ok) { ok = true; break; }
			cocos2d::Color4B arg1;
			ok &=luaval_to_color4b(tolua_S, 3, &arg1);

			if (!ok) { ok = true; break; }
			cocos2d::Point arg2;
			ok &= luaval_to_point(tolua_S, 4, &arg2);

			if (!ok) { ok = true; break; }
		bool ret = cobj->initWithColor(arg0, arg1, arg2);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
		}
	}while(0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 3);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LayerGradient_initWithColor'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LayerGradient_setEndColor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LayerGradient* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LayerGradient",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LayerGradient*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LayerGradient_setEndColor'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Color3B arg0;
		ok &= luaval_to_color3b(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->setEndColor(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LayerGradient_setEndColor'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LayerGradient_getEndColor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LayerGradient* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LayerGradient",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LayerGradient*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LayerGradient_getEndColor'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Color3B ret = cobj->getEndColor();
		color3b_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LayerGradient_getEndColor'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LayerGradient_getEndOpacity(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LayerGradient* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LayerGradient",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LayerGradient*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LayerGradient_getEndOpacity'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		unsigned char ret = cobj->getEndOpacity();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LayerGradient_getEndOpacity'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LayerGradient_setStartColor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LayerGradient* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LayerGradient",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LayerGradient*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LayerGradient_setStartColor'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Color3B arg0;
		ok &= luaval_to_color3b(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->setStartColor(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LayerGradient_setStartColor'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LayerGradient_create(lua_State* tolua_S)
{
	int argc = 0;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"LayerGradient",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S)-1;

	do {
		if (argc == 2) {
			cocos2d::Color4B arg0;
			ok &=luaval_to_color4b(tolua_S, 2, &arg0);
			if (!ok) { ok = true; break; }
			cocos2d::Color4B arg1;
			ok &=luaval_to_color4b(tolua_S, 3, &arg1);
			if (!ok) { ok = true; break; }
			cocos2d::LayerGradient* ret = cocos2d::LayerGradient::create(arg0, arg1);
			tolua_pushusertype(tolua_S,ret,"LayerGradient");
			return 1;
		}
	} while (0);
	do {
		if (argc == 0) {
			cocos2d::LayerGradient* ret = cocos2d::LayerGradient::create();
			tolua_pushusertype(tolua_S,ret,"LayerGradient");
			return 1;
		}
	} while (0);
	do {
		if (argc == 3) {
			cocos2d::Color4B arg0;
			ok &=luaval_to_color4b(tolua_S, 2, &arg0);
			if (!ok) { ok = true; break; }
			cocos2d::Color4B arg1;
			ok &=luaval_to_color4b(tolua_S, 3, &arg1);
			if (!ok) { ok = true; break; }
			cocos2d::Point arg2;
			ok &= luaval_to_point(tolua_S, 4, &arg2);
			if (!ok) { ok = true; break; }
			cocos2d::LayerGradient* ret = cocos2d::LayerGradient::create(arg0, arg1, arg2);
			tolua_pushusertype(tolua_S,ret,"LayerGradient");
			return 1;
		}
	} while (0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 3);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LayerGradient_create'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LayerGradient_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (LayerGradient)");
	return 0;
}

int lua_register_cocos2dx_LayerGradient(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"LayerGradient");
	tolua_cclass(tolua_S,"LayerGradient","LayerGradient","LayerColor",NULL);

	tolua_beginmodule(tolua_S,"LayerGradient");
		tolua_function(tolua_S,"getStartColor",lua_cocos2dx_LayerGradient_getStartColor);
		tolua_function(tolua_S,"isCompressedInterpolation",lua_cocos2dx_LayerGradient_isCompressedInterpolation);
		tolua_function(tolua_S,"getStartOpacity",lua_cocos2dx_LayerGradient_getStartOpacity);
		tolua_function(tolua_S,"setVector",lua_cocos2dx_LayerGradient_setVector);
		tolua_function(tolua_S,"setStartOpacity",lua_cocos2dx_LayerGradient_setStartOpacity);
		tolua_function(tolua_S,"setCompressedInterpolation",lua_cocos2dx_LayerGradient_setCompressedInterpolation);
		tolua_function(tolua_S,"setEndOpacity",lua_cocos2dx_LayerGradient_setEndOpacity);
		tolua_function(tolua_S,"getVector",lua_cocos2dx_LayerGradient_getVector);
		tolua_function(tolua_S,"init",lua_cocos2dx_LayerGradient_initWithColor);
		tolua_function(tolua_S,"setEndColor",lua_cocos2dx_LayerGradient_setEndColor);
		tolua_function(tolua_S,"getEndColor",lua_cocos2dx_LayerGradient_getEndColor);
		tolua_function(tolua_S,"getEndOpacity",lua_cocos2dx_LayerGradient_getEndOpacity);
		tolua_function(tolua_S,"setStartColor",lua_cocos2dx_LayerGradient_setStartColor);
		tolua_function(tolua_S,"create", lua_cocos2dx_LayerGradient_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_LayerMultiplex_initWithArray(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LayerMultiplex* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LayerMultiplex",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LayerMultiplex*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LayerMultiplex_initWithArray'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Array* arg0;
		ok &= luaval_to_array(tolua_S,  2, &arg0);
		if(!ok)
			return 0;
		bool ret = cobj->initWithArray(arg0);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LayerMultiplex_initWithArray'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LayerMultiplex_switchToAndReleaseMe(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LayerMultiplex* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LayerMultiplex",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LayerMultiplex*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LayerMultiplex_switchToAndReleaseMe'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		unsigned int arg0;
		ok &= luaval_to_uint32(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->switchToAndReleaseMe(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LayerMultiplex_switchToAndReleaseMe'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LayerMultiplex_addLayer(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LayerMultiplex* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LayerMultiplex",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LayerMultiplex*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LayerMultiplex_addLayer'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Layer* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Layer",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Layer*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->addLayer(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LayerMultiplex_addLayer'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LayerMultiplex_switchTo(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LayerMultiplex* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"LayerMultiplex",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::LayerMultiplex*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_LayerMultiplex_switchTo'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		unsigned int arg0;
		ok &= luaval_to_uint32(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->switchTo(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LayerMultiplex_switchTo'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_LayerMultiplex_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::LayerMultiplex* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::LayerMultiplex();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"LayerMultiplex");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_LayerMultiplex_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_LayerMultiplex_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (LayerMultiplex)");
	return 0;
}

int lua_register_cocos2dx_LayerMultiplex(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"LayerMultiplex");
	tolua_cclass(tolua_S,"LayerMultiplex","LayerMultiplex","Layer",NULL);

	tolua_beginmodule(tolua_S,"LayerMultiplex");
		tolua_function(tolua_S,"initWithArray",lua_cocos2dx_LayerMultiplex_initWithArray);
		tolua_function(tolua_S,"switchToAndReleaseMe",lua_cocos2dx_LayerMultiplex_switchToAndReleaseMe);
		tolua_function(tolua_S,"addLayer",lua_cocos2dx_LayerMultiplex_addLayer);
		tolua_function(tolua_S,"switchTo",lua_cocos2dx_LayerMultiplex_switchTo);
		tolua_function(tolua_S,"new",lua_cocos2dx_LayerMultiplex_constructor);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_Scene_init(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Scene* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Scene",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Scene*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Scene_init'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->init();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Scene_init'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Scene_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"Scene",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 0) {
		if(!ok)
			return 0;
		cocos2d::Scene* ret = cocos2d::Scene::create();
		tolua_pushusertype(tolua_S,ret,"Scene");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Scene_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_Scene_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Scene* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::Scene();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"Scene");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Scene_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_Scene_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (Scene)");
	return 0;
}

int lua_register_cocos2dx_Scene(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"Scene");
	tolua_cclass(tolua_S,"Scene","Scene","Node",NULL);

	tolua_beginmodule(tolua_S,"Scene");
		tolua_function(tolua_S,"init",lua_cocos2dx_Scene_init);
		tolua_function(tolua_S,"new",lua_cocos2dx_Scene_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_Scene_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_TransitionEaseScene_easeActionWithAction(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionEaseScene* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TransitionEaseScene",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TransitionEaseScene*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TransitionEaseScene_easeActionWithAction'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::ActionInterval* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"ActionInterval",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::ActionInterval*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cocos2d::ActionInterval* ret = cobj->easeActionWithAction(arg0);
		tolua_pushusertype(tolua_S,ret,"ActionInterval");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionEaseScene_easeActionWithAction'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TransitionEaseScene_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (TransitionEaseScene)");
	return 0;
}

int lua_register_cocos2dx_TransitionEaseScene(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"TransitionEaseScene");
	tolua_cclass(tolua_S,"TransitionEaseScene","TransitionEaseScene","",NULL);

	tolua_beginmodule(tolua_S,"TransitionEaseScene");
		tolua_function(tolua_S,"easeActionWithAction",lua_cocos2dx_TransitionEaseScene_easeActionWithAction);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_TransitionScene_draw(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionScene* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TransitionScene",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TransitionScene*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TransitionScene_draw'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->draw();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionScene_draw'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TransitionScene_finish(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionScene* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TransitionScene",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TransitionScene*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TransitionScene_finish'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->finish();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionScene_finish'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TransitionScene_initWithDuration(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionScene* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TransitionScene",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TransitionScene*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TransitionScene_initWithDuration'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		double arg0;
		cocos2d::Scene* arg1;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Scene",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Scene*)tolua_tousertype(tolua_S,3,0);
		};
		if(!ok)
			return 0;
		bool ret = cobj->initWithDuration(arg0, arg1);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionScene_initWithDuration'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TransitionScene_cleanup(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionScene* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TransitionScene",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TransitionScene*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TransitionScene_cleanup'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->cleanup();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionScene_cleanup'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TransitionScene_hideOutShowIn(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionScene* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TransitionScene",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TransitionScene*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TransitionScene_hideOutShowIn'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->hideOutShowIn();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionScene_hideOutShowIn'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TransitionScene_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"TransitionScene",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 2) {
		double arg0;
		cocos2d::Scene* arg1;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Scene",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Scene*)tolua_tousertype(tolua_S,3,0);
		};
		if(!ok)
			return 0;
		cocos2d::TransitionScene* ret = cocos2d::TransitionScene::create(arg0, arg1);
		tolua_pushusertype(tolua_S,ret,"TransitionScene");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionScene_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TransitionScene_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionScene* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::TransitionScene();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"TransitionScene");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionScene_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TransitionScene_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (TransitionScene)");
	return 0;
}

int lua_register_cocos2dx_TransitionScene(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"TransitionScene");
	tolua_cclass(tolua_S,"TransitionScene","TransitionScene","Scene",NULL);

	tolua_beginmodule(tolua_S,"TransitionScene");
		tolua_function(tolua_S,"draw",lua_cocos2dx_TransitionScene_draw);
		tolua_function(tolua_S,"finish",lua_cocos2dx_TransitionScene_finish);
		tolua_function(tolua_S,"initWithDuration",lua_cocos2dx_TransitionScene_initWithDuration);
		tolua_function(tolua_S,"cleanup",lua_cocos2dx_TransitionScene_cleanup);
		tolua_function(tolua_S,"hideOutShowIn",lua_cocos2dx_TransitionScene_hideOutShowIn);
		tolua_function(tolua_S,"new",lua_cocos2dx_TransitionScene_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_TransitionScene_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_TransitionSceneOriented_initWithDuration(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionSceneOriented* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TransitionSceneOriented",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TransitionSceneOriented*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TransitionSceneOriented_initWithDuration'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 3) {
		double arg0;
		cocos2d::Scene* arg1;
		cocos2d::TransitionScene::Orientation arg2;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Scene",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Scene*)tolua_tousertype(tolua_S,3,0);
		};
		ok &= luaval_to_int32(tolua_S, 4,(int*)&arg2);
		if(!ok)
			return 0;
		bool ret = cobj->initWithDuration(arg0, arg1, arg2);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 3);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionSceneOriented_initWithDuration'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TransitionSceneOriented_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"TransitionSceneOriented",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 3) {
		double arg0;
		cocos2d::Scene* arg1;
		cocos2d::TransitionScene::Orientation arg2;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Scene",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Scene*)tolua_tousertype(tolua_S,3,0);
		};
		ok &= luaval_to_int32(tolua_S, 4,(int*)&arg2);
		if(!ok)
			return 0;
		cocos2d::TransitionSceneOriented* ret = cocos2d::TransitionSceneOriented::create(arg0, arg1, arg2);
		tolua_pushusertype(tolua_S,ret,"TransitionSceneOriented");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 3);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionSceneOriented_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TransitionSceneOriented_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionSceneOriented* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::TransitionSceneOriented();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"TransitionSceneOriented");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionSceneOriented_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TransitionSceneOriented_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (TransitionSceneOriented)");
	return 0;
}

int lua_register_cocos2dx_TransitionSceneOriented(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"TransitionSceneOriented");
	tolua_cclass(tolua_S,"TransitionSceneOriented","TransitionSceneOriented","TransitionScene",NULL);

	tolua_beginmodule(tolua_S,"TransitionSceneOriented");
		tolua_function(tolua_S,"initWithDuration",lua_cocos2dx_TransitionSceneOriented_initWithDuration);
		tolua_function(tolua_S,"new",lua_cocos2dx_TransitionSceneOriented_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_TransitionSceneOriented_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_TransitionRotoZoom_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"TransitionRotoZoom",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 2) {
		double arg0;
		cocos2d::Scene* arg1;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Scene",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Scene*)tolua_tousertype(tolua_S,3,0);
		};
		if(!ok)
			return 0;
		cocos2d::TransitionRotoZoom* ret = cocos2d::TransitionRotoZoom::create(arg0, arg1);
		tolua_pushusertype(tolua_S,ret,"TransitionRotoZoom");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionRotoZoom_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TransitionRotoZoom_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionRotoZoom* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::TransitionRotoZoom();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"TransitionRotoZoom");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionRotoZoom_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TransitionRotoZoom_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (TransitionRotoZoom)");
	return 0;
}

int lua_register_cocos2dx_TransitionRotoZoom(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"TransitionRotoZoom");
	tolua_cclass(tolua_S,"TransitionRotoZoom","TransitionRotoZoom","TransitionScene",NULL);

	tolua_beginmodule(tolua_S,"TransitionRotoZoom");
		tolua_function(tolua_S,"create", lua_cocos2dx_TransitionRotoZoom_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_TransitionJumpZoom_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"TransitionJumpZoom",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 2) {
		double arg0;
		cocos2d::Scene* arg1;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Scene",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Scene*)tolua_tousertype(tolua_S,3,0);
		};
		if(!ok)
			return 0;
		cocos2d::TransitionJumpZoom* ret = cocos2d::TransitionJumpZoom::create(arg0, arg1);
		tolua_pushusertype(tolua_S,ret,"TransitionJumpZoom");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionJumpZoom_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TransitionJumpZoom_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionJumpZoom* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::TransitionJumpZoom();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"TransitionJumpZoom");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionJumpZoom_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TransitionJumpZoom_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (TransitionJumpZoom)");
	return 0;
}

int lua_register_cocos2dx_TransitionJumpZoom(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"TransitionJumpZoom");
	tolua_cclass(tolua_S,"TransitionJumpZoom","TransitionJumpZoom","TransitionScene",NULL);

	tolua_beginmodule(tolua_S,"TransitionJumpZoom");
		tolua_function(tolua_S,"create", lua_cocos2dx_TransitionJumpZoom_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_TransitionMoveInL_action(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionMoveInL* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TransitionMoveInL",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TransitionMoveInL*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TransitionMoveInL_action'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::ActionInterval* ret = cobj->action();
		tolua_pushusertype(tolua_S,ret,"ActionInterval");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionMoveInL_action'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TransitionMoveInL_easeActionWithAction(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionMoveInL* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TransitionMoveInL",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TransitionMoveInL*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TransitionMoveInL_easeActionWithAction'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::ActionInterval* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"ActionInterval",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::ActionInterval*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cocos2d::ActionInterval* ret = cobj->easeActionWithAction(arg0);
		tolua_pushusertype(tolua_S,ret,"ActionInterval");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionMoveInL_easeActionWithAction'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TransitionMoveInL_initScenes(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionMoveInL* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TransitionMoveInL",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TransitionMoveInL*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TransitionMoveInL_initScenes'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->initScenes();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionMoveInL_initScenes'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TransitionMoveInL_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"TransitionMoveInL",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 2) {
		double arg0;
		cocos2d::Scene* arg1;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Scene",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Scene*)tolua_tousertype(tolua_S,3,0);
		};
		if(!ok)
			return 0;
		cocos2d::TransitionMoveInL* ret = cocos2d::TransitionMoveInL::create(arg0, arg1);
		tolua_pushusertype(tolua_S,ret,"TransitionMoveInL");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionMoveInL_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TransitionMoveInL_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionMoveInL* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::TransitionMoveInL();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"TransitionMoveInL");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionMoveInL_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TransitionMoveInL_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (TransitionMoveInL)");
	return 0;
}

int lua_register_cocos2dx_TransitionMoveInL(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"TransitionMoveInL");
	tolua_cclass(tolua_S,"TransitionMoveInL","TransitionMoveInL","TransitionScene",NULL);

	tolua_beginmodule(tolua_S,"TransitionMoveInL");
		tolua_function(tolua_S,"action",lua_cocos2dx_TransitionMoveInL_action);
		tolua_function(tolua_S,"easeActionWithAction",lua_cocos2dx_TransitionMoveInL_easeActionWithAction);
		tolua_function(tolua_S,"initScenes",lua_cocos2dx_TransitionMoveInL_initScenes);
		tolua_function(tolua_S,"new",lua_cocos2dx_TransitionMoveInL_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_TransitionMoveInL_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_TransitionMoveInR_initScenes(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionMoveInR* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TransitionMoveInR",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TransitionMoveInR*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TransitionMoveInR_initScenes'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->initScenes();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionMoveInR_initScenes'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TransitionMoveInR_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"TransitionMoveInR",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 2) {
		double arg0;
		cocos2d::Scene* arg1;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Scene",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Scene*)tolua_tousertype(tolua_S,3,0);
		};
		if(!ok)
			return 0;
		cocos2d::TransitionMoveInR* ret = cocos2d::TransitionMoveInR::create(arg0, arg1);
		tolua_pushusertype(tolua_S,ret,"TransitionMoveInR");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionMoveInR_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TransitionMoveInR_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionMoveInR* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::TransitionMoveInR();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"TransitionMoveInR");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionMoveInR_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TransitionMoveInR_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (TransitionMoveInR)");
	return 0;
}

int lua_register_cocos2dx_TransitionMoveInR(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"TransitionMoveInR");
	tolua_cclass(tolua_S,"TransitionMoveInR","TransitionMoveInR","TransitionMoveInL",NULL);

	tolua_beginmodule(tolua_S,"TransitionMoveInR");
		tolua_function(tolua_S,"initScenes",lua_cocos2dx_TransitionMoveInR_initScenes);
		tolua_function(tolua_S,"new",lua_cocos2dx_TransitionMoveInR_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_TransitionMoveInR_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_TransitionMoveInT_initScenes(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionMoveInT* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TransitionMoveInT",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TransitionMoveInT*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TransitionMoveInT_initScenes'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->initScenes();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionMoveInT_initScenes'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TransitionMoveInT_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"TransitionMoveInT",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 2) {
		double arg0;
		cocos2d::Scene* arg1;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Scene",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Scene*)tolua_tousertype(tolua_S,3,0);
		};
		if(!ok)
			return 0;
		cocos2d::TransitionMoveInT* ret = cocos2d::TransitionMoveInT::create(arg0, arg1);
		tolua_pushusertype(tolua_S,ret,"TransitionMoveInT");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionMoveInT_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TransitionMoveInT_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionMoveInT* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::TransitionMoveInT();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"TransitionMoveInT");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionMoveInT_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TransitionMoveInT_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (TransitionMoveInT)");
	return 0;
}

int lua_register_cocos2dx_TransitionMoveInT(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"TransitionMoveInT");
	tolua_cclass(tolua_S,"TransitionMoveInT","TransitionMoveInT","TransitionMoveInL",NULL);

	tolua_beginmodule(tolua_S,"TransitionMoveInT");
		tolua_function(tolua_S,"initScenes",lua_cocos2dx_TransitionMoveInT_initScenes);
		tolua_function(tolua_S,"new",lua_cocos2dx_TransitionMoveInT_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_TransitionMoveInT_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_TransitionMoveInB_initScenes(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionMoveInB* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TransitionMoveInB",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TransitionMoveInB*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TransitionMoveInB_initScenes'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->initScenes();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionMoveInB_initScenes'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TransitionMoveInB_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"TransitionMoveInB",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 2) {
		double arg0;
		cocos2d::Scene* arg1;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Scene",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Scene*)tolua_tousertype(tolua_S,3,0);
		};
		if(!ok)
			return 0;
		cocos2d::TransitionMoveInB* ret = cocos2d::TransitionMoveInB::create(arg0, arg1);
		tolua_pushusertype(tolua_S,ret,"TransitionMoveInB");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionMoveInB_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TransitionMoveInB_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionMoveInB* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::TransitionMoveInB();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"TransitionMoveInB");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionMoveInB_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TransitionMoveInB_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (TransitionMoveInB)");
	return 0;
}

int lua_register_cocos2dx_TransitionMoveInB(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"TransitionMoveInB");
	tolua_cclass(tolua_S,"TransitionMoveInB","TransitionMoveInB","TransitionMoveInL",NULL);

	tolua_beginmodule(tolua_S,"TransitionMoveInB");
		tolua_function(tolua_S,"initScenes",lua_cocos2dx_TransitionMoveInB_initScenes);
		tolua_function(tolua_S,"new",lua_cocos2dx_TransitionMoveInB_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_TransitionMoveInB_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_TransitionSlideInL_action(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionSlideInL* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TransitionSlideInL",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TransitionSlideInL*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TransitionSlideInL_action'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::ActionInterval* ret = cobj->action();
		tolua_pushusertype(tolua_S,ret,"ActionInterval");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionSlideInL_action'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TransitionSlideInL_easeActionWithAction(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionSlideInL* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TransitionSlideInL",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TransitionSlideInL*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TransitionSlideInL_easeActionWithAction'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::ActionInterval* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"ActionInterval",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::ActionInterval*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cocos2d::ActionInterval* ret = cobj->easeActionWithAction(arg0);
		tolua_pushusertype(tolua_S,ret,"ActionInterval");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionSlideInL_easeActionWithAction'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TransitionSlideInL_initScenes(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionSlideInL* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TransitionSlideInL",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TransitionSlideInL*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TransitionSlideInL_initScenes'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->initScenes();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionSlideInL_initScenes'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TransitionSlideInL_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"TransitionSlideInL",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 2) {
		double arg0;
		cocos2d::Scene* arg1;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Scene",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Scene*)tolua_tousertype(tolua_S,3,0);
		};
		if(!ok)
			return 0;
		cocos2d::TransitionSlideInL* ret = cocos2d::TransitionSlideInL::create(arg0, arg1);
		tolua_pushusertype(tolua_S,ret,"TransitionSlideInL");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionSlideInL_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TransitionSlideInL_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionSlideInL* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::TransitionSlideInL();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"TransitionSlideInL");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionSlideInL_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TransitionSlideInL_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (TransitionSlideInL)");
	return 0;
}

int lua_register_cocos2dx_TransitionSlideInL(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"TransitionSlideInL");
	tolua_cclass(tolua_S,"TransitionSlideInL","TransitionSlideInL","TransitionScene",NULL);

	tolua_beginmodule(tolua_S,"TransitionSlideInL");
		tolua_function(tolua_S,"action",lua_cocos2dx_TransitionSlideInL_action);
		tolua_function(tolua_S,"easeActionWithAction",lua_cocos2dx_TransitionSlideInL_easeActionWithAction);
		tolua_function(tolua_S,"initScenes",lua_cocos2dx_TransitionSlideInL_initScenes);
		tolua_function(tolua_S,"new",lua_cocos2dx_TransitionSlideInL_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_TransitionSlideInL_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_TransitionSlideInR_action(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionSlideInR* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TransitionSlideInR",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TransitionSlideInR*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TransitionSlideInR_action'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::ActionInterval* ret = cobj->action();
		tolua_pushusertype(tolua_S,ret,"ActionInterval");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionSlideInR_action'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TransitionSlideInR_initScenes(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionSlideInR* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TransitionSlideInR",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TransitionSlideInR*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TransitionSlideInR_initScenes'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->initScenes();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionSlideInR_initScenes'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TransitionSlideInR_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"TransitionSlideInR",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 2) {
		double arg0;
		cocos2d::Scene* arg1;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Scene",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Scene*)tolua_tousertype(tolua_S,3,0);
		};
		if(!ok)
			return 0;
		cocos2d::TransitionSlideInR* ret = cocos2d::TransitionSlideInR::create(arg0, arg1);
		tolua_pushusertype(tolua_S,ret,"TransitionSlideInR");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionSlideInR_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TransitionSlideInR_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionSlideInR* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::TransitionSlideInR();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"TransitionSlideInR");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionSlideInR_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TransitionSlideInR_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (TransitionSlideInR)");
	return 0;
}

int lua_register_cocos2dx_TransitionSlideInR(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"TransitionSlideInR");
	tolua_cclass(tolua_S,"TransitionSlideInR","TransitionSlideInR","TransitionSlideInL",NULL);

	tolua_beginmodule(tolua_S,"TransitionSlideInR");
		tolua_function(tolua_S,"action",lua_cocos2dx_TransitionSlideInR_action);
		tolua_function(tolua_S,"initScenes",lua_cocos2dx_TransitionSlideInR_initScenes);
		tolua_function(tolua_S,"new",lua_cocos2dx_TransitionSlideInR_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_TransitionSlideInR_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_TransitionSlideInB_action(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionSlideInB* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TransitionSlideInB",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TransitionSlideInB*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TransitionSlideInB_action'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::ActionInterval* ret = cobj->action();
		tolua_pushusertype(tolua_S,ret,"ActionInterval");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionSlideInB_action'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TransitionSlideInB_initScenes(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionSlideInB* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TransitionSlideInB",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TransitionSlideInB*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TransitionSlideInB_initScenes'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->initScenes();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionSlideInB_initScenes'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TransitionSlideInB_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"TransitionSlideInB",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 2) {
		double arg0;
		cocos2d::Scene* arg1;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Scene",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Scene*)tolua_tousertype(tolua_S,3,0);
		};
		if(!ok)
			return 0;
		cocos2d::TransitionSlideInB* ret = cocos2d::TransitionSlideInB::create(arg0, arg1);
		tolua_pushusertype(tolua_S,ret,"TransitionSlideInB");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionSlideInB_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TransitionSlideInB_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionSlideInB* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::TransitionSlideInB();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"TransitionSlideInB");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionSlideInB_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TransitionSlideInB_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (TransitionSlideInB)");
	return 0;
}

int lua_register_cocos2dx_TransitionSlideInB(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"TransitionSlideInB");
	tolua_cclass(tolua_S,"TransitionSlideInB","TransitionSlideInB","TransitionSlideInL",NULL);

	tolua_beginmodule(tolua_S,"TransitionSlideInB");
		tolua_function(tolua_S,"action",lua_cocos2dx_TransitionSlideInB_action);
		tolua_function(tolua_S,"initScenes",lua_cocos2dx_TransitionSlideInB_initScenes);
		tolua_function(tolua_S,"new",lua_cocos2dx_TransitionSlideInB_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_TransitionSlideInB_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_TransitionSlideInT_action(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionSlideInT* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TransitionSlideInT",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TransitionSlideInT*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TransitionSlideInT_action'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::ActionInterval* ret = cobj->action();
		tolua_pushusertype(tolua_S,ret,"ActionInterval");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionSlideInT_action'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TransitionSlideInT_initScenes(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionSlideInT* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TransitionSlideInT",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TransitionSlideInT*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TransitionSlideInT_initScenes'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->initScenes();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionSlideInT_initScenes'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TransitionSlideInT_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"TransitionSlideInT",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 2) {
		double arg0;
		cocos2d::Scene* arg1;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Scene",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Scene*)tolua_tousertype(tolua_S,3,0);
		};
		if(!ok)
			return 0;
		cocos2d::TransitionSlideInT* ret = cocos2d::TransitionSlideInT::create(arg0, arg1);
		tolua_pushusertype(tolua_S,ret,"TransitionSlideInT");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionSlideInT_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TransitionSlideInT_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionSlideInT* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::TransitionSlideInT();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"TransitionSlideInT");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionSlideInT_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TransitionSlideInT_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (TransitionSlideInT)");
	return 0;
}

int lua_register_cocos2dx_TransitionSlideInT(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"TransitionSlideInT");
	tolua_cclass(tolua_S,"TransitionSlideInT","TransitionSlideInT","TransitionSlideInL",NULL);

	tolua_beginmodule(tolua_S,"TransitionSlideInT");
		tolua_function(tolua_S,"action",lua_cocos2dx_TransitionSlideInT_action);
		tolua_function(tolua_S,"initScenes",lua_cocos2dx_TransitionSlideInT_initScenes);
		tolua_function(tolua_S,"new",lua_cocos2dx_TransitionSlideInT_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_TransitionSlideInT_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_TransitionShrinkGrow_easeActionWithAction(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionShrinkGrow* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TransitionShrinkGrow",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TransitionShrinkGrow*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TransitionShrinkGrow_easeActionWithAction'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::ActionInterval* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"ActionInterval",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::ActionInterval*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cocos2d::ActionInterval* ret = cobj->easeActionWithAction(arg0);
		tolua_pushusertype(tolua_S,ret,"ActionInterval");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionShrinkGrow_easeActionWithAction'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TransitionShrinkGrow_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"TransitionShrinkGrow",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 2) {
		double arg0;
		cocos2d::Scene* arg1;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Scene",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Scene*)tolua_tousertype(tolua_S,3,0);
		};
		if(!ok)
			return 0;
		cocos2d::TransitionShrinkGrow* ret = cocos2d::TransitionShrinkGrow::create(arg0, arg1);
		tolua_pushusertype(tolua_S,ret,"TransitionShrinkGrow");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionShrinkGrow_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TransitionShrinkGrow_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionShrinkGrow* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::TransitionShrinkGrow();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"TransitionShrinkGrow");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionShrinkGrow_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TransitionShrinkGrow_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (TransitionShrinkGrow)");
	return 0;
}

int lua_register_cocos2dx_TransitionShrinkGrow(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"TransitionShrinkGrow");
	tolua_cclass(tolua_S,"TransitionShrinkGrow","TransitionShrinkGrow","TransitionScene",NULL);

	tolua_beginmodule(tolua_S,"TransitionShrinkGrow");
		tolua_function(tolua_S,"easeActionWithAction",lua_cocos2dx_TransitionShrinkGrow_easeActionWithAction);
		tolua_function(tolua_S,"new",lua_cocos2dx_TransitionShrinkGrow_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_TransitionShrinkGrow_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_TransitionFlipX_create(lua_State* tolua_S)
{
	int argc = 0;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"TransitionFlipX",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S)-1;

	do {
		if (argc == 2) {
			double arg0;
			ok &= luaval_to_number(tolua_S, 2,&arg0);
			if (!ok) { ok = true; break; }
			cocos2d::Scene* arg1;
			#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Scene",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Scene*)tolua_tousertype(tolua_S,3,0);
		};
			if (!ok) { ok = true; break; }
			cocos2d::TransitionFlipX* ret = cocos2d::TransitionFlipX::create(arg0, arg1);
			tolua_pushusertype(tolua_S,ret,"TransitionFlipX");
			return 1;
		}
	} while (0);
	do {
		if (argc == 3) {
			double arg0;
			ok &= luaval_to_number(tolua_S, 2,&arg0);
			if (!ok) { ok = true; break; }
			cocos2d::Scene* arg1;
			#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Scene",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Scene*)tolua_tousertype(tolua_S,3,0);
		};
			if (!ok) { ok = true; break; }
			cocos2d::TransitionScene::Orientation arg2;
			ok &= luaval_to_int32(tolua_S, 4,(int*)&arg2);
			if (!ok) { ok = true; break; }
			cocos2d::TransitionFlipX* ret = cocos2d::TransitionFlipX::create(arg0, arg1, arg2);
			tolua_pushusertype(tolua_S,ret,"TransitionFlipX");
			return 1;
		}
	} while (0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 3);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionFlipX_create'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TransitionFlipX_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionFlipX* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::TransitionFlipX();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"TransitionFlipX");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionFlipX_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TransitionFlipX_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (TransitionFlipX)");
	return 0;
}

int lua_register_cocos2dx_TransitionFlipX(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"TransitionFlipX");
	tolua_cclass(tolua_S,"TransitionFlipX","TransitionFlipX","TransitionSceneOriented",NULL);

	tolua_beginmodule(tolua_S,"TransitionFlipX");
		tolua_function(tolua_S,"create", lua_cocos2dx_TransitionFlipX_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_TransitionFlipY_create(lua_State* tolua_S)
{
	int argc = 0;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"TransitionFlipY",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S)-1;

	do {
		if (argc == 2) {
			double arg0;
			ok &= luaval_to_number(tolua_S, 2,&arg0);
			if (!ok) { ok = true; break; }
			cocos2d::Scene* arg1;
			#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Scene",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Scene*)tolua_tousertype(tolua_S,3,0);
		};
			if (!ok) { ok = true; break; }
			cocos2d::TransitionFlipY* ret = cocos2d::TransitionFlipY::create(arg0, arg1);
			tolua_pushusertype(tolua_S,ret,"TransitionFlipY");
			return 1;
		}
	} while (0);
	do {
		if (argc == 3) {
			double arg0;
			ok &= luaval_to_number(tolua_S, 2,&arg0);
			if (!ok) { ok = true; break; }
			cocos2d::Scene* arg1;
			#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Scene",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Scene*)tolua_tousertype(tolua_S,3,0);
		};
			if (!ok) { ok = true; break; }
			cocos2d::TransitionScene::Orientation arg2;
			ok &= luaval_to_int32(tolua_S, 4,(int*)&arg2);
			if (!ok) { ok = true; break; }
			cocos2d::TransitionFlipY* ret = cocos2d::TransitionFlipY::create(arg0, arg1, arg2);
			tolua_pushusertype(tolua_S,ret,"TransitionFlipY");
			return 1;
		}
	} while (0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 3);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionFlipY_create'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TransitionFlipY_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionFlipY* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::TransitionFlipY();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"TransitionFlipY");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionFlipY_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TransitionFlipY_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (TransitionFlipY)");
	return 0;
}

int lua_register_cocos2dx_TransitionFlipY(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"TransitionFlipY");
	tolua_cclass(tolua_S,"TransitionFlipY","TransitionFlipY","TransitionSceneOriented",NULL);

	tolua_beginmodule(tolua_S,"TransitionFlipY");
		tolua_function(tolua_S,"create", lua_cocos2dx_TransitionFlipY_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_TransitionFlipAngular_create(lua_State* tolua_S)
{
	int argc = 0;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"TransitionFlipAngular",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S)-1;

	do {
		if (argc == 2) {
			double arg0;
			ok &= luaval_to_number(tolua_S, 2,&arg0);
			if (!ok) { ok = true; break; }
			cocos2d::Scene* arg1;
			#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Scene",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Scene*)tolua_tousertype(tolua_S,3,0);
		};
			if (!ok) { ok = true; break; }
			cocos2d::TransitionFlipAngular* ret = cocos2d::TransitionFlipAngular::create(arg0, arg1);
			tolua_pushusertype(tolua_S,ret,"TransitionFlipAngular");
			return 1;
		}
	} while (0);
	do {
		if (argc == 3) {
			double arg0;
			ok &= luaval_to_number(tolua_S, 2,&arg0);
			if (!ok) { ok = true; break; }
			cocos2d::Scene* arg1;
			#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Scene",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Scene*)tolua_tousertype(tolua_S,3,0);
		};
			if (!ok) { ok = true; break; }
			cocos2d::TransitionScene::Orientation arg2;
			ok &= luaval_to_int32(tolua_S, 4,(int*)&arg2);
			if (!ok) { ok = true; break; }
			cocos2d::TransitionFlipAngular* ret = cocos2d::TransitionFlipAngular::create(arg0, arg1, arg2);
			tolua_pushusertype(tolua_S,ret,"TransitionFlipAngular");
			return 1;
		}
	} while (0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 3);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionFlipAngular_create'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TransitionFlipAngular_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionFlipAngular* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::TransitionFlipAngular();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"TransitionFlipAngular");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionFlipAngular_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TransitionFlipAngular_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (TransitionFlipAngular)");
	return 0;
}

int lua_register_cocos2dx_TransitionFlipAngular(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"TransitionFlipAngular");
	tolua_cclass(tolua_S,"TransitionFlipAngular","TransitionFlipAngular","TransitionSceneOriented",NULL);

	tolua_beginmodule(tolua_S,"TransitionFlipAngular");
		tolua_function(tolua_S,"create", lua_cocos2dx_TransitionFlipAngular_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_TransitionZoomFlipX_create(lua_State* tolua_S)
{
	int argc = 0;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"TransitionZoomFlipX",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S)-1;

	do {
		if (argc == 2) {
			double arg0;
			ok &= luaval_to_number(tolua_S, 2,&arg0);
			if (!ok) { ok = true; break; }
			cocos2d::Scene* arg1;
			#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Scene",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Scene*)tolua_tousertype(tolua_S,3,0);
		};
			if (!ok) { ok = true; break; }
			cocos2d::TransitionZoomFlipX* ret = cocos2d::TransitionZoomFlipX::create(arg0, arg1);
			tolua_pushusertype(tolua_S,ret,"TransitionZoomFlipX");
			return 1;
		}
	} while (0);
	do {
		if (argc == 3) {
			double arg0;
			ok &= luaval_to_number(tolua_S, 2,&arg0);
			if (!ok) { ok = true; break; }
			cocos2d::Scene* arg1;
			#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Scene",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Scene*)tolua_tousertype(tolua_S,3,0);
		};
			if (!ok) { ok = true; break; }
			cocos2d::TransitionScene::Orientation arg2;
			ok &= luaval_to_int32(tolua_S, 4,(int*)&arg2);
			if (!ok) { ok = true; break; }
			cocos2d::TransitionZoomFlipX* ret = cocos2d::TransitionZoomFlipX::create(arg0, arg1, arg2);
			tolua_pushusertype(tolua_S,ret,"TransitionZoomFlipX");
			return 1;
		}
	} while (0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 3);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionZoomFlipX_create'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TransitionZoomFlipX_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionZoomFlipX* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::TransitionZoomFlipX();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"TransitionZoomFlipX");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionZoomFlipX_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TransitionZoomFlipX_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (TransitionZoomFlipX)");
	return 0;
}

int lua_register_cocos2dx_TransitionZoomFlipX(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"TransitionZoomFlipX");
	tolua_cclass(tolua_S,"TransitionZoomFlipX","TransitionZoomFlipX","TransitionSceneOriented",NULL);

	tolua_beginmodule(tolua_S,"TransitionZoomFlipX");
		tolua_function(tolua_S,"create", lua_cocos2dx_TransitionZoomFlipX_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_TransitionZoomFlipY_create(lua_State* tolua_S)
{
	int argc = 0;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"TransitionZoomFlipY",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S)-1;

	do {
		if (argc == 2) {
			double arg0;
			ok &= luaval_to_number(tolua_S, 2,&arg0);
			if (!ok) { ok = true; break; }
			cocos2d::Scene* arg1;
			#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Scene",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Scene*)tolua_tousertype(tolua_S,3,0);
		};
			if (!ok) { ok = true; break; }
			cocos2d::TransitionZoomFlipY* ret = cocos2d::TransitionZoomFlipY::create(arg0, arg1);
			tolua_pushusertype(tolua_S,ret,"TransitionZoomFlipY");
			return 1;
		}
	} while (0);
	do {
		if (argc == 3) {
			double arg0;
			ok &= luaval_to_number(tolua_S, 2,&arg0);
			if (!ok) { ok = true; break; }
			cocos2d::Scene* arg1;
			#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Scene",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Scene*)tolua_tousertype(tolua_S,3,0);
		};
			if (!ok) { ok = true; break; }
			cocos2d::TransitionScene::Orientation arg2;
			ok &= luaval_to_int32(tolua_S, 4,(int*)&arg2);
			if (!ok) { ok = true; break; }
			cocos2d::TransitionZoomFlipY* ret = cocos2d::TransitionZoomFlipY::create(arg0, arg1, arg2);
			tolua_pushusertype(tolua_S,ret,"TransitionZoomFlipY");
			return 1;
		}
	} while (0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 3);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionZoomFlipY_create'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TransitionZoomFlipY_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionZoomFlipY* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::TransitionZoomFlipY();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"TransitionZoomFlipY");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionZoomFlipY_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TransitionZoomFlipY_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (TransitionZoomFlipY)");
	return 0;
}

int lua_register_cocos2dx_TransitionZoomFlipY(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"TransitionZoomFlipY");
	tolua_cclass(tolua_S,"TransitionZoomFlipY","TransitionZoomFlipY","TransitionSceneOriented",NULL);

	tolua_beginmodule(tolua_S,"TransitionZoomFlipY");
		tolua_function(tolua_S,"create", lua_cocos2dx_TransitionZoomFlipY_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_TransitionZoomFlipAngular_create(lua_State* tolua_S)
{
	int argc = 0;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"TransitionZoomFlipAngular",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S)-1;

	do {
		if (argc == 2) {
			double arg0;
			ok &= luaval_to_number(tolua_S, 2,&arg0);
			if (!ok) { ok = true; break; }
			cocos2d::Scene* arg1;
			#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Scene",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Scene*)tolua_tousertype(tolua_S,3,0);
		};
			if (!ok) { ok = true; break; }
			cocos2d::TransitionZoomFlipAngular* ret = cocos2d::TransitionZoomFlipAngular::create(arg0, arg1);
			tolua_pushusertype(tolua_S,ret,"TransitionZoomFlipAngular");
			return 1;
		}
	} while (0);
	do {
		if (argc == 3) {
			double arg0;
			ok &= luaval_to_number(tolua_S, 2,&arg0);
			if (!ok) { ok = true; break; }
			cocos2d::Scene* arg1;
			#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Scene",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Scene*)tolua_tousertype(tolua_S,3,0);
		};
			if (!ok) { ok = true; break; }
			cocos2d::TransitionScene::Orientation arg2;
			ok &= luaval_to_int32(tolua_S, 4,(int*)&arg2);
			if (!ok) { ok = true; break; }
			cocos2d::TransitionZoomFlipAngular* ret = cocos2d::TransitionZoomFlipAngular::create(arg0, arg1, arg2);
			tolua_pushusertype(tolua_S,ret,"TransitionZoomFlipAngular");
			return 1;
		}
	} while (0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 3);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionZoomFlipAngular_create'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TransitionZoomFlipAngular_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionZoomFlipAngular* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::TransitionZoomFlipAngular();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"TransitionZoomFlipAngular");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionZoomFlipAngular_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TransitionZoomFlipAngular_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (TransitionZoomFlipAngular)");
	return 0;
}

int lua_register_cocos2dx_TransitionZoomFlipAngular(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"TransitionZoomFlipAngular");
	tolua_cclass(tolua_S,"TransitionZoomFlipAngular","TransitionZoomFlipAngular","TransitionSceneOriented",NULL);

	tolua_beginmodule(tolua_S,"TransitionZoomFlipAngular");
		tolua_function(tolua_S,"create", lua_cocos2dx_TransitionZoomFlipAngular_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_TransitionFade_initWithDuration(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionFade* cobj = NULL;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TransitionFade",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TransitionFade*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TransitionFade_initWithDuration'", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	do{
		if (argc == 2) {
			double arg0;
			ok &= luaval_to_number(tolua_S, 2,&arg0);

			if (!ok) { ok = true; break; }
			cocos2d::Scene* arg1;
			#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Scene",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Scene*)tolua_tousertype(tolua_S,3,0);
		};

			if (!ok) { ok = true; break; }
		bool ret = cobj->initWithDuration(arg0, arg1);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
		}
	}while(0);
	do{
		if (argc == 3) {
			double arg0;
			ok &= luaval_to_number(tolua_S, 2,&arg0);

			if (!ok) { ok = true; break; }
			cocos2d::Scene* arg1;
			#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Scene",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Scene*)tolua_tousertype(tolua_S,3,0);
		};

			if (!ok) { ok = true; break; }
			cocos2d::Color3B arg2;
			ok &= luaval_to_color3b(tolua_S, 4, &arg2);

			if (!ok) { ok = true; break; }
		bool ret = cobj->initWithDuration(arg0, arg1, arg2);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
		}
	}while(0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 3);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionFade_initWithDuration'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TransitionFade_create(lua_State* tolua_S)
{
	int argc = 0;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"TransitionFade",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S)-1;

	do {
		if (argc == 2) {
			double arg0;
			ok &= luaval_to_number(tolua_S, 2,&arg0);
			if (!ok) { ok = true; break; }
			cocos2d::Scene* arg1;
			#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Scene",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Scene*)tolua_tousertype(tolua_S,3,0);
		};
			if (!ok) { ok = true; break; }
			cocos2d::TransitionFade* ret = cocos2d::TransitionFade::create(arg0, arg1);
			tolua_pushusertype(tolua_S,ret,"TransitionFade");
			return 1;
		}
	} while (0);
	do {
		if (argc == 3) {
			double arg0;
			ok &= luaval_to_number(tolua_S, 2,&arg0);
			if (!ok) { ok = true; break; }
			cocos2d::Scene* arg1;
			#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Scene",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Scene*)tolua_tousertype(tolua_S,3,0);
		};
			if (!ok) { ok = true; break; }
			cocos2d::Color3B arg2;
			ok &= luaval_to_color3b(tolua_S, 4, &arg2);
			if (!ok) { ok = true; break; }
			cocos2d::TransitionFade* ret = cocos2d::TransitionFade::create(arg0, arg1, arg2);
			tolua_pushusertype(tolua_S,ret,"TransitionFade");
			return 1;
		}
	} while (0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 3);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionFade_create'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TransitionFade_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionFade* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::TransitionFade();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"TransitionFade");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionFade_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TransitionFade_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (TransitionFade)");
	return 0;
}

int lua_register_cocos2dx_TransitionFade(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"TransitionFade");
	tolua_cclass(tolua_S,"TransitionFade","TransitionFade","TransitionScene",NULL);

	tolua_beginmodule(tolua_S,"TransitionFade");
		tolua_function(tolua_S,"initWithDuration",lua_cocos2dx_TransitionFade_initWithDuration);
		tolua_function(tolua_S,"new",lua_cocos2dx_TransitionFade_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_TransitionFade_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_TransitionCrossFade_draw(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionCrossFade* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TransitionCrossFade",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TransitionCrossFade*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TransitionCrossFade_draw'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->draw();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionCrossFade_draw'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TransitionCrossFade_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"TransitionCrossFade",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 2) {
		double arg0;
		cocos2d::Scene* arg1;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Scene",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Scene*)tolua_tousertype(tolua_S,3,0);
		};
		if(!ok)
			return 0;
		cocos2d::TransitionCrossFade* ret = cocos2d::TransitionCrossFade::create(arg0, arg1);
		tolua_pushusertype(tolua_S,ret,"TransitionCrossFade");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionCrossFade_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TransitionCrossFade_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionCrossFade* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::TransitionCrossFade();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"TransitionCrossFade");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionCrossFade_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TransitionCrossFade_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (TransitionCrossFade)");
	return 0;
}

int lua_register_cocos2dx_TransitionCrossFade(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"TransitionCrossFade");
	tolua_cclass(tolua_S,"TransitionCrossFade","TransitionCrossFade","TransitionScene",NULL);

	tolua_beginmodule(tolua_S,"TransitionCrossFade");
		tolua_function(tolua_S,"draw",lua_cocos2dx_TransitionCrossFade_draw);
		tolua_function(tolua_S,"new",lua_cocos2dx_TransitionCrossFade_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_TransitionCrossFade_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_TransitionTurnOffTiles_easeActionWithAction(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionTurnOffTiles* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TransitionTurnOffTiles",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TransitionTurnOffTiles*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TransitionTurnOffTiles_easeActionWithAction'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::ActionInterval* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"ActionInterval",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::ActionInterval*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cocos2d::ActionInterval* ret = cobj->easeActionWithAction(arg0);
		tolua_pushusertype(tolua_S,ret,"ActionInterval");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionTurnOffTiles_easeActionWithAction'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TransitionTurnOffTiles_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"TransitionTurnOffTiles",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 2) {
		double arg0;
		cocos2d::Scene* arg1;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Scene",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Scene*)tolua_tousertype(tolua_S,3,0);
		};
		if(!ok)
			return 0;
		cocos2d::TransitionTurnOffTiles* ret = cocos2d::TransitionTurnOffTiles::create(arg0, arg1);
		tolua_pushusertype(tolua_S,ret,"TransitionTurnOffTiles");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionTurnOffTiles_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TransitionTurnOffTiles_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionTurnOffTiles* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::TransitionTurnOffTiles();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"TransitionTurnOffTiles");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionTurnOffTiles_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TransitionTurnOffTiles_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (TransitionTurnOffTiles)");
	return 0;
}

int lua_register_cocos2dx_TransitionTurnOffTiles(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"TransitionTurnOffTiles");
	tolua_cclass(tolua_S,"TransitionTurnOffTiles","TransitionTurnOffTiles","TransitionScene",NULL);

	tolua_beginmodule(tolua_S,"TransitionTurnOffTiles");
		tolua_function(tolua_S,"easeActionWithAction",lua_cocos2dx_TransitionTurnOffTiles_easeActionWithAction);
		tolua_function(tolua_S,"new",lua_cocos2dx_TransitionTurnOffTiles_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_TransitionTurnOffTiles_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_TransitionSplitCols_action(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionSplitCols* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TransitionSplitCols",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TransitionSplitCols*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TransitionSplitCols_action'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::ActionInterval* ret = cobj->action();
		tolua_pushusertype(tolua_S,ret,"ActionInterval");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionSplitCols_action'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TransitionSplitCols_easeActionWithAction(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionSplitCols* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TransitionSplitCols",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TransitionSplitCols*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TransitionSplitCols_easeActionWithAction'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::ActionInterval* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"ActionInterval",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::ActionInterval*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cocos2d::ActionInterval* ret = cobj->easeActionWithAction(arg0);
		tolua_pushusertype(tolua_S,ret,"ActionInterval");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionSplitCols_easeActionWithAction'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TransitionSplitCols_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"TransitionSplitCols",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 2) {
		double arg0;
		cocos2d::Scene* arg1;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Scene",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Scene*)tolua_tousertype(tolua_S,3,0);
		};
		if(!ok)
			return 0;
		cocos2d::TransitionSplitCols* ret = cocos2d::TransitionSplitCols::create(arg0, arg1);
		tolua_pushusertype(tolua_S,ret,"TransitionSplitCols");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionSplitCols_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TransitionSplitCols_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionSplitCols* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::TransitionSplitCols();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"TransitionSplitCols");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionSplitCols_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TransitionSplitCols_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (TransitionSplitCols)");
	return 0;
}

int lua_register_cocos2dx_TransitionSplitCols(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"TransitionSplitCols");
	tolua_cclass(tolua_S,"TransitionSplitCols","TransitionSplitCols","TransitionScene",NULL);

	tolua_beginmodule(tolua_S,"TransitionSplitCols");
		tolua_function(tolua_S,"action",lua_cocos2dx_TransitionSplitCols_action);
		tolua_function(tolua_S,"easeActionWithAction",lua_cocos2dx_TransitionSplitCols_easeActionWithAction);
		tolua_function(tolua_S,"new",lua_cocos2dx_TransitionSplitCols_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_TransitionSplitCols_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_TransitionSplitRows_action(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionSplitRows* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TransitionSplitRows",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TransitionSplitRows*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TransitionSplitRows_action'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::ActionInterval* ret = cobj->action();
		tolua_pushusertype(tolua_S,ret,"ActionInterval");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionSplitRows_action'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TransitionSplitRows_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"TransitionSplitRows",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 2) {
		double arg0;
		cocos2d::Scene* arg1;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Scene",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Scene*)tolua_tousertype(tolua_S,3,0);
		};
		if(!ok)
			return 0;
		cocos2d::TransitionSplitRows* ret = cocos2d::TransitionSplitRows::create(arg0, arg1);
		tolua_pushusertype(tolua_S,ret,"TransitionSplitRows");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionSplitRows_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TransitionSplitRows_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionSplitRows* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::TransitionSplitRows();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"TransitionSplitRows");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionSplitRows_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TransitionSplitRows_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (TransitionSplitRows)");
	return 0;
}

int lua_register_cocos2dx_TransitionSplitRows(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"TransitionSplitRows");
	tolua_cclass(tolua_S,"TransitionSplitRows","TransitionSplitRows","TransitionSplitCols",NULL);

	tolua_beginmodule(tolua_S,"TransitionSplitRows");
		tolua_function(tolua_S,"action",lua_cocos2dx_TransitionSplitRows_action);
		tolua_function(tolua_S,"new",lua_cocos2dx_TransitionSplitRows_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_TransitionSplitRows_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_TransitionFadeTR_easeActionWithAction(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionFadeTR* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TransitionFadeTR",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TransitionFadeTR*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TransitionFadeTR_easeActionWithAction'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::ActionInterval* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"ActionInterval",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::ActionInterval*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cocos2d::ActionInterval* ret = cobj->easeActionWithAction(arg0);
		tolua_pushusertype(tolua_S,ret,"ActionInterval");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionFadeTR_easeActionWithAction'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TransitionFadeTR_actionWithSize(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionFadeTR* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TransitionFadeTR",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TransitionFadeTR*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TransitionFadeTR_actionWithSize'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Size arg0;
		ok &= luaval_to_size(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cocos2d::ActionInterval* ret = cobj->actionWithSize(arg0);
		tolua_pushusertype(tolua_S,ret,"ActionInterval");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionFadeTR_actionWithSize'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TransitionFadeTR_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"TransitionFadeTR",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 2) {
		double arg0;
		cocos2d::Scene* arg1;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Scene",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Scene*)tolua_tousertype(tolua_S,3,0);
		};
		if(!ok)
			return 0;
		cocos2d::TransitionFadeTR* ret = cocos2d::TransitionFadeTR::create(arg0, arg1);
		tolua_pushusertype(tolua_S,ret,"TransitionFadeTR");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionFadeTR_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TransitionFadeTR_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionFadeTR* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::TransitionFadeTR();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"TransitionFadeTR");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionFadeTR_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TransitionFadeTR_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (TransitionFadeTR)");
	return 0;
}

int lua_register_cocos2dx_TransitionFadeTR(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"TransitionFadeTR");
	tolua_cclass(tolua_S,"TransitionFadeTR","TransitionFadeTR","TransitionScene",NULL);

	tolua_beginmodule(tolua_S,"TransitionFadeTR");
		tolua_function(tolua_S,"easeActionWithAction",lua_cocos2dx_TransitionFadeTR_easeActionWithAction);
		tolua_function(tolua_S,"actionWithSize",lua_cocos2dx_TransitionFadeTR_actionWithSize);
		tolua_function(tolua_S,"new",lua_cocos2dx_TransitionFadeTR_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_TransitionFadeTR_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_TransitionFadeBL_actionWithSize(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionFadeBL* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TransitionFadeBL",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TransitionFadeBL*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TransitionFadeBL_actionWithSize'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Size arg0;
		ok &= luaval_to_size(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cocos2d::ActionInterval* ret = cobj->actionWithSize(arg0);
		tolua_pushusertype(tolua_S,ret,"ActionInterval");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionFadeBL_actionWithSize'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TransitionFadeBL_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"TransitionFadeBL",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 2) {
		double arg0;
		cocos2d::Scene* arg1;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Scene",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Scene*)tolua_tousertype(tolua_S,3,0);
		};
		if(!ok)
			return 0;
		cocos2d::TransitionFadeBL* ret = cocos2d::TransitionFadeBL::create(arg0, arg1);
		tolua_pushusertype(tolua_S,ret,"TransitionFadeBL");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionFadeBL_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TransitionFadeBL_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionFadeBL* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::TransitionFadeBL();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"TransitionFadeBL");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionFadeBL_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TransitionFadeBL_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (TransitionFadeBL)");
	return 0;
}

int lua_register_cocos2dx_TransitionFadeBL(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"TransitionFadeBL");
	tolua_cclass(tolua_S,"TransitionFadeBL","TransitionFadeBL","TransitionFadeTR",NULL);

	tolua_beginmodule(tolua_S,"TransitionFadeBL");
		tolua_function(tolua_S,"actionWithSize",lua_cocos2dx_TransitionFadeBL_actionWithSize);
		tolua_function(tolua_S,"new",lua_cocos2dx_TransitionFadeBL_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_TransitionFadeBL_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_TransitionFadeUp_actionWithSize(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionFadeUp* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TransitionFadeUp",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TransitionFadeUp*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TransitionFadeUp_actionWithSize'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Size arg0;
		ok &= luaval_to_size(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cocos2d::ActionInterval* ret = cobj->actionWithSize(arg0);
		tolua_pushusertype(tolua_S,ret,"ActionInterval");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionFadeUp_actionWithSize'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TransitionFadeUp_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"TransitionFadeUp",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 2) {
		double arg0;
		cocos2d::Scene* arg1;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Scene",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Scene*)tolua_tousertype(tolua_S,3,0);
		};
		if(!ok)
			return 0;
		cocos2d::TransitionFadeUp* ret = cocos2d::TransitionFadeUp::create(arg0, arg1);
		tolua_pushusertype(tolua_S,ret,"TransitionFadeUp");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionFadeUp_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TransitionFadeUp_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionFadeUp* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::TransitionFadeUp();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"TransitionFadeUp");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionFadeUp_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TransitionFadeUp_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (TransitionFadeUp)");
	return 0;
}

int lua_register_cocos2dx_TransitionFadeUp(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"TransitionFadeUp");
	tolua_cclass(tolua_S,"TransitionFadeUp","TransitionFadeUp","TransitionFadeTR",NULL);

	tolua_beginmodule(tolua_S,"TransitionFadeUp");
		tolua_function(tolua_S,"actionWithSize",lua_cocos2dx_TransitionFadeUp_actionWithSize);
		tolua_function(tolua_S,"new",lua_cocos2dx_TransitionFadeUp_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_TransitionFadeUp_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_TransitionFadeDown_actionWithSize(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionFadeDown* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TransitionFadeDown",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TransitionFadeDown*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TransitionFadeDown_actionWithSize'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Size arg0;
		ok &= luaval_to_size(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cocos2d::ActionInterval* ret = cobj->actionWithSize(arg0);
		tolua_pushusertype(tolua_S,ret,"ActionInterval");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionFadeDown_actionWithSize'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TransitionFadeDown_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"TransitionFadeDown",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 2) {
		double arg0;
		cocos2d::Scene* arg1;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Scene",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Scene*)tolua_tousertype(tolua_S,3,0);
		};
		if(!ok)
			return 0;
		cocos2d::TransitionFadeDown* ret = cocos2d::TransitionFadeDown::create(arg0, arg1);
		tolua_pushusertype(tolua_S,ret,"TransitionFadeDown");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionFadeDown_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TransitionFadeDown_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionFadeDown* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::TransitionFadeDown();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"TransitionFadeDown");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionFadeDown_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TransitionFadeDown_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (TransitionFadeDown)");
	return 0;
}

int lua_register_cocos2dx_TransitionFadeDown(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"TransitionFadeDown");
	tolua_cclass(tolua_S,"TransitionFadeDown","TransitionFadeDown","TransitionFadeTR",NULL);

	tolua_beginmodule(tolua_S,"TransitionFadeDown");
		tolua_function(tolua_S,"actionWithSize",lua_cocos2dx_TransitionFadeDown_actionWithSize);
		tolua_function(tolua_S,"new",lua_cocos2dx_TransitionFadeDown_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_TransitionFadeDown_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_TransitionPageTurn_actionWithSize(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionPageTurn* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TransitionPageTurn",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TransitionPageTurn*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TransitionPageTurn_actionWithSize'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Size arg0;
		ok &= luaval_to_size(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cocos2d::ActionInterval* ret = cobj->actionWithSize(arg0);
		tolua_pushusertype(tolua_S,ret,"ActionInterval");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionPageTurn_actionWithSize'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TransitionPageTurn_initWithDuration(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionPageTurn* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TransitionPageTurn",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TransitionPageTurn*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TransitionPageTurn_initWithDuration'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 3) {
		double arg0;
		cocos2d::Scene* arg1;
		bool arg2;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Scene",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Scene*)tolua_tousertype(tolua_S,3,0);
		};
		ok &= luaval_to_boolean(tolua_S, 4,&arg2);
		if(!ok)
			return 0;
		bool ret = cobj->initWithDuration(arg0, arg1, arg2);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 3);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionPageTurn_initWithDuration'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TransitionPageTurn_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"TransitionPageTurn",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 3) {
		double arg0;
		cocos2d::Scene* arg1;
		bool arg2;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Scene",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Scene*)tolua_tousertype(tolua_S,3,0);
		};
		ok &= luaval_to_boolean(tolua_S, 4,&arg2);
		if(!ok)
			return 0;
		cocos2d::TransitionPageTurn* ret = cocos2d::TransitionPageTurn::create(arg0, arg1, arg2);
		tolua_pushusertype(tolua_S,ret,"TransitionPageTurn");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 3);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionPageTurn_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TransitionPageTurn_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionPageTurn* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::TransitionPageTurn();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"TransitionPageTurn");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionPageTurn_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TransitionPageTurn_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (TransitionPageTurn)");
	return 0;
}

int lua_register_cocos2dx_TransitionPageTurn(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"TransitionPageTurn");
	tolua_cclass(tolua_S,"TransitionPageTurn","TransitionPageTurn","TransitionScene",NULL);

	tolua_beginmodule(tolua_S,"TransitionPageTurn");
		tolua_function(tolua_S,"actionWithSize",lua_cocos2dx_TransitionPageTurn_actionWithSize);
		tolua_function(tolua_S,"initWithDuration",lua_cocos2dx_TransitionPageTurn_initWithDuration);
		tolua_function(tolua_S,"new",lua_cocos2dx_TransitionPageTurn_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_TransitionPageTurn_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_TransitionProgress_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"TransitionProgress",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 2) {
		double arg0;
		cocos2d::Scene* arg1;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Scene",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Scene*)tolua_tousertype(tolua_S,3,0);
		};
		if(!ok)
			return 0;
		cocos2d::TransitionProgress* ret = cocos2d::TransitionProgress::create(arg0, arg1);
		tolua_pushusertype(tolua_S,ret,"TransitionProgress");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionProgress_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TransitionProgress_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TransitionProgress* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::TransitionProgress();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"TransitionProgress");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionProgress_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TransitionProgress_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (TransitionProgress)");
	return 0;
}

int lua_register_cocos2dx_TransitionProgress(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"TransitionProgress");
	tolua_cclass(tolua_S,"TransitionProgress","TransitionProgress","TransitionScene",NULL);

	tolua_beginmodule(tolua_S,"TransitionProgress");
		tolua_function(tolua_S,"create", lua_cocos2dx_TransitionProgress_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_TransitionProgressRadialCCW_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"TransitionProgressRadialCCW",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 2) {
		double arg0;
		cocos2d::Scene* arg1;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Scene",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Scene*)tolua_tousertype(tolua_S,3,0);
		};
		if(!ok)
			return 0;
		cocos2d::TransitionProgressRadialCCW* ret = cocos2d::TransitionProgressRadialCCW::create(arg0, arg1);
		tolua_pushusertype(tolua_S,ret,"TransitionProgressRadialCCW");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionProgressRadialCCW_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TransitionProgressRadialCCW_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (TransitionProgressRadialCCW)");
	return 0;
}

int lua_register_cocos2dx_TransitionProgressRadialCCW(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"TransitionProgressRadialCCW");
	tolua_cclass(tolua_S,"TransitionProgressRadialCCW","TransitionProgressRadialCCW","TransitionProgress",NULL);

	tolua_beginmodule(tolua_S,"TransitionProgressRadialCCW");
		tolua_function(tolua_S,"create", lua_cocos2dx_TransitionProgressRadialCCW_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_TransitionProgressRadialCW_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"TransitionProgressRadialCW",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 2) {
		double arg0;
		cocos2d::Scene* arg1;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Scene",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Scene*)tolua_tousertype(tolua_S,3,0);
		};
		if(!ok)
			return 0;
		cocos2d::TransitionProgressRadialCW* ret = cocos2d::TransitionProgressRadialCW::create(arg0, arg1);
		tolua_pushusertype(tolua_S,ret,"TransitionProgressRadialCW");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionProgressRadialCW_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TransitionProgressRadialCW_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (TransitionProgressRadialCW)");
	return 0;
}

int lua_register_cocos2dx_TransitionProgressRadialCW(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"TransitionProgressRadialCW");
	tolua_cclass(tolua_S,"TransitionProgressRadialCW","TransitionProgressRadialCW","TransitionProgress",NULL);

	tolua_beginmodule(tolua_S,"TransitionProgressRadialCW");
		tolua_function(tolua_S,"create", lua_cocos2dx_TransitionProgressRadialCW_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_TransitionProgressHorizontal_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"TransitionProgressHorizontal",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 2) {
		double arg0;
		cocos2d::Scene* arg1;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Scene",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Scene*)tolua_tousertype(tolua_S,3,0);
		};
		if(!ok)
			return 0;
		cocos2d::TransitionProgressHorizontal* ret = cocos2d::TransitionProgressHorizontal::create(arg0, arg1);
		tolua_pushusertype(tolua_S,ret,"TransitionProgressHorizontal");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionProgressHorizontal_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TransitionProgressHorizontal_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (TransitionProgressHorizontal)");
	return 0;
}

int lua_register_cocos2dx_TransitionProgressHorizontal(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"TransitionProgressHorizontal");
	tolua_cclass(tolua_S,"TransitionProgressHorizontal","TransitionProgressHorizontal","TransitionProgress",NULL);

	tolua_beginmodule(tolua_S,"TransitionProgressHorizontal");
		tolua_function(tolua_S,"create", lua_cocos2dx_TransitionProgressHorizontal_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_TransitionProgressVertical_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"TransitionProgressVertical",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 2) {
		double arg0;
		cocos2d::Scene* arg1;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Scene",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Scene*)tolua_tousertype(tolua_S,3,0);
		};
		if(!ok)
			return 0;
		cocos2d::TransitionProgressVertical* ret = cocos2d::TransitionProgressVertical::create(arg0, arg1);
		tolua_pushusertype(tolua_S,ret,"TransitionProgressVertical");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionProgressVertical_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TransitionProgressVertical_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (TransitionProgressVertical)");
	return 0;
}

int lua_register_cocos2dx_TransitionProgressVertical(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"TransitionProgressVertical");
	tolua_cclass(tolua_S,"TransitionProgressVertical","TransitionProgressVertical","TransitionProgress",NULL);

	tolua_beginmodule(tolua_S,"TransitionProgressVertical");
		tolua_function(tolua_S,"create", lua_cocos2dx_TransitionProgressVertical_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_TransitionProgressInOut_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"TransitionProgressInOut",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 2) {
		double arg0;
		cocos2d::Scene* arg1;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Scene",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Scene*)tolua_tousertype(tolua_S,3,0);
		};
		if(!ok)
			return 0;
		cocos2d::TransitionProgressInOut* ret = cocos2d::TransitionProgressInOut::create(arg0, arg1);
		tolua_pushusertype(tolua_S,ret,"TransitionProgressInOut");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionProgressInOut_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TransitionProgressInOut_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (TransitionProgressInOut)");
	return 0;
}

int lua_register_cocos2dx_TransitionProgressInOut(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"TransitionProgressInOut");
	tolua_cclass(tolua_S,"TransitionProgressInOut","TransitionProgressInOut","TransitionProgress",NULL);

	tolua_beginmodule(tolua_S,"TransitionProgressInOut");
		tolua_function(tolua_S,"create", lua_cocos2dx_TransitionProgressInOut_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_TransitionProgressOutIn_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"TransitionProgressOutIn",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 2) {
		double arg0;
		cocos2d::Scene* arg1;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Scene",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Scene*)tolua_tousertype(tolua_S,3,0);
		};
		if(!ok)
			return 0;
		cocos2d::TransitionProgressOutIn* ret = cocos2d::TransitionProgressOutIn::create(arg0, arg1);
		tolua_pushusertype(tolua_S,ret,"TransitionProgressOutIn");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TransitionProgressOutIn_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TransitionProgressOutIn_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (TransitionProgressOutIn)");
	return 0;
}

int lua_register_cocos2dx_TransitionProgressOutIn(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"TransitionProgressOutIn");
	tolua_cclass(tolua_S,"TransitionProgressOutIn","TransitionProgressOutIn","TransitionProgress",NULL);

	tolua_beginmodule(tolua_S,"TransitionProgressOutIn");
		tolua_function(tolua_S,"create", lua_cocos2dx_TransitionProgressOutIn_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_MenuItem_setEnabled(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MenuItem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MenuItem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MenuItem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MenuItem_setEnabled'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setEnabled(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MenuItem_setEnabled'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MenuItem_activate(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MenuItem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MenuItem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MenuItem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MenuItem_activate'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->activate();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MenuItem_activate'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MenuItem_isEnabled(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MenuItem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MenuItem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MenuItem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MenuItem_isEnabled'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->isEnabled();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MenuItem_isEnabled'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MenuItem_isSelected(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MenuItem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MenuItem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MenuItem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MenuItem_isSelected'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->isSelected();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MenuItem_isSelected'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MenuItem_selected(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MenuItem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MenuItem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MenuItem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MenuItem_selected'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->selected();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MenuItem_selected'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MenuItem_unselected(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MenuItem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MenuItem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MenuItem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MenuItem_unselected'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->unselected();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MenuItem_unselected'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MenuItem_rect(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MenuItem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MenuItem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MenuItem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MenuItem_rect'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Rect ret = cobj->rect();
		rect_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MenuItem_rect'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MenuItem_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MenuItem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::MenuItem();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"MenuItem");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MenuItem_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_MenuItem_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (MenuItem)");
	return 0;
}

int lua_register_cocos2dx_MenuItem(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"MenuItem");
	tolua_cclass(tolua_S,"MenuItem","MenuItem","NodeRGBA",NULL);

	tolua_beginmodule(tolua_S,"MenuItem");
		tolua_function(tolua_S,"setEnabled",lua_cocos2dx_MenuItem_setEnabled);
		tolua_function(tolua_S,"activate",lua_cocos2dx_MenuItem_activate);
		tolua_function(tolua_S,"isEnabled",lua_cocos2dx_MenuItem_isEnabled);
		tolua_function(tolua_S,"isSelected",lua_cocos2dx_MenuItem_isSelected);
		tolua_function(tolua_S,"selected",lua_cocos2dx_MenuItem_selected);
		tolua_function(tolua_S,"unselected",lua_cocos2dx_MenuItem_unselected);
		tolua_function(tolua_S,"rect",lua_cocos2dx_MenuItem_rect);
		tolua_function(tolua_S,"new",lua_cocos2dx_MenuItem_constructor);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_MenuItemLabel_setEnabled(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MenuItemLabel* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MenuItemLabel",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MenuItemLabel*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MenuItemLabel_setEnabled'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setEnabled(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MenuItemLabel_setEnabled'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MenuItemLabel_setLabel(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MenuItemLabel* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MenuItemLabel",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MenuItemLabel*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MenuItemLabel_setLabel'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Node* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->setLabel(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MenuItemLabel_setLabel'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MenuItemLabel_activate(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MenuItemLabel* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MenuItemLabel",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MenuItemLabel*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MenuItemLabel_activate'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->activate();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MenuItemLabel_activate'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MenuItemLabel_getDisabledColor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MenuItemLabel* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MenuItemLabel",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MenuItemLabel*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MenuItemLabel_getDisabledColor'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Color3B ret = cobj->getDisabledColor();
		color3b_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MenuItemLabel_getDisabledColor'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MenuItemLabel_setString(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MenuItemLabel* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MenuItemLabel",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MenuItemLabel*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MenuItemLabel_setString'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		const char* arg0;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		if(!ok)
			return 0;
		cobj->setString(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MenuItemLabel_setString'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MenuItemLabel_selected(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MenuItemLabel* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MenuItemLabel",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MenuItemLabel*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MenuItemLabel_selected'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->selected();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MenuItemLabel_selected'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MenuItemLabel_initWithLabel(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MenuItemLabel* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MenuItemLabel",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MenuItemLabel*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MenuItemLabel_initWithLabel'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		cocos2d::Node* arg0;
		cocos2d::ccMenuCallback arg1;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		do {
		/*	std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, JS_THIS_OBJECT(cx, vp), argv[1]));
			auto lambda = [=](Object* larg0) -> void {
				jsval largv[1];
				tolua_pushusertype(tolua_S,larg0,"Object*");
				jsval rval;
				JSBool ok = func->invoke(1, &largv[0], rval);
				if (!ok && JS_IsExceptionPending(cx)) {
					JS_ReportPendingException(cx);
				}
			};
			arg1 = lambda;
			*/
		} while(0)
		;
		if(!ok)
			return 0;
		bool ret = cobj->initWithLabel(arg0, arg1);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MenuItemLabel_initWithLabel'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MenuItemLabel_setDisabledColor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MenuItemLabel* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MenuItemLabel",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MenuItemLabel*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MenuItemLabel_setDisabledColor'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Color3B arg0;
		ok &= luaval_to_color3b(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->setDisabledColor(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MenuItemLabel_setDisabledColor'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MenuItemLabel_getLabel(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MenuItemLabel* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MenuItemLabel",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MenuItemLabel*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MenuItemLabel_getLabel'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Node* ret = cobj->getLabel();
		tolua_pushusertype(tolua_S,ret,"Node");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MenuItemLabel_getLabel'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MenuItemLabel_unselected(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MenuItemLabel* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MenuItemLabel",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MenuItemLabel*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MenuItemLabel_unselected'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->unselected();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MenuItemLabel_unselected'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MenuItemLabel_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MenuItemLabel* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::MenuItemLabel();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"MenuItemLabel");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MenuItemLabel_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_MenuItemLabel_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (MenuItemLabel)");
	return 0;
}

int lua_register_cocos2dx_MenuItemLabel(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"MenuItemLabel");
	tolua_cclass(tolua_S,"MenuItemLabel","MenuItemLabel","MenuItem",NULL);

	tolua_beginmodule(tolua_S,"MenuItemLabel");
		tolua_function(tolua_S,"setEnabled",lua_cocos2dx_MenuItemLabel_setEnabled);
		tolua_function(tolua_S,"setLabel",lua_cocos2dx_MenuItemLabel_setLabel);
		tolua_function(tolua_S,"activate",lua_cocos2dx_MenuItemLabel_activate);
		tolua_function(tolua_S,"getDisabledColor",lua_cocos2dx_MenuItemLabel_getDisabledColor);
		tolua_function(tolua_S,"setString",lua_cocos2dx_MenuItemLabel_setString);
		tolua_function(tolua_S,"selected",lua_cocos2dx_MenuItemLabel_selected);
		tolua_function(tolua_S,"initWithLabel",lua_cocos2dx_MenuItemLabel_initWithLabel);
		tolua_function(tolua_S,"setDisabledColor",lua_cocos2dx_MenuItemLabel_setDisabledColor);
		tolua_function(tolua_S,"getLabel",lua_cocos2dx_MenuItemLabel_getLabel);
		tolua_function(tolua_S,"unselected",lua_cocos2dx_MenuItemLabel_unselected);
		tolua_function(tolua_S,"new",lua_cocos2dx_MenuItemLabel_constructor);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_MenuItemAtlasFont_initWithString(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MenuItemAtlasFont* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MenuItemAtlasFont",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MenuItemAtlasFont*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MenuItemAtlasFont_initWithString'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 6) {
		const char* arg0;
		const char* arg1;
		int arg2;
		int arg3;
		int32_t arg4;
		cocos2d::ccMenuCallback arg5;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp); arg1 = arg1_tmp.c_str();
		ok &= luaval_to_int32(tolua_S, 4,(int*)&arg2);
		ok &= luaval_to_int32(tolua_S, 5,(int*)&arg3);
		ok &= luaval_to_int32(tolua_S, 6,&arg4);
		do {
		/*	std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, JS_THIS_OBJECT(cx, vp), argv[5]));
			auto lambda = [=](Object* larg0) -> void {
				jsval largv[1];
				tolua_pushusertype(tolua_S,larg0,"Object*");
				jsval rval;
				JSBool ok = func->invoke(1, &largv[0], rval);
				if (!ok && JS_IsExceptionPending(cx)) {
					JS_ReportPendingException(cx);
				}
			};
			arg5 = lambda;
			*/
		} while(0)
		;
		if(!ok)
			return 0;
		bool ret = cobj->initWithString(arg0, arg1, arg2, arg3, arg4, arg5);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 6);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MenuItemAtlasFont_initWithString'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MenuItemAtlasFont_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MenuItemAtlasFont* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::MenuItemAtlasFont();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"MenuItemAtlasFont");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MenuItemAtlasFont_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_MenuItemAtlasFont_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (MenuItemAtlasFont)");
	return 0;
}

int lua_register_cocos2dx_MenuItemAtlasFont(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"MenuItemAtlasFont");
	tolua_cclass(tolua_S,"MenuItemAtlasFont","MenuItemAtlasFont","MenuItemLabel",NULL);

	tolua_beginmodule(tolua_S,"MenuItemAtlasFont");
		tolua_function(tolua_S,"initWithString",lua_cocos2dx_MenuItemAtlasFont_initWithString);
		tolua_function(tolua_S,"new",lua_cocos2dx_MenuItemAtlasFont_constructor);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_MenuItemFont_setFontNameObj(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MenuItemFont* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MenuItemFont",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MenuItemFont*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MenuItemFont_setFontNameObj'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		const char* arg0;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		if(!ok)
			return 0;
		cobj->setFontNameObj(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MenuItemFont_setFontNameObj'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MenuItemFont_getFontSizeObj(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MenuItemFont* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MenuItemFont",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MenuItemFont*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MenuItemFont_getFontSizeObj'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		unsigned int ret = cobj->getFontSizeObj();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MenuItemFont_getFontSizeObj'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MenuItemFont_initWithString(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MenuItemFont* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MenuItemFont",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MenuItemFont*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MenuItemFont_initWithString'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		const char* arg0;
		cocos2d::ccMenuCallback arg1;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		do {
		/*	std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, JS_THIS_OBJECT(cx, vp), argv[1]));
			auto lambda = [=](Object* larg0) -> void {
				jsval largv[1];
				tolua_pushusertype(tolua_S,larg0,"Object*");
				jsval rval;
				JSBool ok = func->invoke(1, &largv[0], rval);
				if (!ok && JS_IsExceptionPending(cx)) {
					JS_ReportPendingException(cx);
				}
			};
			arg1 = lambda;
			*/
		} while(0)
		;
		if(!ok)
			return 0;
		bool ret = cobj->initWithString(arg0, arg1);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MenuItemFont_initWithString'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MenuItemFont_setFontSizeObj(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MenuItemFont* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MenuItemFont",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MenuItemFont*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MenuItemFont_setFontSizeObj'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		unsigned int arg0;
		ok &= luaval_to_uint32(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setFontSizeObj(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MenuItemFont_setFontSizeObj'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MenuItemFont_getFontNameObj(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MenuItemFont* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MenuItemFont",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MenuItemFont*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MenuItemFont_getFontNameObj'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		const char* ret = cobj->getFontNameObj();
		tolua_pushstring(tolua_S,(const char*)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MenuItemFont_getFontNameObj'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MenuItemFont_setFontName(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"MenuItemFont",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 1) {
		const char* arg0;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		if(!ok)
			return 0;
		cocos2d::MenuItemFont::setFontName(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MenuItemFont_setFontName'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_MenuItemFont_getFontSize(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"MenuItemFont",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 0) {
		if(!ok)
			return 0;
		unsigned int ret = cocos2d::MenuItemFont::getFontSize();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MenuItemFont_getFontSize'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_MenuItemFont_getFontName(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"MenuItemFont",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 0) {
		if(!ok)
			return 0;
		const char* ret = cocos2d::MenuItemFont::getFontName();
		tolua_pushstring(tolua_S,(const char*)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MenuItemFont_getFontName'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_MenuItemFont_setFontSize(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"MenuItemFont",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 1) {
		unsigned int arg0;
		ok &= luaval_to_uint32(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cocos2d::MenuItemFont::setFontSize(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MenuItemFont_setFontSize'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_MenuItemFont_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MenuItemFont* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::MenuItemFont();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"MenuItemFont");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MenuItemFont_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_MenuItemFont_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (MenuItemFont)");
	return 0;
}

int lua_register_cocos2dx_MenuItemFont(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"MenuItemFont");
	tolua_cclass(tolua_S,"MenuItemFont","MenuItemFont","MenuItemLabel",NULL);

	tolua_beginmodule(tolua_S,"MenuItemFont");
		tolua_function(tolua_S,"setFontName",lua_cocos2dx_MenuItemFont_setFontNameObj);
		tolua_function(tolua_S,"getFontSize",lua_cocos2dx_MenuItemFont_getFontSizeObj);
		tolua_function(tolua_S,"initWithString",lua_cocos2dx_MenuItemFont_initWithString);
		tolua_function(tolua_S,"setFontSize",lua_cocos2dx_MenuItemFont_setFontSizeObj);
		tolua_function(tolua_S,"getFontName",lua_cocos2dx_MenuItemFont_getFontNameObj);
		tolua_function(tolua_S,"new",lua_cocos2dx_MenuItemFont_constructor);
		tolua_function(tolua_S,"setFontName", lua_cocos2dx_MenuItemFont_setFontName);
		tolua_function(tolua_S,"getFontSize", lua_cocos2dx_MenuItemFont_getFontSize);
		tolua_function(tolua_S,"getFontName", lua_cocos2dx_MenuItemFont_getFontName);
		tolua_function(tolua_S,"setFontSize", lua_cocos2dx_MenuItemFont_setFontSize);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_MenuItemSprite_setEnabled(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MenuItemSprite* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MenuItemSprite",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MenuItemSprite*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MenuItemSprite_setEnabled'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setEnabled(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MenuItemSprite_setEnabled'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MenuItemSprite_selected(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MenuItemSprite* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MenuItemSprite",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MenuItemSprite*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MenuItemSprite_selected'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->selected();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MenuItemSprite_selected'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MenuItemSprite_setNormalImage(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MenuItemSprite* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MenuItemSprite",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MenuItemSprite*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MenuItemSprite_setNormalImage'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Node* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->setNormalImage(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MenuItemSprite_setNormalImage'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MenuItemSprite_setDisabledImage(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MenuItemSprite* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MenuItemSprite",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MenuItemSprite*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MenuItemSprite_setDisabledImage'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Node* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->setDisabledImage(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MenuItemSprite_setDisabledImage'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MenuItemSprite_initWithNormalSprite(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MenuItemSprite* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MenuItemSprite",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MenuItemSprite*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MenuItemSprite_initWithNormalSprite'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 4) {
		cocos2d::Node* arg0;
		cocos2d::Node* arg1;
		cocos2d::Node* arg2;
		cocos2d::ccMenuCallback arg3;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Node*)tolua_tousertype(tolua_S,3,0);
		};
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,4,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg2 = (cocos2d::Node*)tolua_tousertype(tolua_S,4,0);
		};
		do {
		/*	std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, JS_THIS_OBJECT(cx, vp), argv[3]));
			auto lambda = [=](Object* larg0) -> void {
				jsval largv[1];
				tolua_pushusertype(tolua_S,larg0,"Object*");
				jsval rval;
				JSBool ok = func->invoke(1, &largv[0], rval);
				if (!ok && JS_IsExceptionPending(cx)) {
					JS_ReportPendingException(cx);
				}
			};
			arg3 = lambda;
			*/
		} while(0)
		;
		if(!ok)
			return 0;
		bool ret = cobj->initWithNormalSprite(arg0, arg1, arg2, arg3);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 4);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MenuItemSprite_initWithNormalSprite'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MenuItemSprite_setSelectedImage(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MenuItemSprite* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MenuItemSprite",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MenuItemSprite*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MenuItemSprite_setSelectedImage'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Node* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->setSelectedImage(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MenuItemSprite_setSelectedImage'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MenuItemSprite_getDisabledImage(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MenuItemSprite* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MenuItemSprite",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MenuItemSprite*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MenuItemSprite_getDisabledImage'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Node* ret = cobj->getDisabledImage();
		tolua_pushusertype(tolua_S,ret,"Node");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MenuItemSprite_getDisabledImage'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MenuItemSprite_getSelectedImage(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MenuItemSprite* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MenuItemSprite",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MenuItemSprite*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MenuItemSprite_getSelectedImage'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Node* ret = cobj->getSelectedImage();
		tolua_pushusertype(tolua_S,ret,"Node");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MenuItemSprite_getSelectedImage'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MenuItemSprite_getNormalImage(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MenuItemSprite* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MenuItemSprite",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MenuItemSprite*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MenuItemSprite_getNormalImage'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Node* ret = cobj->getNormalImage();
		tolua_pushusertype(tolua_S,ret,"Node");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MenuItemSprite_getNormalImage'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MenuItemSprite_unselected(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MenuItemSprite* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MenuItemSprite",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MenuItemSprite*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MenuItemSprite_unselected'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->unselected();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MenuItemSprite_unselected'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MenuItemSprite_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MenuItemSprite* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::MenuItemSprite();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"MenuItemSprite");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MenuItemSprite_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_MenuItemSprite_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (MenuItemSprite)");
	return 0;
}

int lua_register_cocos2dx_MenuItemSprite(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"MenuItemSprite");
	tolua_cclass(tolua_S,"MenuItemSprite","MenuItemSprite","MenuItem",NULL);

	tolua_beginmodule(tolua_S,"MenuItemSprite");
		tolua_function(tolua_S,"setEnabled",lua_cocos2dx_MenuItemSprite_setEnabled);
		tolua_function(tolua_S,"selected",lua_cocos2dx_MenuItemSprite_selected);
		tolua_function(tolua_S,"setNormalImage",lua_cocos2dx_MenuItemSprite_setNormalImage);
		tolua_function(tolua_S,"setDisabledImage",lua_cocos2dx_MenuItemSprite_setDisabledImage);
		tolua_function(tolua_S,"initWithNormalSprite",lua_cocos2dx_MenuItemSprite_initWithNormalSprite);
		tolua_function(tolua_S,"setSelectedImage",lua_cocos2dx_MenuItemSprite_setSelectedImage);
		tolua_function(tolua_S,"getDisabledImage",lua_cocos2dx_MenuItemSprite_getDisabledImage);
		tolua_function(tolua_S,"getSelectedImage",lua_cocos2dx_MenuItemSprite_getSelectedImage);
		tolua_function(tolua_S,"getNormalImage",lua_cocos2dx_MenuItemSprite_getNormalImage);
		tolua_function(tolua_S,"unselected",lua_cocos2dx_MenuItemSprite_unselected);
		tolua_function(tolua_S,"new",lua_cocos2dx_MenuItemSprite_constructor);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_MenuItemImage_setDisabledSpriteFrame(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MenuItemImage* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MenuItemImage",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MenuItemImage*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MenuItemImage_setDisabledSpriteFrame'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::SpriteFrame* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"SpriteFrame",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::SpriteFrame*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->setDisabledSpriteFrame(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MenuItemImage_setDisabledSpriteFrame'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MenuItemImage_setSelectedSpriteFrame(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MenuItemImage* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MenuItemImage",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MenuItemImage*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MenuItemImage_setSelectedSpriteFrame'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::SpriteFrame* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"SpriteFrame",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::SpriteFrame*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->setSelectedSpriteFrame(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MenuItemImage_setSelectedSpriteFrame'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MenuItemImage_setNormalSpriteFrame(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MenuItemImage* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MenuItemImage",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MenuItemImage*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MenuItemImage_setNormalSpriteFrame'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::SpriteFrame* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"SpriteFrame",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::SpriteFrame*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->setNormalSpriteFrame(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MenuItemImage_setNormalSpriteFrame'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MenuItemImage_init(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MenuItemImage* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MenuItemImage",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MenuItemImage*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MenuItemImage_init'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->init();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MenuItemImage_init'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MenuItemImage_initWithNormalImage(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MenuItemImage* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MenuItemImage",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MenuItemImage*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MenuItemImage_initWithNormalImage'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 4) {
		const char* arg0;
		const char* arg1;
		const char* arg2;
		cocos2d::ccMenuCallback arg3;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp); arg1 = arg1_tmp.c_str();
		std::string arg2_tmp; ok &= luaval_to_std_string(tolua_S, 4, &arg2_tmp); arg2 = arg2_tmp.c_str();
		do {
		/*	std::shared_ptr<JSFunctionWrapper> func(new JSFunctionWrapper(cx, JS_THIS_OBJECT(cx, vp), argv[3]));
			auto lambda = [=](Object* larg0) -> void {
				jsval largv[1];
				tolua_pushusertype(tolua_S,larg0,"Object*");
				jsval rval;
				JSBool ok = func->invoke(1, &largv[0], rval);
				if (!ok && JS_IsExceptionPending(cx)) {
					JS_ReportPendingException(cx);
				}
			};
			arg3 = lambda;
			*/
		} while(0)
		;
		if(!ok)
			return 0;
		bool ret = cobj->initWithNormalImage(arg0, arg1, arg2, arg3);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 4);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MenuItemImage_initWithNormalImage'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MenuItemImage_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MenuItemImage* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::MenuItemImage();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"MenuItemImage");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MenuItemImage_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_MenuItemImage_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (MenuItemImage)");
	return 0;
}

int lua_register_cocos2dx_MenuItemImage(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"MenuItemImage");
	tolua_cclass(tolua_S,"MenuItemImage","MenuItemImage","MenuItemSprite",NULL);

	tolua_beginmodule(tolua_S,"MenuItemImage");
		tolua_function(tolua_S,"setDisabledSpriteFrame",lua_cocos2dx_MenuItemImage_setDisabledSpriteFrame);
		tolua_function(tolua_S,"setSelectedSpriteFrame",lua_cocos2dx_MenuItemImage_setSelectedSpriteFrame);
		tolua_function(tolua_S,"setNormalSpriteFrame",lua_cocos2dx_MenuItemImage_setNormalSpriteFrame);
		tolua_function(tolua_S,"init",lua_cocos2dx_MenuItemImage_init);
		tolua_function(tolua_S,"initWithNormalImage",lua_cocos2dx_MenuItemImage_initWithNormalImage);
		tolua_function(tolua_S,"new",lua_cocos2dx_MenuItemImage_constructor);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_MenuItemToggle_setSubItems(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MenuItemToggle* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MenuItemToggle",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MenuItemToggle*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MenuItemToggle_setSubItems'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Array* arg0;
		ok &= luaval_to_array(tolua_S,  2, &arg0);
		if(!ok)
			return 0;
		cobj->setSubItems(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MenuItemToggle_setSubItems'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MenuItemToggle_initWithItem(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MenuItemToggle* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MenuItemToggle",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MenuItemToggle*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MenuItemToggle_initWithItem'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::MenuItem* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"MenuItem",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::MenuItem*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		bool ret = cobj->initWithItem(arg0);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MenuItemToggle_initWithItem'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MenuItemToggle_setSelectedIndex(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MenuItemToggle* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MenuItemToggle",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MenuItemToggle*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MenuItemToggle_setSelectedIndex'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		unsigned int arg0;
		ok &= luaval_to_uint32(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setSelectedIndex(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MenuItemToggle_setSelectedIndex'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MenuItemToggle_setEnabled(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MenuItemToggle* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MenuItemToggle",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MenuItemToggle*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MenuItemToggle_setEnabled'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setEnabled(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MenuItemToggle_setEnabled'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MenuItemToggle_getSelectedIndex(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MenuItemToggle* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MenuItemToggle",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MenuItemToggle*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MenuItemToggle_getSelectedIndex'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		unsigned int ret = cobj->getSelectedIndex();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MenuItemToggle_getSelectedIndex'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MenuItemToggle_addSubItem(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MenuItemToggle* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MenuItemToggle",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MenuItemToggle*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MenuItemToggle_addSubItem'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::MenuItem* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"MenuItem",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::MenuItem*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->addSubItem(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MenuItemToggle_addSubItem'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MenuItemToggle_activate(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MenuItemToggle* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MenuItemToggle",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MenuItemToggle*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MenuItemToggle_activate'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->activate();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MenuItemToggle_activate'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MenuItemToggle_selected(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MenuItemToggle* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MenuItemToggle",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MenuItemToggle*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MenuItemToggle_selected'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->selected();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MenuItemToggle_selected'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MenuItemToggle_unselected(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MenuItemToggle* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MenuItemToggle",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MenuItemToggle*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MenuItemToggle_unselected'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->unselected();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MenuItemToggle_unselected'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MenuItemToggle_getSelectedItem(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MenuItemToggle* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MenuItemToggle",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MenuItemToggle*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MenuItemToggle_getSelectedItem'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::MenuItem* ret = cobj->getSelectedItem();
		tolua_pushusertype(tolua_S,ret,"MenuItem");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MenuItemToggle_getSelectedItem'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MenuItemToggle_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MenuItemToggle* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::MenuItemToggle();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"MenuItemToggle");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MenuItemToggle_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_MenuItemToggle_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (MenuItemToggle)");
	return 0;
}

int lua_register_cocos2dx_MenuItemToggle(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"MenuItemToggle");
	tolua_cclass(tolua_S,"MenuItemToggle","MenuItemToggle","MenuItem",NULL);

	tolua_beginmodule(tolua_S,"MenuItemToggle");
		tolua_function(tolua_S,"setSubItems",lua_cocos2dx_MenuItemToggle_setSubItems);
		tolua_function(tolua_S,"initWithItem",lua_cocos2dx_MenuItemToggle_initWithItem);
		tolua_function(tolua_S,"setSelectedIndex",lua_cocos2dx_MenuItemToggle_setSelectedIndex);
		tolua_function(tolua_S,"setEnabled",lua_cocos2dx_MenuItemToggle_setEnabled);
		tolua_function(tolua_S,"getSelectedIndex",lua_cocos2dx_MenuItemToggle_getSelectedIndex);
		tolua_function(tolua_S,"addSubItem",lua_cocos2dx_MenuItemToggle_addSubItem);
		tolua_function(tolua_S,"activate",lua_cocos2dx_MenuItemToggle_activate);
		tolua_function(tolua_S,"selected",lua_cocos2dx_MenuItemToggle_selected);
		tolua_function(tolua_S,"unselected",lua_cocos2dx_MenuItemToggle_unselected);
		tolua_function(tolua_S,"getSelectedItem",lua_cocos2dx_MenuItemToggle_getSelectedItem);
		tolua_function(tolua_S,"new",lua_cocos2dx_MenuItemToggle_constructor);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_Menu_initWithArray(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Menu* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Menu",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Menu*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Menu_initWithArray'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Array* arg0;
		ok &= luaval_to_array(tolua_S,  2, &arg0);
		if(!ok)
			return 0;
		bool ret = cobj->initWithArray(arg0);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Menu_initWithArray'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Menu_addChild(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Menu* cobj = NULL;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Menu",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Menu*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Menu_addChild'", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	do{
		if (argc == 2) {
			cocos2d::Node* arg0;
			#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};

			if (!ok) { ok = true; break; }
			int arg1;
			ok &= luaval_to_int32(tolua_S, 3,(int*)&arg1);

			if (!ok) { ok = true; break; }
		cobj->addChild(arg0, arg1);
		return 0;
		}
	}while(0);
	do{
		if (argc == 1) {
			cocos2d::Node* arg0;
			#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};

			if (!ok) { ok = true; break; }
		cobj->addChild(arg0);
		return 0;
		}
	}while(0);
	do{
		if (argc == 3) {
			cocos2d::Node* arg0;
			#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};

			if (!ok) { ok = true; break; }
			int arg1;
			ok &= luaval_to_int32(tolua_S, 3,(int*)&arg1);

			if (!ok) { ok = true; break; }
			int arg2;
			ok &= luaval_to_int32(tolua_S, 4,(int*)&arg2);

			if (!ok) { ok = true; break; }
		cobj->addChild(arg0, arg1, arg2);
		return 0;
		}
	}while(0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 3);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Menu_addChild'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Menu_alignItemsVertically(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Menu* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Menu",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Menu*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Menu_alignItemsVertically'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->alignItemsVertically();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Menu_alignItemsVertically'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Menu_ccTouchBegan(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Menu* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Menu",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Menu*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Menu_ccTouchBegan'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		cocos2d::Touch* arg0;
		cocos2d::Event* arg1;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Touch",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Touch*)tolua_tousertype(tolua_S,2,0);
		};
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Event",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Event*)tolua_tousertype(tolua_S,3,0);
		};
		if(!ok)
			return 0;
		bool ret = cobj->ccTouchBegan(arg0, arg1);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Menu_ccTouchBegan'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Menu_ccTouchEnded(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Menu* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Menu",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Menu*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Menu_ccTouchEnded'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		cocos2d::Touch* arg0;
		cocos2d::Event* arg1;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Touch",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Touch*)tolua_tousertype(tolua_S,2,0);
		};
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Event",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Event*)tolua_tousertype(tolua_S,3,0);
		};
		if(!ok)
			return 0;
		cobj->ccTouchEnded(arg0, arg1);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Menu_ccTouchEnded'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Menu_isOpacityModifyRGB(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Menu* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Menu",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Menu*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Menu_isOpacityModifyRGB'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->isOpacityModifyRGB();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Menu_isOpacityModifyRGB'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Menu_isEnabled(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Menu* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Menu",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Menu*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Menu_isEnabled'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->isEnabled();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Menu_isEnabled'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Menu_setOpacityModifyRGB(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Menu* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Menu",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Menu*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Menu_setOpacityModifyRGB'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setOpacityModifyRGB(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Menu_setOpacityModifyRGB'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Menu_setHandlerPriority(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Menu* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Menu",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Menu*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Menu_setHandlerPriority'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		int arg0;
		ok &= luaval_to_int32(tolua_S, 2,(int*)&arg0);
		if(!ok)
			return 0;
		cobj->setHandlerPriority(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Menu_setHandlerPriority'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Menu_init(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Menu* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Menu",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Menu*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Menu_init'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->init();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Menu_init'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Menu_alignItemsHorizontallyWithPadding(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Menu* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Menu",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Menu*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Menu_alignItemsHorizontallyWithPadding'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->alignItemsHorizontallyWithPadding(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Menu_alignItemsHorizontallyWithPadding'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Menu_alignItemsHorizontally(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Menu* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Menu",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Menu*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Menu_alignItemsHorizontally'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->alignItemsHorizontally();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Menu_alignItemsHorizontally'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Menu_setEnabled(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Menu* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Menu",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Menu*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Menu_setEnabled'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setEnabled(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Menu_setEnabled'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Menu_ccTouchMoved(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Menu* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Menu",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Menu*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Menu_ccTouchMoved'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		cocos2d::Touch* arg0;
		cocos2d::Event* arg1;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Touch",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Touch*)tolua_tousertype(tolua_S,2,0);
		};
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Event",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Event*)tolua_tousertype(tolua_S,3,0);
		};
		if(!ok)
			return 0;
		cobj->ccTouchMoved(arg0, arg1);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Menu_ccTouchMoved'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Menu_ccTouchCancelled(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Menu* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Menu",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Menu*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Menu_ccTouchCancelled'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		cocos2d::Touch* arg0;
		cocos2d::Event* arg1;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Touch",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Touch*)tolua_tousertype(tolua_S,2,0);
		};
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Event",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Event*)tolua_tousertype(tolua_S,3,0);
		};
		if(!ok)
			return 0;
		cobj->ccTouchCancelled(arg0, arg1);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Menu_ccTouchCancelled'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Menu_removeChild(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Menu* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Menu",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Menu*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Menu_removeChild'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		cocos2d::Node* arg0;
		bool arg1;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		ok &= luaval_to_boolean(tolua_S, 3,&arg1);
		if(!ok)
			return 0;
		cobj->removeChild(arg0, arg1);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Menu_removeChild'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Menu_alignItemsVerticallyWithPadding(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Menu* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Menu",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Menu*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Menu_alignItemsVerticallyWithPadding'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->alignItemsVerticallyWithPadding(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Menu_alignItemsVerticallyWithPadding'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Menu_registerWithTouchDispatcher(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Menu* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Menu",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Menu*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Menu_registerWithTouchDispatcher'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->registerWithTouchDispatcher();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Menu_registerWithTouchDispatcher'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Menu_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Menu* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::Menu();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"Menu");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Menu_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_Menu_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (Menu)");
	return 0;
}

int lua_register_cocos2dx_Menu(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"Menu");
	tolua_cclass(tolua_S,"Menu","Menu","LayerRGBA",NULL);

	tolua_beginmodule(tolua_S,"Menu");
		tolua_function(tolua_S,"initWithArray",lua_cocos2dx_Menu_initWithArray);
		tolua_function(tolua_S,"addChild",lua_cocos2dx_Menu_addChild);
		tolua_function(tolua_S,"alignItemsVertically",lua_cocos2dx_Menu_alignItemsVertically);
		tolua_function(tolua_S,"ccTouchBegan",lua_cocos2dx_Menu_ccTouchBegan);
		tolua_function(tolua_S,"ccTouchEnded",lua_cocos2dx_Menu_ccTouchEnded);
		tolua_function(tolua_S,"isOpacityModifyRGB",lua_cocos2dx_Menu_isOpacityModifyRGB);
		tolua_function(tolua_S,"isEnabled",lua_cocos2dx_Menu_isEnabled);
		tolua_function(tolua_S,"setOpacityModifyRGB",lua_cocos2dx_Menu_setOpacityModifyRGB);
		tolua_function(tolua_S,"setHandlerPriority",lua_cocos2dx_Menu_setHandlerPriority);
		tolua_function(tolua_S,"init",lua_cocos2dx_Menu_init);
		tolua_function(tolua_S,"alignItemsHorizontallyWithPadding",lua_cocos2dx_Menu_alignItemsHorizontallyWithPadding);
		tolua_function(tolua_S,"alignItemsHorizontally",lua_cocos2dx_Menu_alignItemsHorizontally);
		tolua_function(tolua_S,"setEnabled",lua_cocos2dx_Menu_setEnabled);
		tolua_function(tolua_S,"ccTouchMoved",lua_cocos2dx_Menu_ccTouchMoved);
		tolua_function(tolua_S,"ccTouchCancelled",lua_cocos2dx_Menu_ccTouchCancelled);
		tolua_function(tolua_S,"removeChild",lua_cocos2dx_Menu_removeChild);
		tolua_function(tolua_S,"alignItemsVerticallyWithPadding",lua_cocos2dx_Menu_alignItemsVerticallyWithPadding);
		tolua_function(tolua_S,"registerWithTouchDispatcher",lua_cocos2dx_Menu_registerWithTouchDispatcher);
		tolua_function(tolua_S,"new",lua_cocos2dx_Menu_constructor);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_ClippingNode_isInverted(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ClippingNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ClippingNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ClippingNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ClippingNode_isInverted'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->isInverted();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ClippingNode_isInverted'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ClippingNode_visit(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ClippingNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ClippingNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ClippingNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ClippingNode_visit'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->visit();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ClippingNode_visit'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ClippingNode_setInverted(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ClippingNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ClippingNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ClippingNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ClippingNode_setInverted'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setInverted(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ClippingNode_setInverted'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ClippingNode_setStencil(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ClippingNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ClippingNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ClippingNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ClippingNode_setStencil'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Node* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->setStencil(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ClippingNode_setStencil'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ClippingNode_getAlphaThreshold(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ClippingNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ClippingNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ClippingNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ClippingNode_getAlphaThreshold'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getAlphaThreshold();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ClippingNode_getAlphaThreshold'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ClippingNode_init(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ClippingNode* cobj = NULL;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ClippingNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ClippingNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ClippingNode_init'", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	do{
		if (argc == 1) {
			cocos2d::Node* arg0;
			#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};

			if (!ok) { ok = true; break; }
		bool ret = cobj->init(arg0);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
		}
	}while(0);
	do{
		if (argc == 0) {
		bool ret = cobj->init();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
		}
	}while(0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ClippingNode_init'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ClippingNode_getStencil(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ClippingNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ClippingNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ClippingNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ClippingNode_getStencil'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Node* ret = cobj->getStencil();
		tolua_pushusertype(tolua_S,ret,"Node");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ClippingNode_getStencil'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ClippingNode_setAlphaThreshold(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ClippingNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ClippingNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ClippingNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ClippingNode_setAlphaThreshold'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setAlphaThreshold(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ClippingNode_setAlphaThreshold'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ClippingNode_create(lua_State* tolua_S)
{
	int argc = 0;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"ClippingNode",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S)-1;

	do {
		if (argc == 1) {
			cocos2d::Node* arg0;
			#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
			if (!ok) { ok = true; break; }
			cocos2d::ClippingNode* ret = cocos2d::ClippingNode::create(arg0);
			tolua_pushusertype(tolua_S,ret,"ClippingNode");
			return 1;
		}
	} while (0);
	do {
		if (argc == 0) {
			cocos2d::ClippingNode* ret = cocos2d::ClippingNode::create();
			tolua_pushusertype(tolua_S,ret,"ClippingNode");
			return 1;
		}
	} while (0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ClippingNode_create'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ClippingNode_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (ClippingNode)");
	return 0;
}

int lua_register_cocos2dx_ClippingNode(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"ClippingNode");
	tolua_cclass(tolua_S,"ClippingNode","ClippingNode","Node",NULL);

	tolua_beginmodule(tolua_S,"ClippingNode");
		tolua_function(tolua_S,"isInverted",lua_cocos2dx_ClippingNode_isInverted);
		tolua_function(tolua_S,"visit",lua_cocos2dx_ClippingNode_visit);
		tolua_function(tolua_S,"setInverted",lua_cocos2dx_ClippingNode_setInverted);
		tolua_function(tolua_S,"setStencil",lua_cocos2dx_ClippingNode_setStencil);
		tolua_function(tolua_S,"getAlphaThreshold",lua_cocos2dx_ClippingNode_getAlphaThreshold);
		tolua_function(tolua_S,"init",lua_cocos2dx_ClippingNode_init);
		tolua_function(tolua_S,"getStencil",lua_cocos2dx_ClippingNode_getStencil);
		tolua_function(tolua_S,"setAlphaThreshold",lua_cocos2dx_ClippingNode_setAlphaThreshold);
		tolua_function(tolua_S,"create", lua_cocos2dx_ClippingNode_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_MotionStreak_reset(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MotionStreak* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MotionStreak",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MotionStreak*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MotionStreak_reset'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->reset();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MotionStreak_reset'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MotionStreak_getOpacity(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MotionStreak* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MotionStreak",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MotionStreak*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MotionStreak_getOpacity'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		unsigned char ret = cobj->getOpacity();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MotionStreak_getOpacity'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MotionStreak_setTexture(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MotionStreak* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MotionStreak",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MotionStreak*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MotionStreak_setTexture'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Texture2D* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Texture2D",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Texture2D*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->setTexture(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MotionStreak_setTexture'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MotionStreak_isOpacityModifyRGB(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MotionStreak* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MotionStreak",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MotionStreak*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MotionStreak_isOpacityModifyRGB'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->isOpacityModifyRGB();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MotionStreak_isOpacityModifyRGB'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MotionStreak_setOpacity(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MotionStreak* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MotionStreak",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MotionStreak*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MotionStreak_setOpacity'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		uint16_t arg0;
		ok &= luaval_to_uint16(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setOpacity(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MotionStreak_setOpacity'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MotionStreak_getTexture(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MotionStreak* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MotionStreak",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MotionStreak*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MotionStreak_getTexture'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Texture2D* ret = cobj->getTexture();
		tolua_pushusertype(tolua_S,ret,"Texture2D");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MotionStreak_getTexture'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MotionStreak_tintWithColor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MotionStreak* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MotionStreak",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MotionStreak*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MotionStreak_tintWithColor'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Color3B arg0;
		ok &= luaval_to_color3b(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->tintWithColor(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MotionStreak_tintWithColor'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MotionStreak_setStartingPositionInitialized(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MotionStreak* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MotionStreak",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MotionStreak*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MotionStreak_setStartingPositionInitialized'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setStartingPositionInitialized(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MotionStreak_setStartingPositionInitialized'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MotionStreak_initWithFade(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MotionStreak* cobj = NULL;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MotionStreak",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MotionStreak*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MotionStreak_initWithFade'", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	do{
		if (argc == 5) {
			double arg0;
			ok &= luaval_to_number(tolua_S, 2,&arg0);

			if (!ok) { ok = true; break; }
			double arg1;
			ok &= luaval_to_number(tolua_S, 3,&arg1);

			if (!ok) { ok = true; break; }
			double arg2;
			ok &= luaval_to_number(tolua_S, 4,&arg2);

			if (!ok) { ok = true; break; }
			cocos2d::Color3B arg3;
			ok &= luaval_to_color3b(tolua_S, 5, &arg3);

			if (!ok) { ok = true; break; }
			cocos2d::Texture2D* arg4;
			#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,6,"Texture2D",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg4 = (cocos2d::Texture2D*)tolua_tousertype(tolua_S,6,0);
		};

			if (!ok) { ok = true; break; }
		bool ret = cobj->initWithFade(arg0, arg1, arg2, arg3, arg4);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
		}
	}while(0);
	do{
		if (argc == 5) {
			double arg0;
			ok &= luaval_to_number(tolua_S, 2,&arg0);

			if (!ok) { ok = true; break; }
			double arg1;
			ok &= luaval_to_number(tolua_S, 3,&arg1);

			if (!ok) { ok = true; break; }
			double arg2;
			ok &= luaval_to_number(tolua_S, 4,&arg2);

			if (!ok) { ok = true; break; }
			cocos2d::Color3B arg3;
			ok &= luaval_to_color3b(tolua_S, 5, &arg3);

			if (!ok) { ok = true; break; }
			const char* arg4;
			std::string arg4_tmp; ok &= luaval_to_std_string(tolua_S, 6, &arg4_tmp); arg4 = arg4_tmp.c_str();

			if (!ok) { ok = true; break; }
		bool ret = cobj->initWithFade(arg0, arg1, arg2, arg3, arg4);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
		}
	}while(0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 5);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MotionStreak_initWithFade'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MotionStreak_isFastMode(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MotionStreak* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MotionStreak",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MotionStreak*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MotionStreak_isFastMode'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->isFastMode();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MotionStreak_isFastMode'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MotionStreak_setOpacityModifyRGB(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MotionStreak* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MotionStreak",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MotionStreak*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MotionStreak_setOpacityModifyRGB'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setOpacityModifyRGB(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MotionStreak_setOpacityModifyRGB'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MotionStreak_isStartingPositionInitialized(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MotionStreak* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MotionStreak",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MotionStreak*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MotionStreak_isStartingPositionInitialized'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->isStartingPositionInitialized();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MotionStreak_isStartingPositionInitialized'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MotionStreak_setPosition(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MotionStreak* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MotionStreak",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MotionStreak*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MotionStreak_setPosition'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Point arg0;
		ok &= luaval_to_point(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->setPosition(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MotionStreak_setPosition'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MotionStreak_setFastMode(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MotionStreak* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"MotionStreak",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::MotionStreak*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_MotionStreak_setFastMode'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setFastMode(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MotionStreak_setFastMode'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MotionStreak_create(lua_State* tolua_S)
{
	int argc = 0;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"MotionStreak",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S)-1;

	do {
		if (argc == 5) {
			double arg0;
			ok &= luaval_to_number(tolua_S, 2,&arg0);
			if (!ok) { ok = true; break; }
			double arg1;
			ok &= luaval_to_number(tolua_S, 3,&arg1);
			if (!ok) { ok = true; break; }
			double arg2;
			ok &= luaval_to_number(tolua_S, 4,&arg2);
			if (!ok) { ok = true; break; }
			cocos2d::Color3B arg3;
			ok &= luaval_to_color3b(tolua_S, 5, &arg3);
			if (!ok) { ok = true; break; }
			cocos2d::Texture2D* arg4;
			#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,6,"Texture2D",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg4 = (cocos2d::Texture2D*)tolua_tousertype(tolua_S,6,0);
		};
			if (!ok) { ok = true; break; }
			cocos2d::MotionStreak* ret = cocos2d::MotionStreak::create(arg0, arg1, arg2, arg3, arg4);
			tolua_pushusertype(tolua_S,ret,"MotionStreak");
			return 1;
		}
	} while (0);
	do {
		if (argc == 5) {
			double arg0;
			ok &= luaval_to_number(tolua_S, 2,&arg0);
			if (!ok) { ok = true; break; }
			double arg1;
			ok &= luaval_to_number(tolua_S, 3,&arg1);
			if (!ok) { ok = true; break; }
			double arg2;
			ok &= luaval_to_number(tolua_S, 4,&arg2);
			if (!ok) { ok = true; break; }
			cocos2d::Color3B arg3;
			ok &= luaval_to_color3b(tolua_S, 5, &arg3);
			if (!ok) { ok = true; break; }
			const char* arg4;
			std::string arg4_tmp; ok &= luaval_to_std_string(tolua_S, 6, &arg4_tmp); arg4 = arg4_tmp.c_str();
			if (!ok) { ok = true; break; }
			cocos2d::MotionStreak* ret = cocos2d::MotionStreak::create(arg0, arg1, arg2, arg3, arg4);
			tolua_pushusertype(tolua_S,ret,"MotionStreak");
			return 1;
		}
	} while (0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 5);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MotionStreak_create'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_MotionStreak_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::MotionStreak* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::MotionStreak();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"MotionStreak");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_MotionStreak_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_MotionStreak_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (MotionStreak)");
	return 0;
}

int lua_register_cocos2dx_MotionStreak(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"MotionStreak");
	tolua_cclass(tolua_S,"MotionStreak","MotionStreak","NodeRGBA",NULL);

	tolua_beginmodule(tolua_S,"MotionStreak");
		tolua_function(tolua_S,"reset",lua_cocos2dx_MotionStreak_reset);
		tolua_function(tolua_S,"getOpacity",lua_cocos2dx_MotionStreak_getOpacity);
		tolua_function(tolua_S,"setTexture",lua_cocos2dx_MotionStreak_setTexture);
		tolua_function(tolua_S,"isOpacityModifyRGB",lua_cocos2dx_MotionStreak_isOpacityModifyRGB);
		tolua_function(tolua_S,"setOpacity",lua_cocos2dx_MotionStreak_setOpacity);
		tolua_function(tolua_S,"getTexture",lua_cocos2dx_MotionStreak_getTexture);
		tolua_function(tolua_S,"tintWithColor",lua_cocos2dx_MotionStreak_tintWithColor);
		tolua_function(tolua_S,"setStartingPositionInitialized",lua_cocos2dx_MotionStreak_setStartingPositionInitialized);
		tolua_function(tolua_S,"initWithFade",lua_cocos2dx_MotionStreak_initWithFade);
		tolua_function(tolua_S,"isFastMode",lua_cocos2dx_MotionStreak_isFastMode);
		tolua_function(tolua_S,"setOpacityModifyRGB",lua_cocos2dx_MotionStreak_setOpacityModifyRGB);
		tolua_function(tolua_S,"isStartingPositionInitialized",lua_cocos2dx_MotionStreak_isStartingPositionInitialized);
		tolua_function(tolua_S,"setPosition",lua_cocos2dx_MotionStreak_setPosition);
		tolua_function(tolua_S,"setFastMode",lua_cocos2dx_MotionStreak_setFastMode);
		tolua_function(tolua_S,"new",lua_cocos2dx_MotionStreak_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_MotionStreak_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_ProgressTimer_setAnchorPoint(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ProgressTimer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ProgressTimer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ProgressTimer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ProgressTimer_setAnchorPoint'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Point arg0;
		ok &= luaval_to_point(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->setAnchorPoint(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ProgressTimer_setAnchorPoint'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ProgressTimer_draw(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ProgressTimer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ProgressTimer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ProgressTimer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ProgressTimer_draw'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->draw();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ProgressTimer_draw'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ProgressTimer_isReverseDirection(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ProgressTimer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ProgressTimer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ProgressTimer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ProgressTimer_isReverseDirection'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->isReverseDirection();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ProgressTimer_isReverseDirection'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ProgressTimer_setBarChangeRate(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ProgressTimer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ProgressTimer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ProgressTimer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ProgressTimer_setBarChangeRate'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Point arg0;
		ok &= luaval_to_point(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->setBarChangeRate(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ProgressTimer_setBarChangeRate'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ProgressTimer_getPercentage(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ProgressTimer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ProgressTimer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ProgressTimer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ProgressTimer_getPercentage'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getPercentage();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ProgressTimer_getPercentage'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ProgressTimer_setSprite(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ProgressTimer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ProgressTimer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ProgressTimer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ProgressTimer_setSprite'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Sprite* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Sprite",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Sprite*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->setSprite(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ProgressTimer_setSprite'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ProgressTimer_getType(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ProgressTimer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ProgressTimer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ProgressTimer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ProgressTimer_getType'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		int ret = (int)cobj->getType();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ProgressTimer_getType'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ProgressTimer_getOpacity(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ProgressTimer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ProgressTimer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ProgressTimer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ProgressTimer_getOpacity'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		unsigned char ret = cobj->getOpacity();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ProgressTimer_getOpacity'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ProgressTimer_setOpacity(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ProgressTimer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ProgressTimer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ProgressTimer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ProgressTimer_setOpacity'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		uint16_t arg0;
		ok &= luaval_to_uint16(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setOpacity(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ProgressTimer_setOpacity'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ProgressTimer_getSprite(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ProgressTimer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ProgressTimer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ProgressTimer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ProgressTimer_getSprite'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Sprite* ret = cobj->getSprite();
		tolua_pushusertype(tolua_S,ret,"Sprite");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ProgressTimer_getSprite'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ProgressTimer_setMidpoint(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ProgressTimer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ProgressTimer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ProgressTimer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ProgressTimer_setMidpoint'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Point arg0;
		ok &= luaval_to_point(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->setMidpoint(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ProgressTimer_setMidpoint'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ProgressTimer_getMidpoint(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ProgressTimer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ProgressTimer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ProgressTimer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ProgressTimer_getMidpoint'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Point ret = cobj->getMidpoint();
		point_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ProgressTimer_getMidpoint'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ProgressTimer_getColor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ProgressTimer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ProgressTimer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ProgressTimer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ProgressTimer_getColor'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Color3B ret = cobj->getColor();
		color3b_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ProgressTimer_getColor'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ProgressTimer_getBarChangeRate(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ProgressTimer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ProgressTimer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ProgressTimer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ProgressTimer_getBarChangeRate'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Point ret = cobj->getBarChangeRate();
		point_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ProgressTimer_getBarChangeRate'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ProgressTimer_setReverseDirection(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ProgressTimer* cobj = NULL;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ProgressTimer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ProgressTimer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ProgressTimer_setReverseDirection'", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	do{
		if (argc == 1) {
			bool arg0;
			ok &= luaval_to_boolean(tolua_S, 2,&arg0);

			if (!ok) { ok = true; break; }
		cobj->setReverseDirection(arg0);
		return 0;
		}
	}while(0);
	do{
		if (argc == 1) {
			bool arg0;
			ok &= luaval_to_boolean(tolua_S, 2,&arg0);

			if (!ok) { ok = true; break; }
		cobj->setReverseProgress(arg0);
		return 0;
		}
	}while(0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ProgressTimer_setReverseDirection'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ProgressTimer_initWithSprite(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ProgressTimer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ProgressTimer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ProgressTimer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ProgressTimer_initWithSprite'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Sprite* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Sprite",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Sprite*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		bool ret = cobj->initWithSprite(arg0);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ProgressTimer_initWithSprite'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ProgressTimer_setColor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ProgressTimer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ProgressTimer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ProgressTimer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ProgressTimer_setColor'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Color3B arg0;
		ok &= luaval_to_color3b(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->setColor(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ProgressTimer_setColor'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ProgressTimer_setPercentage(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ProgressTimer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ProgressTimer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ProgressTimer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ProgressTimer_setPercentage'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setPercentage(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ProgressTimer_setPercentage'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ProgressTimer_setType(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ProgressTimer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ProgressTimer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ProgressTimer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ProgressTimer_setType'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::ProgressTimer::Type arg0;
		ok &= luaval_to_int32(tolua_S, 2,(int*)&arg0);
		if(!ok)
			return 0;
		cobj->setType(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ProgressTimer_setType'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ProgressTimer_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"ProgressTimer",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 1) {
		cocos2d::Sprite* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Sprite",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Sprite*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cocos2d::ProgressTimer* ret = cocos2d::ProgressTimer::create(arg0);
		tolua_pushusertype(tolua_S,ret,"ProgressTimer");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ProgressTimer_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_ProgressTimer_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ProgressTimer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::ProgressTimer();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"ProgressTimer");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ProgressTimer_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_ProgressTimer_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (ProgressTimer)");
	return 0;
}

int lua_register_cocos2dx_ProgressTimer(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"ProgressTimer");
	tolua_cclass(tolua_S,"ProgressTimer","ProgressTimer","NodeRGBA",NULL);

	tolua_beginmodule(tolua_S,"ProgressTimer");
		tolua_function(tolua_S,"setAnchorPoint",lua_cocos2dx_ProgressTimer_setAnchorPoint);
		tolua_function(tolua_S,"draw",lua_cocos2dx_ProgressTimer_draw);
		tolua_function(tolua_S,"isReverseDirection",lua_cocos2dx_ProgressTimer_isReverseDirection);
		tolua_function(tolua_S,"setBarChangeRate",lua_cocos2dx_ProgressTimer_setBarChangeRate);
		tolua_function(tolua_S,"getPercentage",lua_cocos2dx_ProgressTimer_getPercentage);
		tolua_function(tolua_S,"setSprite",lua_cocos2dx_ProgressTimer_setSprite);
		tolua_function(tolua_S,"getType",lua_cocos2dx_ProgressTimer_getType);
		tolua_function(tolua_S,"getOpacity",lua_cocos2dx_ProgressTimer_getOpacity);
		tolua_function(tolua_S,"setOpacity",lua_cocos2dx_ProgressTimer_setOpacity);
		tolua_function(tolua_S,"getSprite",lua_cocos2dx_ProgressTimer_getSprite);
		tolua_function(tolua_S,"setMidpoint",lua_cocos2dx_ProgressTimer_setMidpoint);
		tolua_function(tolua_S,"getMidpoint",lua_cocos2dx_ProgressTimer_getMidpoint);
		tolua_function(tolua_S,"getColor",lua_cocos2dx_ProgressTimer_getColor);
		tolua_function(tolua_S,"getBarChangeRate",lua_cocos2dx_ProgressTimer_getBarChangeRate);
		tolua_function(tolua_S,"setReverseDirection",lua_cocos2dx_ProgressTimer_setReverseDirection);
		tolua_function(tolua_S,"initWithSprite",lua_cocos2dx_ProgressTimer_initWithSprite);
		tolua_function(tolua_S,"setColor",lua_cocos2dx_ProgressTimer_setColor);
		tolua_function(tolua_S,"setPercentage",lua_cocos2dx_ProgressTimer_setPercentage);
		tolua_function(tolua_S,"setType",lua_cocos2dx_ProgressTimer_setType);
		tolua_function(tolua_S,"new",lua_cocos2dx_ProgressTimer_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_ProgressTimer_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_RenderTexture_clearStencil(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::RenderTexture* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"RenderTexture",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::RenderTexture*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_RenderTexture_clearStencil'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		int arg0;
		ok &= luaval_to_int32(tolua_S, 2,(int*)&arg0);
		if(!ok)
			return 0;
		cobj->clearStencil(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_RenderTexture_clearStencil'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_RenderTexture_draw(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::RenderTexture* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"RenderTexture",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::RenderTexture*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_RenderTexture_draw'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->draw();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_RenderTexture_draw'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_RenderTexture_listenToForeground(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::RenderTexture* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"RenderTexture",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::RenderTexture*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_RenderTexture_listenToForeground'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Object* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Object",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Object*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->listenToForeground(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_RenderTexture_listenToForeground'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_RenderTexture_getClearDepth(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::RenderTexture* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"RenderTexture",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::RenderTexture*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_RenderTexture_getClearDepth'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getClearDepth();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_RenderTexture_getClearDepth'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_RenderTexture_getClearStencil(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::RenderTexture* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"RenderTexture",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::RenderTexture*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_RenderTexture_getClearStencil'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		int ret = cobj->getClearStencil();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_RenderTexture_getClearStencil'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_RenderTexture_end(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::RenderTexture* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"RenderTexture",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::RenderTexture*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_RenderTexture_end'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->end();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_RenderTexture_end'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_RenderTexture_setClearStencil(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::RenderTexture* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"RenderTexture",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::RenderTexture*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_RenderTexture_setClearStencil'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		int arg0;
		ok &= luaval_to_int32(tolua_S, 2,(int*)&arg0);
		if(!ok)
			return 0;
		cobj->setClearStencil(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_RenderTexture_setClearStencil'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_RenderTexture_initWithWidthAndHeight(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::RenderTexture* cobj = NULL;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"RenderTexture",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::RenderTexture*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_RenderTexture_initWithWidthAndHeight'", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	do{
		if (argc == 4) {
			int arg0;
			ok &= luaval_to_int32(tolua_S, 2,(int*)&arg0);

			if (!ok) { ok = true; break; }
			int arg1;
			ok &= luaval_to_int32(tolua_S, 3,(int*)&arg1);

			if (!ok) { ok = true; break; }
			cocos2d::Texture2D::PixelFormat arg2;
			ok &= luaval_to_int32(tolua_S, 4,(int*)&arg2);

			if (!ok) { ok = true; break; }
			unsigned int arg3;
			ok &= luaval_to_uint32(tolua_S, 5,&arg3);

			if (!ok) { ok = true; break; }
		bool ret = cobj->initWithWidthAndHeight(arg0, arg1, arg2, arg3);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
		}
	}while(0);
	do{
		if (argc == 3) {
			int arg0;
			ok &= luaval_to_int32(tolua_S, 2,(int*)&arg0);

			if (!ok) { ok = true; break; }
			int arg1;
			ok &= luaval_to_int32(tolua_S, 3,(int*)&arg1);

			if (!ok) { ok = true; break; }
			cocos2d::Texture2D::PixelFormat arg2;
			ok &= luaval_to_int32(tolua_S, 4,(int*)&arg2);

			if (!ok) { ok = true; break; }
		bool ret = cobj->initWithWidthAndHeight(arg0, arg1, arg2);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
		}
	}while(0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 3);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_RenderTexture_initWithWidthAndHeight'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_RenderTexture_visit(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::RenderTexture* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"RenderTexture",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::RenderTexture*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_RenderTexture_visit'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->visit();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_RenderTexture_visit'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_RenderTexture_getSprite(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::RenderTexture* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"RenderTexture",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::RenderTexture*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_RenderTexture_getSprite'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Sprite* ret = cobj->getSprite();
		tolua_pushusertype(tolua_S,ret,"Sprite");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_RenderTexture_getSprite'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_RenderTexture_isAutoDraw(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::RenderTexture* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"RenderTexture",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::RenderTexture*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_RenderTexture_isAutoDraw'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->isAutoDraw();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_RenderTexture_isAutoDraw'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_RenderTexture_setClearFlags(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::RenderTexture* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"RenderTexture",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::RenderTexture*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_RenderTexture_setClearFlags'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		unsigned int arg0;
		ok &= luaval_to_uint32(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setClearFlags(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_RenderTexture_setClearFlags'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_RenderTexture_begin(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::RenderTexture* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"RenderTexture",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::RenderTexture*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_RenderTexture_begin'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->begin();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_RenderTexture_begin'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_RenderTexture_saveToFile(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::RenderTexture* cobj = NULL;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"RenderTexture",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::RenderTexture*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_RenderTexture_saveToFile'", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	do{
		if (argc == 2) {
			const char* arg0;
			std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();

			if (!ok) { ok = true; break; }
			cocos2d::Image::Format arg1;
			ok &= luaval_to_int32(tolua_S, 3,(int*)&arg1);

			if (!ok) { ok = true; break; }
		bool ret = cobj->saveToFile(arg0, arg1);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
		}
	}while(0);
	do{
		if (argc == 1) {
			const char* arg0;
			std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();

			if (!ok) { ok = true; break; }
		bool ret = cobj->saveToFile(arg0);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
		}
	}while(0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_RenderTexture_saveToFile'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_RenderTexture_setAutoDraw(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::RenderTexture* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"RenderTexture",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::RenderTexture*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_RenderTexture_setAutoDraw'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setAutoDraw(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_RenderTexture_setAutoDraw'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_RenderTexture_setClearColor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::RenderTexture* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"RenderTexture",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::RenderTexture*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_RenderTexture_setClearColor'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Color4F arg0;
		ok &=luaval_to_color4f(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->setClearColor(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_RenderTexture_setClearColor'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_RenderTexture_endToLua(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::RenderTexture* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"RenderTexture",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::RenderTexture*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_RenderTexture_endToLua'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->endToLua();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_RenderTexture_endToLua'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_RenderTexture_beginWithClear(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::RenderTexture* cobj = NULL;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"RenderTexture",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::RenderTexture*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_RenderTexture_beginWithClear'", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	do{
		if (argc == 5) {
			double arg0;
			ok &= luaval_to_number(tolua_S, 2,&arg0);

			if (!ok) { ok = true; break; }
			double arg1;
			ok &= luaval_to_number(tolua_S, 3,&arg1);

			if (!ok) { ok = true; break; }
			double arg2;
			ok &= luaval_to_number(tolua_S, 4,&arg2);

			if (!ok) { ok = true; break; }
			double arg3;
			ok &= luaval_to_number(tolua_S, 5,&arg3);

			if (!ok) { ok = true; break; }
			double arg4;
			ok &= luaval_to_number(tolua_S, 6,&arg4);

			if (!ok) { ok = true; break; }
		cobj->beginWithClear(arg0, arg1, arg2, arg3, arg4);
		return 0;
		}
	}while(0);
	do{
		if (argc == 4) {
			double arg0;
			ok &= luaval_to_number(tolua_S, 2,&arg0);

			if (!ok) { ok = true; break; }
			double arg1;
			ok &= luaval_to_number(tolua_S, 3,&arg1);

			if (!ok) { ok = true; break; }
			double arg2;
			ok &= luaval_to_number(tolua_S, 4,&arg2);

			if (!ok) { ok = true; break; }
			double arg3;
			ok &= luaval_to_number(tolua_S, 5,&arg3);

			if (!ok) { ok = true; break; }
		cobj->beginWithClear(arg0, arg1, arg2, arg3);
		return 0;
		}
	}while(0);
	do{
		if (argc == 6) {
			double arg0;
			ok &= luaval_to_number(tolua_S, 2,&arg0);

			if (!ok) { ok = true; break; }
			double arg1;
			ok &= luaval_to_number(tolua_S, 3,&arg1);

			if (!ok) { ok = true; break; }
			double arg2;
			ok &= luaval_to_number(tolua_S, 4,&arg2);

			if (!ok) { ok = true; break; }
			double arg3;
			ok &= luaval_to_number(tolua_S, 5,&arg3);

			if (!ok) { ok = true; break; }
			double arg4;
			ok &= luaval_to_number(tolua_S, 6,&arg4);

			if (!ok) { ok = true; break; }
			int arg5;
			ok &= luaval_to_int32(tolua_S, 7,(int*)&arg5);

			if (!ok) { ok = true; break; }
		cobj->beginWithClear(arg0, arg1, arg2, arg3, arg4, arg5);
		return 0;
		}
	}while(0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 6);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_RenderTexture_beginWithClear'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_RenderTexture_clearDepth(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::RenderTexture* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"RenderTexture",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::RenderTexture*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_RenderTexture_clearDepth'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->clearDepth(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_RenderTexture_clearDepth'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_RenderTexture_getClearColor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::RenderTexture* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"RenderTexture",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::RenderTexture*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_RenderTexture_getClearColor'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Color4F ret = cobj->getClearColor();
		color4f_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_RenderTexture_getClearColor'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_RenderTexture_listenToBackground(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::RenderTexture* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"RenderTexture",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::RenderTexture*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_RenderTexture_listenToBackground'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Object* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Object",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Object*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->listenToBackground(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_RenderTexture_listenToBackground'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_RenderTexture_clear(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::RenderTexture* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"RenderTexture",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::RenderTexture*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_RenderTexture_clear'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 4) {
		double arg0;
		double arg1;
		double arg2;
		double arg3;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		ok &= luaval_to_number(tolua_S, 3,&arg1);
		ok &= luaval_to_number(tolua_S, 4,&arg2);
		ok &= luaval_to_number(tolua_S, 5,&arg3);
		if(!ok)
			return 0;
		cobj->clear(arg0, arg1, arg2, arg3);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 4);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_RenderTexture_clear'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_RenderTexture_getClearFlags(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::RenderTexture* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"RenderTexture",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::RenderTexture*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_RenderTexture_getClearFlags'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		unsigned int ret = cobj->getClearFlags();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_RenderTexture_getClearFlags'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_RenderTexture_newImage(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::RenderTexture* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"RenderTexture",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::RenderTexture*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_RenderTexture_newImage'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Image* ret = cobj->newImage();
		tolua_pushusertype(tolua_S,ret,"Image");
	    return 1;
	}
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cocos2d::Image* ret = cobj->newImage(arg0);
		tolua_pushusertype(tolua_S,ret,"Image");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_RenderTexture_newImage'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_RenderTexture_setClearDepth(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::RenderTexture* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"RenderTexture",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::RenderTexture*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_RenderTexture_setClearDepth'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setClearDepth(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_RenderTexture_setClearDepth'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_RenderTexture_setSprite(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::RenderTexture* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"RenderTexture",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::RenderTexture*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_RenderTexture_setSprite'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Sprite* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Sprite",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Sprite*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->setSprite(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_RenderTexture_setSprite'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_RenderTexture_create(lua_State* tolua_S)
{
	int argc = 0;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"RenderTexture",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S)-1;

	do {
		if (argc == 3) {
			int arg0;
			ok &= luaval_to_int32(tolua_S, 2,(int*)&arg0);
			if (!ok) { ok = true; break; }
			int arg1;
			ok &= luaval_to_int32(tolua_S, 3,(int*)&arg1);
			if (!ok) { ok = true; break; }
			cocos2d::Texture2D::PixelFormat arg2;
			ok &= luaval_to_int32(tolua_S, 4,(int*)&arg2);
			if (!ok) { ok = true; break; }
			cocos2d::RenderTexture* ret = cocos2d::RenderTexture::create(arg0, arg1, arg2);
			tolua_pushusertype(tolua_S,ret,"RenderTexture");
			return 1;
		}
	} while (0);
	do {
		if (argc == 4) {
			int arg0;
			ok &= luaval_to_int32(tolua_S, 2,(int*)&arg0);
			if (!ok) { ok = true; break; }
			int arg1;
			ok &= luaval_to_int32(tolua_S, 3,(int*)&arg1);
			if (!ok) { ok = true; break; }
			cocos2d::Texture2D::PixelFormat arg2;
			ok &= luaval_to_int32(tolua_S, 4,(int*)&arg2);
			if (!ok) { ok = true; break; }
			unsigned int arg3;
			ok &= luaval_to_uint32(tolua_S, 5,&arg3);
			if (!ok) { ok = true; break; }
			cocos2d::RenderTexture* ret = cocos2d::RenderTexture::create(arg0, arg1, arg2, arg3);
			tolua_pushusertype(tolua_S,ret,"RenderTexture");
			return 1;
		}
	} while (0);
	do {
		if (argc == 2) {
			int arg0;
			ok &= luaval_to_int32(tolua_S, 2,(int*)&arg0);
			if (!ok) { ok = true; break; }
			int arg1;
			ok &= luaval_to_int32(tolua_S, 3,(int*)&arg1);
			if (!ok) { ok = true; break; }
			cocos2d::RenderTexture* ret = cocos2d::RenderTexture::create(arg0, arg1);
			tolua_pushusertype(tolua_S,ret,"RenderTexture");
			return 1;
		}
	} while (0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_RenderTexture_create'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_RenderTexture_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::RenderTexture* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::RenderTexture();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"RenderTexture");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_RenderTexture_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_RenderTexture_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (RenderTexture)");
	return 0;
}

int lua_register_cocos2dx_RenderTexture(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"RenderTexture");
	tolua_cclass(tolua_S,"RenderTexture","RenderTexture","Node",NULL);

	tolua_beginmodule(tolua_S,"RenderTexture");
		tolua_function(tolua_S,"clearStencil",lua_cocos2dx_RenderTexture_clearStencil);
		tolua_function(tolua_S,"draw",lua_cocos2dx_RenderTexture_draw);
		tolua_function(tolua_S,"listenToForeground",lua_cocos2dx_RenderTexture_listenToForeground);
		tolua_function(tolua_S,"getClearDepth",lua_cocos2dx_RenderTexture_getClearDepth);
		tolua_function(tolua_S,"getClearStencil",lua_cocos2dx_RenderTexture_getClearStencil);
		tolua_function(tolua_S,"end",lua_cocos2dx_RenderTexture_end);
		tolua_function(tolua_S,"setClearStencil",lua_cocos2dx_RenderTexture_setClearStencil);
		tolua_function(tolua_S,"initWithWidthAndHeight",lua_cocos2dx_RenderTexture_initWithWidthAndHeight);
		tolua_function(tolua_S,"visit",lua_cocos2dx_RenderTexture_visit);
		tolua_function(tolua_S,"getSprite",lua_cocos2dx_RenderTexture_getSprite);
		tolua_function(tolua_S,"isAutoDraw",lua_cocos2dx_RenderTexture_isAutoDraw);
		tolua_function(tolua_S,"setClearFlags",lua_cocos2dx_RenderTexture_setClearFlags);
		tolua_function(tolua_S,"begin",lua_cocos2dx_RenderTexture_begin);
		tolua_function(tolua_S,"saveToFile",lua_cocos2dx_RenderTexture_saveToFile);
		tolua_function(tolua_S,"setAutoDraw",lua_cocos2dx_RenderTexture_setAutoDraw);
		tolua_function(tolua_S,"setClearColor",lua_cocos2dx_RenderTexture_setClearColor);
		tolua_function(tolua_S,"endToLua",lua_cocos2dx_RenderTexture_endToLua);
		tolua_function(tolua_S,"beginWithClear",lua_cocos2dx_RenderTexture_beginWithClear);
		tolua_function(tolua_S,"clearDepth",lua_cocos2dx_RenderTexture_clearDepth);
		tolua_function(tolua_S,"getClearColor",lua_cocos2dx_RenderTexture_getClearColor);
		tolua_function(tolua_S,"listenToBackground",lua_cocos2dx_RenderTexture_listenToBackground);
		tolua_function(tolua_S,"clear",lua_cocos2dx_RenderTexture_clear);
		tolua_function(tolua_S,"getClearFlags",lua_cocos2dx_RenderTexture_getClearFlags);
		tolua_function(tolua_S,"newImage",lua_cocos2dx_RenderTexture_newImage);
		tolua_function(tolua_S,"setClearDepth",lua_cocos2dx_RenderTexture_setClearDepth);
		tolua_function(tolua_S,"setSprite",lua_cocos2dx_RenderTexture_setSprite);
		tolua_function(tolua_S,"new",lua_cocos2dx_RenderTexture_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_RenderTexture_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_ParticleBatchNode_addChild(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleBatchNode* cobj = NULL;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleBatchNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleBatchNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleBatchNode_addChild'", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	do{
		if (argc == 2) {
			cocos2d::Node* arg0;
			#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};

			if (!ok) { ok = true; break; }
			int arg1;
			ok &= luaval_to_int32(tolua_S, 3,(int*)&arg1);

			if (!ok) { ok = true; break; }
		cobj->addChild(arg0, arg1);
		return 0;
		}
	}while(0);
	do{
		if (argc == 1) {
			cocos2d::Node* arg0;
			#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};

			if (!ok) { ok = true; break; }
		cobj->addChild(arg0);
		return 0;
		}
	}while(0);
	do{
		if (argc == 3) {
			cocos2d::Node* arg0;
			#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};

			if (!ok) { ok = true; break; }
			int arg1;
			ok &= luaval_to_int32(tolua_S, 3,(int*)&arg1);

			if (!ok) { ok = true; break; }
			int arg2;
			ok &= luaval_to_int32(tolua_S, 4,(int*)&arg2);

			if (!ok) { ok = true; break; }
		cobj->addChild(arg0, arg1, arg2);
		return 0;
		}
	}while(0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 3);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleBatchNode_addChild'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleBatchNode_draw(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleBatchNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleBatchNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleBatchNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleBatchNode_draw'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->draw();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleBatchNode_draw'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleBatchNode_setTexture(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleBatchNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleBatchNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleBatchNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleBatchNode_setTexture'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Texture2D* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Texture2D",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Texture2D*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->setTexture(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleBatchNode_setTexture'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleBatchNode_initWithFile(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleBatchNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleBatchNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleBatchNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleBatchNode_initWithFile'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		const char* arg0;
		unsigned int arg1;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		ok &= luaval_to_uint32(tolua_S, 3,&arg1);
		if(!ok)
			return 0;
		bool ret = cobj->initWithFile(arg0, arg1);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleBatchNode_initWithFile'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleBatchNode_disableParticle(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleBatchNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleBatchNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleBatchNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleBatchNode_disableParticle'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		unsigned int arg0;
		ok &= luaval_to_uint32(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->disableParticle(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleBatchNode_disableParticle'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleBatchNode_visit(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleBatchNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleBatchNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleBatchNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleBatchNode_visit'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->visit();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleBatchNode_visit'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleBatchNode_getTexture(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleBatchNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleBatchNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleBatchNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleBatchNode_getTexture'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Texture2D* ret = cobj->getTexture();
		tolua_pushusertype(tolua_S,ret,"Texture2D");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleBatchNode_getTexture'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleBatchNode_setTextureAtlas(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleBatchNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleBatchNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleBatchNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleBatchNode_setTextureAtlas'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::TextureAtlas* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"TextureAtlas",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::TextureAtlas*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->setTextureAtlas(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleBatchNode_setTextureAtlas'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleBatchNode_removeAllChildrenWithCleanup(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleBatchNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleBatchNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleBatchNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleBatchNode_removeAllChildrenWithCleanup'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->removeAllChildrenWithCleanup(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleBatchNode_removeAllChildrenWithCleanup'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleBatchNode_getTextureAtlas(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleBatchNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleBatchNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleBatchNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleBatchNode_getTextureAtlas'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::TextureAtlas* ret = cobj->getTextureAtlas();
		tolua_pushusertype(tolua_S,ret,"TextureAtlas");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleBatchNode_getTextureAtlas'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleBatchNode_removeChild(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleBatchNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleBatchNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleBatchNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleBatchNode_removeChild'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		cocos2d::Node* arg0;
		bool arg1;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		ok &= luaval_to_boolean(tolua_S, 3,&arg1);
		if(!ok)
			return 0;
		cobj->removeChild(arg0, arg1);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleBatchNode_removeChild'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleBatchNode_insertChild(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleBatchNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleBatchNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleBatchNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleBatchNode_insertChild'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		cocos2d::ParticleSystem* arg0;
		int arg1;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"ParticleSystem",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,2,0);
		};
		ok &= luaval_to_int32(tolua_S, 3,(int*)&arg1);
		if(!ok)
			return 0;
		cobj->insertChild(arg0, arg1);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleBatchNode_insertChild'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleBatchNode_initWithTexture(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleBatchNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleBatchNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleBatchNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleBatchNode_initWithTexture'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		cocos2d::Texture2D* arg0;
		unsigned int arg1;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Texture2D",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Texture2D*)tolua_tousertype(tolua_S,2,0);
		};
		ok &= luaval_to_uint32(tolua_S, 3,&arg1);
		if(!ok)
			return 0;
		bool ret = cobj->initWithTexture(arg0, arg1);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleBatchNode_initWithTexture'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleBatchNode_removeChildAtIndex(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleBatchNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleBatchNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleBatchNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleBatchNode_removeChildAtIndex'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		unsigned int arg0;
		bool arg1;
		ok &= luaval_to_uint32(tolua_S, 2,&arg0);
		ok &= luaval_to_boolean(tolua_S, 3,&arg1);
		if(!ok)
			return 0;
		cobj->removeChildAtIndex(arg0, arg1);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleBatchNode_removeChildAtIndex'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleBatchNode_reorderChild(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleBatchNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleBatchNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleBatchNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleBatchNode_reorderChild'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		cocos2d::Node* arg0;
		int arg1;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		ok &= luaval_to_int32(tolua_S, 3,(int*)&arg1);
		if(!ok)
			return 0;
		cobj->reorderChild(arg0, arg1);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleBatchNode_reorderChild'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleBatchNode_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"ParticleBatchNode",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 1) {
		const char* arg0;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		if(!ok)
			return 0;
		cocos2d::ParticleBatchNode* ret = cocos2d::ParticleBatchNode::create(arg0);
		tolua_pushusertype(tolua_S,ret,"ParticleBatchNode");
	    return 1;
	}
	if (argc == 2) {
		const char* arg0;
		unsigned int arg1;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		ok &= luaval_to_uint32(tolua_S, 3,&arg1);
		if(!ok)
			return 0;
		cocos2d::ParticleBatchNode* ret = cocos2d::ParticleBatchNode::create(arg0, arg1);
		tolua_pushusertype(tolua_S,ret,"ParticleBatchNode");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleBatchNode_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_ParticleBatchNode_createWithTexture(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"ParticleBatchNode",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 1) {
		cocos2d::Texture2D* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Texture2D",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Texture2D*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cocos2d::ParticleBatchNode* ret = cocos2d::ParticleBatchNode::createWithTexture(arg0);
		tolua_pushusertype(tolua_S,ret,"ParticleBatchNode");
	    return 1;
	}
	if (argc == 2) {
		cocos2d::Texture2D* arg0;
		unsigned int arg1;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Texture2D",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Texture2D*)tolua_tousertype(tolua_S,2,0);
		};
		ok &= luaval_to_uint32(tolua_S, 3,&arg1);
		if(!ok)
			return 0;
		cocos2d::ParticleBatchNode* ret = cocos2d::ParticleBatchNode::createWithTexture(arg0, arg1);
		tolua_pushusertype(tolua_S,ret,"ParticleBatchNode");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleBatchNode_createWithTexture'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_ParticleBatchNode_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleBatchNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::ParticleBatchNode();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"ParticleBatchNode");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleBatchNode_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_ParticleBatchNode_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (ParticleBatchNode)");
	return 0;
}

int lua_register_cocos2dx_ParticleBatchNode(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"ParticleBatchNode");
	tolua_cclass(tolua_S,"ParticleBatchNode","ParticleBatchNode","Node",NULL);

	tolua_beginmodule(tolua_S,"ParticleBatchNode");
		tolua_function(tolua_S,"addChild",lua_cocos2dx_ParticleBatchNode_addChild);
		tolua_function(tolua_S,"draw",lua_cocos2dx_ParticleBatchNode_draw);
		tolua_function(tolua_S,"setTexture",lua_cocos2dx_ParticleBatchNode_setTexture);
		tolua_function(tolua_S,"initWithFile",lua_cocos2dx_ParticleBatchNode_initWithFile);
		tolua_function(tolua_S,"disableParticle",lua_cocos2dx_ParticleBatchNode_disableParticle);
		tolua_function(tolua_S,"visit",lua_cocos2dx_ParticleBatchNode_visit);
		tolua_function(tolua_S,"getTexture",lua_cocos2dx_ParticleBatchNode_getTexture);
		tolua_function(tolua_S,"setTextureAtlas",lua_cocos2dx_ParticleBatchNode_setTextureAtlas);
		tolua_function(tolua_S,"removeAllChildrenWithCleanup",lua_cocos2dx_ParticleBatchNode_removeAllChildrenWithCleanup);
		tolua_function(tolua_S,"getTextureAtlas",lua_cocos2dx_ParticleBatchNode_getTextureAtlas);
		tolua_function(tolua_S,"removeChild",lua_cocos2dx_ParticleBatchNode_removeChild);
		tolua_function(tolua_S,"insertChild",lua_cocos2dx_ParticleBatchNode_insertChild);
		tolua_function(tolua_S,"initWithTexture",lua_cocos2dx_ParticleBatchNode_initWithTexture);
		tolua_function(tolua_S,"removeChildAtIndex",lua_cocos2dx_ParticleBatchNode_removeChildAtIndex);
		tolua_function(tolua_S,"reorderChild",lua_cocos2dx_ParticleBatchNode_reorderChild);
		tolua_function(tolua_S,"new",lua_cocos2dx_ParticleBatchNode_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_ParticleBatchNode_create);
		tolua_function(tolua_S,"createWithTexture", lua_cocos2dx_ParticleBatchNode_createWithTexture);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_ParticleSystem_getStartSizeVar(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_getStartSizeVar'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getStartSizeVar();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_getStartSizeVar'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_getTexture(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_getTexture'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Texture2D* ret = cobj->getTexture();
		tolua_pushusertype(tolua_S,ret,"Texture2D");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_getTexture'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_isFull(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_isFull'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->isFull();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_isFull'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_getBatchNode(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_getBatchNode'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::ParticleBatchNode* ret = cobj->getBatchNode();
		tolua_pushusertype(tolua_S,ret,"ParticleBatchNode");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_getBatchNode'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_getStartColor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_getStartColor'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Color4F ret = cobj->getStartColor();
		color4f_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_getStartColor'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_getPositionType(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_getPositionType'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		int ret = (int)cobj->getPositionType();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_getPositionType'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_setPosVar(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_setPosVar'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Point arg0;
		ok &= luaval_to_point(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->setPosVar(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_setPosVar'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_getEndSpin(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_getEndSpin'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getEndSpin();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_getEndSpin'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_setRotatePerSecondVar(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_setRotatePerSecondVar'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setRotatePerSecondVar(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_setRotatePerSecondVar'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_getStartSpinVar(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_getStartSpinVar'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getStartSpinVar();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_getStartSpinVar'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_getRadialAccelVar(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_getRadialAccelVar'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getRadialAccelVar();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_getRadialAccelVar'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_init(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_init'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->init();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_init'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_getEndSizeVar(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_getEndSizeVar'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getEndSizeVar();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_getEndSizeVar'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_setRotation(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_setRotation'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setRotation(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_setRotation'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_setTangentialAccel(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_setTangentialAccel'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setTangentialAccel(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_setTangentialAccel'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_setScaleY(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_setScaleY'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setScaleY(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_setScaleY'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_setScaleX(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_setScaleX'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setScaleX(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_setScaleX'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_getRadialAccel(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_getRadialAccel'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getRadialAccel();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_getRadialAccel'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_setStartRadius(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_setStartRadius'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setStartRadius(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_setStartRadius'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_setRotatePerSecond(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_setRotatePerSecond'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setRotatePerSecond(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_setRotatePerSecond'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_setEndSize(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_setEndSize'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setEndSize(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_setEndSize'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_getStartColorVar(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_getStartColorVar'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Color4F ret = cobj->getStartColorVar();
		color4f_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_getStartColorVar'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_getTangentialAccel(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_getTangentialAccel'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getTangentialAccel();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_getTangentialAccel'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_setEndRadius(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_setEndRadius'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setEndRadius(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_setEndRadius'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_getSpeed(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_getSpeed'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getSpeed();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_getSpeed'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_getAngle(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_getAngle'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getAngle();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_getAngle'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_setEndColor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_setEndColor'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Color4F arg0;
		ok &=luaval_to_color4f(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->setEndColor(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_setEndColor'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_setStartSpin(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_setStartSpin'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setStartSpin(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_setStartSpin'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_setDuration(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_setDuration'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setDuration(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_setDuration'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_initWithTotalParticles(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_initWithTotalParticles'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		unsigned int arg0;
		ok &= luaval_to_uint32(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		bool ret = cobj->initWithTotalParticles(arg0);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_initWithTotalParticles'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_setTexture(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_setTexture'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Texture2D* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Texture2D",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Texture2D*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->setTexture(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_setTexture'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_getPosVar(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_getPosVar'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Point ret = cobj->getPosVar();
		point_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_getPosVar'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_updateWithNoTime(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_updateWithNoTime'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->updateWithNoTime();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_updateWithNoTime'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_isBlendAdditive(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_isBlendAdditive'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->isBlendAdditive();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_isBlendAdditive'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_getSpeedVar(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_getSpeedVar'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getSpeedVar();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_getSpeedVar'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_setPositionType(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_setPositionType'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::ParticleSystem::PositionType arg0;
		ok &= luaval_to_int32(tolua_S, 2,(int*)&arg0);
		if(!ok)
			return 0;
		cobj->setPositionType(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_setPositionType'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_stopSystem(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_stopSystem'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->stopSystem();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_stopSystem'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_getSourcePosition(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_getSourcePosition'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Point ret = cobj->getSourcePosition();
		point_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_getSourcePosition'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_setLifeVar(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_setLifeVar'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setLifeVar(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_setLifeVar'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_setTotalParticles(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_setTotalParticles'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		unsigned int arg0;
		ok &= luaval_to_uint32(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setTotalParticles(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_setTotalParticles'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_setEndColorVar(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_setEndColorVar'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Color4F arg0;
		ok &=luaval_to_color4f(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->setEndColorVar(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_setEndColorVar'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_updateQuadWithParticle(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_updateQuadWithParticle'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		tParticle* arg0;
		cocos2d::Point arg1;
		#pragma warning NO CONVERSION TO NATIVE FOR tParticle*;
		ok &= luaval_to_point(tolua_S, 3, &arg1);
		if(!ok)
			return 0;
		cobj->updateQuadWithParticle(arg0, arg1);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_updateQuadWithParticle'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_getAtlasIndex(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_getAtlasIndex'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		int ret = cobj->getAtlasIndex();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_getAtlasIndex'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_getStartSize(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_getStartSize'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getStartSize();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_getStartSize'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_setStartSpinVar(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_setStartSpinVar'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setStartSpinVar(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_setStartSpinVar'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_resetSystem(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_resetSystem'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->resetSystem();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_resetSystem'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_setAtlasIndex(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_setAtlasIndex'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		int arg0;
		ok &= luaval_to_int32(tolua_S, 2,(int*)&arg0);
		if(!ok)
			return 0;
		cobj->setAtlasIndex(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_setAtlasIndex'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_setTangentialAccelVar(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_setTangentialAccelVar'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setTangentialAccelVar(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_setTangentialAccelVar'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_setEndRadiusVar(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_setEndRadiusVar'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setEndRadiusVar(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_setEndRadiusVar'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_getEndRadius(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_getEndRadius'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getEndRadius();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_getEndRadius'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_isOpacityModifyRGB(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_isOpacityModifyRGB'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->isOpacityModifyRGB();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_isOpacityModifyRGB'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_isActive(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_isActive'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->isActive();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_isActive'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_setRadialAccelVar(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_setRadialAccelVar'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setRadialAccelVar(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_setRadialAccelVar'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_setStartSize(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_setStartSize'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setStartSize(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_setStartSize'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_setSpeed(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_setSpeed'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setSpeed(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_setSpeed'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_getStartSpin(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_getStartSpin'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getStartSpin();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_getStartSpin'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_getRotatePerSecond(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_getRotatePerSecond'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getRotatePerSecond();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_getRotatePerSecond'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_initParticle(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_initParticle'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		tParticle* arg0;
		#pragma warning NO CONVERSION TO NATIVE FOR tParticle*;
		if(!ok)
			return 0;
		cobj->initParticle(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_initParticle'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_setEmitterMode(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_setEmitterMode'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::ParticleSystem::Mode arg0;
		ok &= luaval_to_int32(tolua_S, 2,(int*)&arg0);
		if(!ok)
			return 0;
		cobj->setEmitterMode(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_setEmitterMode'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_getDuration(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_getDuration'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getDuration();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_getDuration'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_setSourcePosition(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_setSourcePosition'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Point arg0;
		ok &= luaval_to_point(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->setSourcePosition(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_setSourcePosition'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_getEndSpinVar(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_getEndSpinVar'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getEndSpinVar();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_getEndSpinVar'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_setBlendAdditive(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_setBlendAdditive'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setBlendAdditive(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_setBlendAdditive'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_setLife(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_setLife'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setLife(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_setLife'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_setAngleVar(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_setAngleVar'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setAngleVar(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_setAngleVar'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_setRotationIsDir(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_setRotationIsDir'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setRotationIsDir(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_setRotationIsDir'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_setEndSizeVar(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_setEndSizeVar'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setEndSizeVar(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_setEndSizeVar'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_setAngle(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_setAngle'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setAngle(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_setAngle'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_setBatchNode(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_setBatchNode'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::ParticleBatchNode* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"ParticleBatchNode",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::ParticleBatchNode*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->setBatchNode(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_setBatchNode'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_getTangentialAccelVar(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_getTangentialAccelVar'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getTangentialAccelVar();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_getTangentialAccelVar'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_getEmitterMode(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_getEmitterMode'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		int ret = (int)cobj->getEmitterMode();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_getEmitterMode'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_setEndSpinVar(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_setEndSpinVar'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setEndSpinVar(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_setEndSpinVar'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_initWithFile(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_initWithFile'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		const char* arg0;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		if(!ok)
			return 0;
		bool ret = cobj->initWithFile(arg0);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_initWithFile'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_getAngleVar(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_getAngleVar'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getAngleVar();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_getAngleVar'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_setStartColor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_setStartColor'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Color4F arg0;
		ok &=luaval_to_color4f(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->setStartColor(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_setStartColor'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_getRotatePerSecondVar(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_getRotatePerSecondVar'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getRotatePerSecondVar();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_getRotatePerSecondVar'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_getEndSize(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_getEndSize'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getEndSize();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_getEndSize'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_getLife(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_getLife'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getLife();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_getLife'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_setSpeedVar(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_setSpeedVar'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setSpeedVar(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_setSpeedVar'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_setAutoRemoveOnFinish(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_setAutoRemoveOnFinish'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setAutoRemoveOnFinish(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_setAutoRemoveOnFinish'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_setGravity(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_setGravity'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Point arg0;
		ok &= luaval_to_point(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->setGravity(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_setGravity'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_postStep(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_postStep'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->postStep();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_postStep'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_setEmissionRate(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_setEmissionRate'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setEmissionRate(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_setEmissionRate'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_getEndColorVar(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_getEndColorVar'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Color4F ret = cobj->getEndColorVar();
		color4f_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_getEndColorVar'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_getRotationIsDir(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_getRotationIsDir'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->getRotationIsDir();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_getRotationIsDir'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_setScale(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_setScale'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setScale(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_setScale'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_getEmissionRate(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_getEmissionRate'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getEmissionRate();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_getEmissionRate'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_getEndColor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_getEndColor'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Color4F ret = cobj->getEndColor();
		color4f_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_getEndColor'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_getLifeVar(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_getLifeVar'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getLifeVar();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_getLifeVar'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_setStartSizeVar(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_setStartSizeVar'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setStartSizeVar(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_setStartSizeVar'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_setOpacityModifyRGB(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_setOpacityModifyRGB'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setOpacityModifyRGB(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_setOpacityModifyRGB'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_addParticle(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_addParticle'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->addParticle();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_addParticle'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_getStartRadius(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_getStartRadius'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getStartRadius();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_getStartRadius'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_getParticleCount(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_getParticleCount'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		unsigned int ret = cobj->getParticleCount();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_getParticleCount'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_getStartRadiusVar(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_getStartRadiusVar'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getStartRadiusVar();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_getStartRadiusVar'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_setStartColorVar(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_setStartColorVar'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Color4F arg0;
		ok &=luaval_to_color4f(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->setStartColorVar(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_setStartColorVar'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_setEndSpin(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_setEndSpin'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setEndSpin(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_setEndSpin'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_setRadialAccel(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_setRadialAccel'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setRadialAccel(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_setRadialAccel'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_initWithDictionary(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = NULL;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_initWithDictionary'", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	do{
		if (argc == 2) {
			cocos2d::Dictionary* arg0;
			ok &= luaval_to_dictionary(tolua_S, 2, &arg0);

			if (!ok) { ok = true; break; }
			const char* arg1;
			std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp); arg1 = arg1_tmp.c_str();

			if (!ok) { ok = true; break; }
		bool ret = cobj->initWithDictionary(arg0, arg1);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
		}
	}while(0);
	do{
		if (argc == 1) {
			cocos2d::Dictionary* arg0;
			ok &= luaval_to_dictionary(tolua_S, 2, &arg0);

			if (!ok) { ok = true; break; }
		bool ret = cobj->initWithDictionary(arg0);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
		}
	}while(0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_initWithDictionary'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_isAutoRemoveOnFinish(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_isAutoRemoveOnFinish'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->isAutoRemoveOnFinish();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_isAutoRemoveOnFinish'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_getTotalParticles(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_getTotalParticles'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		unsigned int ret = cobj->getTotalParticles();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_getTotalParticles'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_setStartRadiusVar(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_setStartRadiusVar'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setStartRadiusVar(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_setStartRadiusVar'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_getEndRadiusVar(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_getEndRadiusVar'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getEndRadiusVar();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_getEndRadiusVar'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_getGravity(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystem*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystem_getGravity'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Point ret = cobj->getGravity();
		point_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_getGravity'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystem_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 1) {
		const char* arg0;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		if(!ok)
			return 0;
		cocos2d::ParticleSystem* ret = cocos2d::ParticleSystem::create(arg0);
		tolua_pushusertype(tolua_S,ret,"ParticleSystem");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_ParticleSystem_createWithTotalParticles(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"ParticleSystem",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 1) {
		unsigned int arg0;
		ok &= luaval_to_uint32(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cocos2d::ParticleSystem* ret = cocos2d::ParticleSystem::createWithTotalParticles(arg0);
		tolua_pushusertype(tolua_S,ret,"ParticleSystem");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_createWithTotalParticles'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_ParticleSystem_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystem* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::ParticleSystem();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"ParticleSystem");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystem_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_ParticleSystem_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (ParticleSystem)");
	return 0;
}

int lua_register_cocos2dx_ParticleSystem(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"ParticleSystem");
	tolua_cclass(tolua_S,"ParticleSystem","ParticleSystem","Node",NULL);

	tolua_beginmodule(tolua_S,"ParticleSystem");
		tolua_function(tolua_S,"getStartSizeVar",lua_cocos2dx_ParticleSystem_getStartSizeVar);
		tolua_function(tolua_S,"getTexture",lua_cocos2dx_ParticleSystem_getTexture);
		tolua_function(tolua_S,"isFull",lua_cocos2dx_ParticleSystem_isFull);
		tolua_function(tolua_S,"getBatchNode",lua_cocos2dx_ParticleSystem_getBatchNode);
		tolua_function(tolua_S,"getStartColor",lua_cocos2dx_ParticleSystem_getStartColor);
		tolua_function(tolua_S,"getPositionType",lua_cocos2dx_ParticleSystem_getPositionType);
		tolua_function(tolua_S,"setPosVar",lua_cocos2dx_ParticleSystem_setPosVar);
		tolua_function(tolua_S,"getEndSpin",lua_cocos2dx_ParticleSystem_getEndSpin);
		tolua_function(tolua_S,"setRotatePerSecondVar",lua_cocos2dx_ParticleSystem_setRotatePerSecondVar);
		tolua_function(tolua_S,"getStartSpinVar",lua_cocos2dx_ParticleSystem_getStartSpinVar);
		tolua_function(tolua_S,"getRadialAccelVar",lua_cocos2dx_ParticleSystem_getRadialAccelVar);
		tolua_function(tolua_S,"init",lua_cocos2dx_ParticleSystem_init);
		tolua_function(tolua_S,"getEndSizeVar",lua_cocos2dx_ParticleSystem_getEndSizeVar);
		tolua_function(tolua_S,"setRotation",lua_cocos2dx_ParticleSystem_setRotation);
		tolua_function(tolua_S,"setTangentialAccel",lua_cocos2dx_ParticleSystem_setTangentialAccel);
		tolua_function(tolua_S,"setScaleY",lua_cocos2dx_ParticleSystem_setScaleY);
		tolua_function(tolua_S,"setScaleX",lua_cocos2dx_ParticleSystem_setScaleX);
		tolua_function(tolua_S,"getRadialAccel",lua_cocos2dx_ParticleSystem_getRadialAccel);
		tolua_function(tolua_S,"setStartRadius",lua_cocos2dx_ParticleSystem_setStartRadius);
		tolua_function(tolua_S,"setRotatePerSecond",lua_cocos2dx_ParticleSystem_setRotatePerSecond);
		tolua_function(tolua_S,"setEndSize",lua_cocos2dx_ParticleSystem_setEndSize);
		tolua_function(tolua_S,"getStartColorVar",lua_cocos2dx_ParticleSystem_getStartColorVar);
		tolua_function(tolua_S,"getTangentialAccel",lua_cocos2dx_ParticleSystem_getTangentialAccel);
		tolua_function(tolua_S,"setEndRadius",lua_cocos2dx_ParticleSystem_setEndRadius);
		tolua_function(tolua_S,"getSpeed",lua_cocos2dx_ParticleSystem_getSpeed);
		tolua_function(tolua_S,"getAngle",lua_cocos2dx_ParticleSystem_getAngle);
		tolua_function(tolua_S,"setEndColor",lua_cocos2dx_ParticleSystem_setEndColor);
		tolua_function(tolua_S,"setStartSpin",lua_cocos2dx_ParticleSystem_setStartSpin);
		tolua_function(tolua_S,"setDuration",lua_cocos2dx_ParticleSystem_setDuration);
		tolua_function(tolua_S,"initWithTotalParticles",lua_cocos2dx_ParticleSystem_initWithTotalParticles);
		tolua_function(tolua_S,"setTexture",lua_cocos2dx_ParticleSystem_setTexture);
		tolua_function(tolua_S,"getPosVar",lua_cocos2dx_ParticleSystem_getPosVar);
		tolua_function(tolua_S,"updateWithNoTime",lua_cocos2dx_ParticleSystem_updateWithNoTime);
		tolua_function(tolua_S,"isBlendAdditive",lua_cocos2dx_ParticleSystem_isBlendAdditive);
		tolua_function(tolua_S,"getSpeedVar",lua_cocos2dx_ParticleSystem_getSpeedVar);
		tolua_function(tolua_S,"setPositionType",lua_cocos2dx_ParticleSystem_setPositionType);
		tolua_function(tolua_S,"stopSystem",lua_cocos2dx_ParticleSystem_stopSystem);
		tolua_function(tolua_S,"getSourcePosition",lua_cocos2dx_ParticleSystem_getSourcePosition);
		tolua_function(tolua_S,"setLifeVar",lua_cocos2dx_ParticleSystem_setLifeVar);
		tolua_function(tolua_S,"setTotalParticles",lua_cocos2dx_ParticleSystem_setTotalParticles);
		tolua_function(tolua_S,"setEndColorVar",lua_cocos2dx_ParticleSystem_setEndColorVar);
		tolua_function(tolua_S,"updateQuadWithParticle",lua_cocos2dx_ParticleSystem_updateQuadWithParticle);
		tolua_function(tolua_S,"getAtlasIndex",lua_cocos2dx_ParticleSystem_getAtlasIndex);
		tolua_function(tolua_S,"getStartSize",lua_cocos2dx_ParticleSystem_getStartSize);
		tolua_function(tolua_S,"setStartSpinVar",lua_cocos2dx_ParticleSystem_setStartSpinVar);
		tolua_function(tolua_S,"resetSystem",lua_cocos2dx_ParticleSystem_resetSystem);
		tolua_function(tolua_S,"setAtlasIndex",lua_cocos2dx_ParticleSystem_setAtlasIndex);
		tolua_function(tolua_S,"setTangentialAccelVar",lua_cocos2dx_ParticleSystem_setTangentialAccelVar);
		tolua_function(tolua_S,"setEndRadiusVar",lua_cocos2dx_ParticleSystem_setEndRadiusVar);
		tolua_function(tolua_S,"getEndRadius",lua_cocos2dx_ParticleSystem_getEndRadius);
		tolua_function(tolua_S,"isOpacityModifyRGB",lua_cocos2dx_ParticleSystem_isOpacityModifyRGB);
		tolua_function(tolua_S,"isActive",lua_cocos2dx_ParticleSystem_isActive);
		tolua_function(tolua_S,"setRadialAccelVar",lua_cocos2dx_ParticleSystem_setRadialAccelVar);
		tolua_function(tolua_S,"setStartSize",lua_cocos2dx_ParticleSystem_setStartSize);
		tolua_function(tolua_S,"setSpeed",lua_cocos2dx_ParticleSystem_setSpeed);
		tolua_function(tolua_S,"getStartSpin",lua_cocos2dx_ParticleSystem_getStartSpin);
		tolua_function(tolua_S,"getRotatePerSecond",lua_cocos2dx_ParticleSystem_getRotatePerSecond);
		tolua_function(tolua_S,"initParticle",lua_cocos2dx_ParticleSystem_initParticle);
		tolua_function(tolua_S,"setEmitterMode",lua_cocos2dx_ParticleSystem_setEmitterMode);
		tolua_function(tolua_S,"getDuration",lua_cocos2dx_ParticleSystem_getDuration);
		tolua_function(tolua_S,"setSourcePosition",lua_cocos2dx_ParticleSystem_setSourcePosition);
		tolua_function(tolua_S,"getEndSpinVar",lua_cocos2dx_ParticleSystem_getEndSpinVar);
		tolua_function(tolua_S,"setBlendAdditive",lua_cocos2dx_ParticleSystem_setBlendAdditive);
		tolua_function(tolua_S,"setLife",lua_cocos2dx_ParticleSystem_setLife);
		tolua_function(tolua_S,"setAngleVar",lua_cocos2dx_ParticleSystem_setAngleVar);
		tolua_function(tolua_S,"setRotationIsDir",lua_cocos2dx_ParticleSystem_setRotationIsDir);
		tolua_function(tolua_S,"setEndSizeVar",lua_cocos2dx_ParticleSystem_setEndSizeVar);
		tolua_function(tolua_S,"setAngle",lua_cocos2dx_ParticleSystem_setAngle);
		tolua_function(tolua_S,"setBatchNode",lua_cocos2dx_ParticleSystem_setBatchNode);
		tolua_function(tolua_S,"getTangentialAccelVar",lua_cocos2dx_ParticleSystem_getTangentialAccelVar);
		tolua_function(tolua_S,"getEmitterMode",lua_cocos2dx_ParticleSystem_getEmitterMode);
		tolua_function(tolua_S,"setEndSpinVar",lua_cocos2dx_ParticleSystem_setEndSpinVar);
		tolua_function(tolua_S,"initWithFile",lua_cocos2dx_ParticleSystem_initWithFile);
		tolua_function(tolua_S,"getAngleVar",lua_cocos2dx_ParticleSystem_getAngleVar);
		tolua_function(tolua_S,"setStartColor",lua_cocos2dx_ParticleSystem_setStartColor);
		tolua_function(tolua_S,"getRotatePerSecondVar",lua_cocos2dx_ParticleSystem_getRotatePerSecondVar);
		tolua_function(tolua_S,"getEndSize",lua_cocos2dx_ParticleSystem_getEndSize);
		tolua_function(tolua_S,"getLife",lua_cocos2dx_ParticleSystem_getLife);
		tolua_function(tolua_S,"setSpeedVar",lua_cocos2dx_ParticleSystem_setSpeedVar);
		tolua_function(tolua_S,"setAutoRemoveOnFinish",lua_cocos2dx_ParticleSystem_setAutoRemoveOnFinish);
		tolua_function(tolua_S,"setGravity",lua_cocos2dx_ParticleSystem_setGravity);
		tolua_function(tolua_S,"postStep",lua_cocos2dx_ParticleSystem_postStep);
		tolua_function(tolua_S,"setEmissionRate",lua_cocos2dx_ParticleSystem_setEmissionRate);
		tolua_function(tolua_S,"getEndColorVar",lua_cocos2dx_ParticleSystem_getEndColorVar);
		tolua_function(tolua_S,"getRotationIsDir",lua_cocos2dx_ParticleSystem_getRotationIsDir);
		tolua_function(tolua_S,"setScale",lua_cocos2dx_ParticleSystem_setScale);
		tolua_function(tolua_S,"getEmissionRate",lua_cocos2dx_ParticleSystem_getEmissionRate);
		tolua_function(tolua_S,"getEndColor",lua_cocos2dx_ParticleSystem_getEndColor);
		tolua_function(tolua_S,"getLifeVar",lua_cocos2dx_ParticleSystem_getLifeVar);
		tolua_function(tolua_S,"setStartSizeVar",lua_cocos2dx_ParticleSystem_setStartSizeVar);
		tolua_function(tolua_S,"setOpacityModifyRGB",lua_cocos2dx_ParticleSystem_setOpacityModifyRGB);
		tolua_function(tolua_S,"addParticle",lua_cocos2dx_ParticleSystem_addParticle);
		tolua_function(tolua_S,"getStartRadius",lua_cocos2dx_ParticleSystem_getStartRadius);
		tolua_function(tolua_S,"getParticleCount",lua_cocos2dx_ParticleSystem_getParticleCount);
		tolua_function(tolua_S,"getStartRadiusVar",lua_cocos2dx_ParticleSystem_getStartRadiusVar);
		tolua_function(tolua_S,"setStartColorVar",lua_cocos2dx_ParticleSystem_setStartColorVar);
		tolua_function(tolua_S,"setEndSpin",lua_cocos2dx_ParticleSystem_setEndSpin);
		tolua_function(tolua_S,"update",lua_cocos2dx_ParticleSystem_update);
		tolua_function(tolua_S,"setRadialAccel",lua_cocos2dx_ParticleSystem_setRadialAccel);
		tolua_function(tolua_S,"initWithDictionary",lua_cocos2dx_ParticleSystem_initWithDictionary);
		tolua_function(tolua_S,"isAutoRemoveOnFinish",lua_cocos2dx_ParticleSystem_isAutoRemoveOnFinish);
		tolua_function(tolua_S,"getTotalParticles",lua_cocos2dx_ParticleSystem_getTotalParticles);
		tolua_function(tolua_S,"setStartRadiusVar",lua_cocos2dx_ParticleSystem_setStartRadiusVar);
		tolua_function(tolua_S,"getEndRadiusVar",lua_cocos2dx_ParticleSystem_getEndRadiusVar);
		tolua_function(tolua_S,"getGravity",lua_cocos2dx_ParticleSystem_getGravity);
		tolua_function(tolua_S,"new",lua_cocos2dx_ParticleSystem_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_ParticleSystem_create);
		tolua_function(tolua_S,"createWithTotalParticles", lua_cocos2dx_ParticleSystem_createWithTotalParticles);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_ParticleSystemQuad_initTexCoordsWithRect(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystemQuad* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystemQuad",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystemQuad*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystemQuad_initTexCoordsWithRect'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Rect arg0;
		ok &= luaval_to_rect(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->initTexCoordsWithRect(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystemQuad_initTexCoordsWithRect'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystemQuad_setTextureWithRect(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystemQuad* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystemQuad",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystemQuad*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystemQuad_setTextureWithRect'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		cocos2d::Texture2D* arg0;
		cocos2d::Rect arg1;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Texture2D",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Texture2D*)tolua_tousertype(tolua_S,2,0);
		};
		ok &= luaval_to_rect(tolua_S, 3, &arg1);
		if(!ok)
			return 0;
		cobj->setTextureWithRect(arg0, arg1);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystemQuad_setTextureWithRect'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystemQuad_initIndices(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystemQuad* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystemQuad",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystemQuad*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystemQuad_initIndices'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->initIndices();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystemQuad_initIndices'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystemQuad_setDisplayFrame(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystemQuad* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSystemQuad",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSystemQuad*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSystemQuad_setDisplayFrame'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::SpriteFrame* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"SpriteFrame",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::SpriteFrame*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->setDisplayFrame(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystemQuad_setDisplayFrame'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystemQuad_create(lua_State* tolua_S)
{
	int argc = 0;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"ParticleSystemQuad",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S)-1;

	do {
		if (argc == 1) {
			const char* arg0;
			std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
			if (!ok) { ok = true; break; }
			cocos2d::ParticleSystemQuad* ret = cocos2d::ParticleSystemQuad::create(arg0);
			tolua_pushusertype(tolua_S,ret,"ParticleSystemQuad");
			return 1;
		}
	} while (0);
	do {
		if (argc == 0) {
			cocos2d::ParticleSystemQuad* ret = cocos2d::ParticleSystemQuad::create();
			tolua_pushusertype(tolua_S,ret,"ParticleSystemQuad");
			return 1;
		}
	} while (0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystemQuad_create'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSystemQuad_createWithTotalParticles(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"ParticleSystemQuad",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 1) {
		unsigned int arg0;
		ok &= luaval_to_uint32(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cocos2d::ParticleSystemQuad* ret = cocos2d::ParticleSystemQuad::createWithTotalParticles(arg0);
		tolua_pushusertype(tolua_S,ret,"ParticleSystemQuad");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystemQuad_createWithTotalParticles'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_ParticleSystemQuad_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSystemQuad* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::ParticleSystemQuad();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"ParticleSystemQuad");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSystemQuad_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_ParticleSystemQuad_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (ParticleSystemQuad)");
	return 0;
}

int lua_register_cocos2dx_ParticleSystemQuad(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"ParticleSystemQuad");
	tolua_cclass(tolua_S,"ParticleSystemQuad","ParticleSystemQuad","ParticleSystem",NULL);

	tolua_beginmodule(tolua_S,"ParticleSystemQuad");
		tolua_function(tolua_S,"initTexCoordsWithRect",lua_cocos2dx_ParticleSystemQuad_initTexCoordsWithRect);
		tolua_function(tolua_S,"setTextureWithRect",lua_cocos2dx_ParticleSystemQuad_setTextureWithRect);
		tolua_function(tolua_S,"initIndices",lua_cocos2dx_ParticleSystemQuad_initIndices);
		tolua_function(tolua_S,"setDisplayFrame",lua_cocos2dx_ParticleSystemQuad_setDisplayFrame);
		tolua_function(tolua_S,"new",lua_cocos2dx_ParticleSystemQuad_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_ParticleSystemQuad_create);
		tolua_function(tolua_S,"createWithTotalParticles", lua_cocos2dx_ParticleSystemQuad_createWithTotalParticles);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_ParticleFire_init(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleFire* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleFire",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleFire*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleFire_init'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->init();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleFire_init'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleFire_initWithTotalParticles(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleFire* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleFire",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleFire*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleFire_initWithTotalParticles'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		unsigned int arg0;
		ok &= luaval_to_uint32(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		bool ret = cobj->initWithTotalParticles(arg0);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleFire_initWithTotalParticles'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleFire_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"ParticleFire",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 0) {
		if(!ok)
			return 0;
		cocos2d::ParticleFire* ret = cocos2d::ParticleFire::create();
		tolua_pushusertype(tolua_S,ret,"ParticleFire");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleFire_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_ParticleFire_createWithTotalParticles(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"ParticleFire",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 1) {
		unsigned int arg0;
		ok &= luaval_to_uint32(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cocos2d::ParticleFire* ret = cocos2d::ParticleFire::createWithTotalParticles(arg0);
		tolua_pushusertype(tolua_S,ret,"ParticleFire");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleFire_createWithTotalParticles'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_ParticleFire_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleFire* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::ParticleFire();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"ParticleFire");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleFire_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_ParticleFire_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (ParticleFire)");
	return 0;
}

int lua_register_cocos2dx_ParticleFire(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"ParticleFire");
	tolua_cclass(tolua_S,"ParticleFire","ParticleFire","ParticleSystemQuad",NULL);

	tolua_beginmodule(tolua_S,"ParticleFire");
		tolua_function(tolua_S,"init",lua_cocos2dx_ParticleFire_init);
		tolua_function(tolua_S,"initWithTotalParticles",lua_cocos2dx_ParticleFire_initWithTotalParticles);
		tolua_function(tolua_S,"new",lua_cocos2dx_ParticleFire_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_ParticleFire_create);
		tolua_function(tolua_S,"createWithTotalParticles", lua_cocos2dx_ParticleFire_createWithTotalParticles);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_ParticleFireworks_init(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleFireworks* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleFireworks",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleFireworks*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleFireworks_init'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->init();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleFireworks_init'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleFireworks_initWithTotalParticles(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleFireworks* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleFireworks",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleFireworks*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleFireworks_initWithTotalParticles'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		unsigned int arg0;
		ok &= luaval_to_uint32(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		bool ret = cobj->initWithTotalParticles(arg0);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleFireworks_initWithTotalParticles'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleFireworks_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"ParticleFireworks",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 0) {
		if(!ok)
			return 0;
		cocos2d::ParticleFireworks* ret = cocos2d::ParticleFireworks::create();
		tolua_pushusertype(tolua_S,ret,"ParticleFireworks");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleFireworks_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_ParticleFireworks_createWithTotalParticles(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"ParticleFireworks",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 1) {
		unsigned int arg0;
		ok &= luaval_to_uint32(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cocos2d::ParticleFireworks* ret = cocos2d::ParticleFireworks::createWithTotalParticles(arg0);
		tolua_pushusertype(tolua_S,ret,"ParticleFireworks");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleFireworks_createWithTotalParticles'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_ParticleFireworks_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleFireworks* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::ParticleFireworks();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"ParticleFireworks");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleFireworks_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_ParticleFireworks_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (ParticleFireworks)");
	return 0;
}

int lua_register_cocos2dx_ParticleFireworks(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"ParticleFireworks");
	tolua_cclass(tolua_S,"ParticleFireworks","ParticleFireworks","ParticleSystemQuad",NULL);

	tolua_beginmodule(tolua_S,"ParticleFireworks");
		tolua_function(tolua_S,"init",lua_cocos2dx_ParticleFireworks_init);
		tolua_function(tolua_S,"initWithTotalParticles",lua_cocos2dx_ParticleFireworks_initWithTotalParticles);
		tolua_function(tolua_S,"new",lua_cocos2dx_ParticleFireworks_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_ParticleFireworks_create);
		tolua_function(tolua_S,"createWithTotalParticles", lua_cocos2dx_ParticleFireworks_createWithTotalParticles);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_ParticleSun_init(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSun* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSun",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSun*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSun_init'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->init();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSun_init'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSun_initWithTotalParticles(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSun* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSun",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSun*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSun_initWithTotalParticles'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		unsigned int arg0;
		ok &= luaval_to_uint32(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		bool ret = cobj->initWithTotalParticles(arg0);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSun_initWithTotalParticles'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSun_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"ParticleSun",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 0) {
		if(!ok)
			return 0;
		cocos2d::ParticleSun* ret = cocos2d::ParticleSun::create();
		tolua_pushusertype(tolua_S,ret,"ParticleSun");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSun_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_ParticleSun_createWithTotalParticles(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"ParticleSun",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 1) {
		unsigned int arg0;
		ok &= luaval_to_uint32(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cocos2d::ParticleSun* ret = cocos2d::ParticleSun::createWithTotalParticles(arg0);
		tolua_pushusertype(tolua_S,ret,"ParticleSun");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSun_createWithTotalParticles'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_ParticleSun_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSun* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::ParticleSun();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"ParticleSun");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSun_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_ParticleSun_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (ParticleSun)");
	return 0;
}

int lua_register_cocos2dx_ParticleSun(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"ParticleSun");
	tolua_cclass(tolua_S,"ParticleSun","ParticleSun","ParticleSystemQuad",NULL);

	tolua_beginmodule(tolua_S,"ParticleSun");
		tolua_function(tolua_S,"init",lua_cocos2dx_ParticleSun_init);
		tolua_function(tolua_S,"initWithTotalParticles",lua_cocos2dx_ParticleSun_initWithTotalParticles);
		tolua_function(tolua_S,"new",lua_cocos2dx_ParticleSun_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_ParticleSun_create);
		tolua_function(tolua_S,"createWithTotalParticles", lua_cocos2dx_ParticleSun_createWithTotalParticles);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_ParticleGalaxy_init(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleGalaxy* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleGalaxy",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleGalaxy*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleGalaxy_init'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->init();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleGalaxy_init'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleGalaxy_initWithTotalParticles(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleGalaxy* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleGalaxy",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleGalaxy*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleGalaxy_initWithTotalParticles'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		unsigned int arg0;
		ok &= luaval_to_uint32(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		bool ret = cobj->initWithTotalParticles(arg0);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleGalaxy_initWithTotalParticles'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleGalaxy_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"ParticleGalaxy",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 0) {
		if(!ok)
			return 0;
		cocos2d::ParticleGalaxy* ret = cocos2d::ParticleGalaxy::create();
		tolua_pushusertype(tolua_S,ret,"ParticleGalaxy");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleGalaxy_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_ParticleGalaxy_createWithTotalParticles(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"ParticleGalaxy",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 1) {
		unsigned int arg0;
		ok &= luaval_to_uint32(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cocos2d::ParticleGalaxy* ret = cocos2d::ParticleGalaxy::createWithTotalParticles(arg0);
		tolua_pushusertype(tolua_S,ret,"ParticleGalaxy");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleGalaxy_createWithTotalParticles'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_ParticleGalaxy_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleGalaxy* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::ParticleGalaxy();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"ParticleGalaxy");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleGalaxy_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_ParticleGalaxy_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (ParticleGalaxy)");
	return 0;
}

int lua_register_cocos2dx_ParticleGalaxy(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"ParticleGalaxy");
	tolua_cclass(tolua_S,"ParticleGalaxy","ParticleGalaxy","ParticleSystemQuad",NULL);

	tolua_beginmodule(tolua_S,"ParticleGalaxy");
		tolua_function(tolua_S,"init",lua_cocos2dx_ParticleGalaxy_init);
		tolua_function(tolua_S,"initWithTotalParticles",lua_cocos2dx_ParticleGalaxy_initWithTotalParticles);
		tolua_function(tolua_S,"new",lua_cocos2dx_ParticleGalaxy_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_ParticleGalaxy_create);
		tolua_function(tolua_S,"createWithTotalParticles", lua_cocos2dx_ParticleGalaxy_createWithTotalParticles);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_ParticleFlower_init(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleFlower* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleFlower",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleFlower*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleFlower_init'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->init();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleFlower_init'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleFlower_initWithTotalParticles(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleFlower* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleFlower",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleFlower*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleFlower_initWithTotalParticles'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		unsigned int arg0;
		ok &= luaval_to_uint32(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		bool ret = cobj->initWithTotalParticles(arg0);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleFlower_initWithTotalParticles'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleFlower_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"ParticleFlower",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 0) {
		if(!ok)
			return 0;
		cocos2d::ParticleFlower* ret = cocos2d::ParticleFlower::create();
		tolua_pushusertype(tolua_S,ret,"ParticleFlower");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleFlower_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_ParticleFlower_createWithTotalParticles(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"ParticleFlower",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 1) {
		unsigned int arg0;
		ok &= luaval_to_uint32(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cocos2d::ParticleFlower* ret = cocos2d::ParticleFlower::createWithTotalParticles(arg0);
		tolua_pushusertype(tolua_S,ret,"ParticleFlower");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleFlower_createWithTotalParticles'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_ParticleFlower_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleFlower* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::ParticleFlower();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"ParticleFlower");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleFlower_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_ParticleFlower_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (ParticleFlower)");
	return 0;
}

int lua_register_cocos2dx_ParticleFlower(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"ParticleFlower");
	tolua_cclass(tolua_S,"ParticleFlower","ParticleFlower","ParticleSystemQuad",NULL);

	tolua_beginmodule(tolua_S,"ParticleFlower");
		tolua_function(tolua_S,"init",lua_cocos2dx_ParticleFlower_init);
		tolua_function(tolua_S,"initWithTotalParticles",lua_cocos2dx_ParticleFlower_initWithTotalParticles);
		tolua_function(tolua_S,"new",lua_cocos2dx_ParticleFlower_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_ParticleFlower_create);
		tolua_function(tolua_S,"createWithTotalParticles", lua_cocos2dx_ParticleFlower_createWithTotalParticles);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_ParticleMeteor_init(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleMeteor* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleMeteor",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleMeteor*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleMeteor_init'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->init();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleMeteor_init'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleMeteor_initWithTotalParticles(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleMeteor* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleMeteor",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleMeteor*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleMeteor_initWithTotalParticles'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		unsigned int arg0;
		ok &= luaval_to_uint32(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		bool ret = cobj->initWithTotalParticles(arg0);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleMeteor_initWithTotalParticles'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleMeteor_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"ParticleMeteor",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 0) {
		if(!ok)
			return 0;
		cocos2d::ParticleMeteor* ret = cocos2d::ParticleMeteor::create();
		tolua_pushusertype(tolua_S,ret,"ParticleMeteor");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleMeteor_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_ParticleMeteor_createWithTotalParticles(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"ParticleMeteor",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 1) {
		unsigned int arg0;
		ok &= luaval_to_uint32(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cocos2d::ParticleMeteor* ret = cocos2d::ParticleMeteor::createWithTotalParticles(arg0);
		tolua_pushusertype(tolua_S,ret,"ParticleMeteor");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleMeteor_createWithTotalParticles'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_ParticleMeteor_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleMeteor* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::ParticleMeteor();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"ParticleMeteor");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleMeteor_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_ParticleMeteor_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (ParticleMeteor)");
	return 0;
}

int lua_register_cocos2dx_ParticleMeteor(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"ParticleMeteor");
	tolua_cclass(tolua_S,"ParticleMeteor","ParticleMeteor","ParticleSystemQuad",NULL);

	tolua_beginmodule(tolua_S,"ParticleMeteor");
		tolua_function(tolua_S,"init",lua_cocos2dx_ParticleMeteor_init);
		tolua_function(tolua_S,"initWithTotalParticles",lua_cocos2dx_ParticleMeteor_initWithTotalParticles);
		tolua_function(tolua_S,"new",lua_cocos2dx_ParticleMeteor_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_ParticleMeteor_create);
		tolua_function(tolua_S,"createWithTotalParticles", lua_cocos2dx_ParticleMeteor_createWithTotalParticles);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_ParticleSpiral_init(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSpiral* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSpiral",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSpiral*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSpiral_init'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->init();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSpiral_init'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSpiral_initWithTotalParticles(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSpiral* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSpiral",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSpiral*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSpiral_initWithTotalParticles'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		unsigned int arg0;
		ok &= luaval_to_uint32(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		bool ret = cobj->initWithTotalParticles(arg0);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSpiral_initWithTotalParticles'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSpiral_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"ParticleSpiral",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 0) {
		if(!ok)
			return 0;
		cocos2d::ParticleSpiral* ret = cocos2d::ParticleSpiral::create();
		tolua_pushusertype(tolua_S,ret,"ParticleSpiral");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSpiral_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_ParticleSpiral_createWithTotalParticles(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"ParticleSpiral",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 1) {
		unsigned int arg0;
		ok &= luaval_to_uint32(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cocos2d::ParticleSpiral* ret = cocos2d::ParticleSpiral::createWithTotalParticles(arg0);
		tolua_pushusertype(tolua_S,ret,"ParticleSpiral");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSpiral_createWithTotalParticles'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_ParticleSpiral_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSpiral* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::ParticleSpiral();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"ParticleSpiral");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSpiral_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_ParticleSpiral_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (ParticleSpiral)");
	return 0;
}

int lua_register_cocos2dx_ParticleSpiral(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"ParticleSpiral");
	tolua_cclass(tolua_S,"ParticleSpiral","ParticleSpiral","ParticleSystemQuad",NULL);

	tolua_beginmodule(tolua_S,"ParticleSpiral");
		tolua_function(tolua_S,"init",lua_cocos2dx_ParticleSpiral_init);
		tolua_function(tolua_S,"initWithTotalParticles",lua_cocos2dx_ParticleSpiral_initWithTotalParticles);
		tolua_function(tolua_S,"new",lua_cocos2dx_ParticleSpiral_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_ParticleSpiral_create);
		tolua_function(tolua_S,"createWithTotalParticles", lua_cocos2dx_ParticleSpiral_createWithTotalParticles);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_ParticleExplosion_init(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleExplosion* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleExplosion",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleExplosion*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleExplosion_init'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->init();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleExplosion_init'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleExplosion_initWithTotalParticles(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleExplosion* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleExplosion",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleExplosion*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleExplosion_initWithTotalParticles'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		unsigned int arg0;
		ok &= luaval_to_uint32(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		bool ret = cobj->initWithTotalParticles(arg0);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleExplosion_initWithTotalParticles'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleExplosion_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"ParticleExplosion",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 0) {
		if(!ok)
			return 0;
		cocos2d::ParticleExplosion* ret = cocos2d::ParticleExplosion::create();
		tolua_pushusertype(tolua_S,ret,"ParticleExplosion");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleExplosion_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_ParticleExplosion_createWithTotalParticles(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"ParticleExplosion",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 1) {
		unsigned int arg0;
		ok &= luaval_to_uint32(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cocos2d::ParticleExplosion* ret = cocos2d::ParticleExplosion::createWithTotalParticles(arg0);
		tolua_pushusertype(tolua_S,ret,"ParticleExplosion");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleExplosion_createWithTotalParticles'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_ParticleExplosion_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleExplosion* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::ParticleExplosion();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"ParticleExplosion");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleExplosion_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_ParticleExplosion_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (ParticleExplosion)");
	return 0;
}

int lua_register_cocos2dx_ParticleExplosion(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"ParticleExplosion");
	tolua_cclass(tolua_S,"ParticleExplosion","ParticleExplosion","ParticleSystemQuad",NULL);

	tolua_beginmodule(tolua_S,"ParticleExplosion");
		tolua_function(tolua_S,"init",lua_cocos2dx_ParticleExplosion_init);
		tolua_function(tolua_S,"initWithTotalParticles",lua_cocos2dx_ParticleExplosion_initWithTotalParticles);
		tolua_function(tolua_S,"new",lua_cocos2dx_ParticleExplosion_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_ParticleExplosion_create);
		tolua_function(tolua_S,"createWithTotalParticles", lua_cocos2dx_ParticleExplosion_createWithTotalParticles);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_ParticleSmoke_init(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSmoke* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSmoke",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSmoke*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSmoke_init'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->init();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSmoke_init'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSmoke_initWithTotalParticles(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSmoke* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSmoke",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSmoke*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSmoke_initWithTotalParticles'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		unsigned int arg0;
		ok &= luaval_to_uint32(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		bool ret = cobj->initWithTotalParticles(arg0);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSmoke_initWithTotalParticles'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSmoke_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"ParticleSmoke",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 0) {
		if(!ok)
			return 0;
		cocos2d::ParticleSmoke* ret = cocos2d::ParticleSmoke::create();
		tolua_pushusertype(tolua_S,ret,"ParticleSmoke");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSmoke_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_ParticleSmoke_createWithTotalParticles(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"ParticleSmoke",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 1) {
		unsigned int arg0;
		ok &= luaval_to_uint32(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cocos2d::ParticleSmoke* ret = cocos2d::ParticleSmoke::createWithTotalParticles(arg0);
		tolua_pushusertype(tolua_S,ret,"ParticleSmoke");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSmoke_createWithTotalParticles'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_ParticleSmoke_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSmoke* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::ParticleSmoke();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"ParticleSmoke");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSmoke_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_ParticleSmoke_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (ParticleSmoke)");
	return 0;
}

int lua_register_cocos2dx_ParticleSmoke(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"ParticleSmoke");
	tolua_cclass(tolua_S,"ParticleSmoke","ParticleSmoke","ParticleSystemQuad",NULL);

	tolua_beginmodule(tolua_S,"ParticleSmoke");
		tolua_function(tolua_S,"init",lua_cocos2dx_ParticleSmoke_init);
		tolua_function(tolua_S,"initWithTotalParticles",lua_cocos2dx_ParticleSmoke_initWithTotalParticles);
		tolua_function(tolua_S,"new",lua_cocos2dx_ParticleSmoke_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_ParticleSmoke_create);
		tolua_function(tolua_S,"createWithTotalParticles", lua_cocos2dx_ParticleSmoke_createWithTotalParticles);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_ParticleSnow_init(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSnow* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSnow",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSnow*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSnow_init'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->init();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSnow_init'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSnow_initWithTotalParticles(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSnow* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleSnow",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleSnow*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleSnow_initWithTotalParticles'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		unsigned int arg0;
		ok &= luaval_to_uint32(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		bool ret = cobj->initWithTotalParticles(arg0);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSnow_initWithTotalParticles'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleSnow_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"ParticleSnow",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 0) {
		if(!ok)
			return 0;
		cocos2d::ParticleSnow* ret = cocos2d::ParticleSnow::create();
		tolua_pushusertype(tolua_S,ret,"ParticleSnow");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSnow_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_ParticleSnow_createWithTotalParticles(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"ParticleSnow",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 1) {
		unsigned int arg0;
		ok &= luaval_to_uint32(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cocos2d::ParticleSnow* ret = cocos2d::ParticleSnow::createWithTotalParticles(arg0);
		tolua_pushusertype(tolua_S,ret,"ParticleSnow");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSnow_createWithTotalParticles'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_ParticleSnow_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleSnow* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::ParticleSnow();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"ParticleSnow");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleSnow_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_ParticleSnow_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (ParticleSnow)");
	return 0;
}

int lua_register_cocos2dx_ParticleSnow(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"ParticleSnow");
	tolua_cclass(tolua_S,"ParticleSnow","ParticleSnow","ParticleSystemQuad",NULL);

	tolua_beginmodule(tolua_S,"ParticleSnow");
		tolua_function(tolua_S,"init",lua_cocos2dx_ParticleSnow_init);
		tolua_function(tolua_S,"initWithTotalParticles",lua_cocos2dx_ParticleSnow_initWithTotalParticles);
		tolua_function(tolua_S,"new",lua_cocos2dx_ParticleSnow_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_ParticleSnow_create);
		tolua_function(tolua_S,"createWithTotalParticles", lua_cocos2dx_ParticleSnow_createWithTotalParticles);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_ParticleRain_init(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleRain* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleRain",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleRain*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleRain_init'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->init();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleRain_init'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleRain_initWithTotalParticles(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleRain* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParticleRain",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParticleRain*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParticleRain_initWithTotalParticles'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		unsigned int arg0;
		ok &= luaval_to_uint32(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		bool ret = cobj->initWithTotalParticles(arg0);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleRain_initWithTotalParticles'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParticleRain_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"ParticleRain",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 0) {
		if(!ok)
			return 0;
		cocos2d::ParticleRain* ret = cocos2d::ParticleRain::create();
		tolua_pushusertype(tolua_S,ret,"ParticleRain");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleRain_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_ParticleRain_createWithTotalParticles(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"ParticleRain",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 1) {
		unsigned int arg0;
		ok &= luaval_to_uint32(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cocos2d::ParticleRain* ret = cocos2d::ParticleRain::createWithTotalParticles(arg0);
		tolua_pushusertype(tolua_S,ret,"ParticleRain");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleRain_createWithTotalParticles'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_ParticleRain_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParticleRain* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::ParticleRain();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"ParticleRain");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParticleRain_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_ParticleRain_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (ParticleRain)");
	return 0;
}

int lua_register_cocos2dx_ParticleRain(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"ParticleRain");
	tolua_cclass(tolua_S,"ParticleRain","ParticleRain","ParticleSystemQuad",NULL);

	tolua_beginmodule(tolua_S,"ParticleRain");
		tolua_function(tolua_S,"init",lua_cocos2dx_ParticleRain_init);
		tolua_function(tolua_S,"initWithTotalParticles",lua_cocos2dx_ParticleRain_initWithTotalParticles);
		tolua_function(tolua_S,"new",lua_cocos2dx_ParticleRain_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_ParticleRain_create);
		tolua_function(tolua_S,"createWithTotalParticles", lua_cocos2dx_ParticleRain_createWithTotalParticles);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_FileUtils_isFileExist(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::FileUtils* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"FileUtils",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::FileUtils*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_FileUtils_isFileExist'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		std::string arg0;
		ok &= luaval_to_std_string(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		bool ret = cobj->isFileExist(arg0);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FileUtils_isFileExist'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_FileUtils_isPopupNotify(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::FileUtils* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"FileUtils",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::FileUtils*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_FileUtils_isPopupNotify'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->isPopupNotify();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FileUtils_isPopupNotify'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_FileUtils_purgeCachedEntries(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::FileUtils* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"FileUtils",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::FileUtils*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_FileUtils_purgeCachedEntries'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->purgeCachedEntries();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FileUtils_purgeCachedEntries'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_FileUtils_fullPathFromRelativeFile(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::FileUtils* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"FileUtils",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::FileUtils*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_FileUtils_fullPathFromRelativeFile'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		const char* arg0;
		const char* arg1;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp); arg1 = arg1_tmp.c_str();
		if(!ok)
			return 0;
		const char* ret = cobj->fullPathFromRelativeFile(arg0, arg1);
		tolua_pushstring(tolua_S,(const char*)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FileUtils_fullPathFromRelativeFile'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_FileUtils_getFileData(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::FileUtils* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"FileUtils",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::FileUtils*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_FileUtils_getFileData'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 3) {
		const char* arg0;
		const char* arg1;
		unsigned long* arg2;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp); arg1 = arg1_tmp.c_str();
		#pragma warning NO CONVERSION TO NATIVE FOR unsigned long*;
		if(!ok)
			return 0;
		unsigned char* ret = cobj->getFileData(arg0, arg1, arg2);
		#pragma warning NO CONVERSION FROM NATIVE FOR unsigned char*;
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 3);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FileUtils_getFileData'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_FileUtils_setFilenameLookupDictionary(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::FileUtils* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"FileUtils",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::FileUtils*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_FileUtils_setFilenameLookupDictionary'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Dictionary* arg0;
		ok &= luaval_to_dictionary(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->setFilenameLookupDictionary(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FileUtils_setFilenameLookupDictionary'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_FileUtils_addSearchResolutionsOrder(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::FileUtils* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"FileUtils",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::FileUtils*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_FileUtils_addSearchResolutionsOrder'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		const char* arg0;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		if(!ok)
			return 0;
		cobj->addSearchResolutionsOrder(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FileUtils_addSearchResolutionsOrder'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_FileUtils_getFileDataFromZip(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::FileUtils* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"FileUtils",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::FileUtils*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_FileUtils_getFileDataFromZip'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 3) {
		const char* arg0;
		const char* arg1;
		unsigned long* arg2;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp); arg1 = arg1_tmp.c_str();
		#pragma warning NO CONVERSION TO NATIVE FOR unsigned long*;
		if(!ok)
			return 0;
		unsigned char* ret = cobj->getFileDataFromZip(arg0, arg1, arg2);
		#pragma warning NO CONVERSION FROM NATIVE FOR unsigned char*;
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 3);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FileUtils_getFileDataFromZip'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_FileUtils_fullPathForFilename(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::FileUtils* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"FileUtils",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::FileUtils*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_FileUtils_fullPathForFilename'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		const char* arg0;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		if(!ok)
			return 0;
		std::string ret = cobj->fullPathForFilename(arg0);
		tolua_pushcppstring(tolua_S,ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FileUtils_fullPathForFilename'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_FileUtils_isAbsolutePath(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::FileUtils* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"FileUtils",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::FileUtils*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_FileUtils_isAbsolutePath'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		std::string arg0;
		ok &= luaval_to_std_string(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		bool ret = cobj->isAbsolutePath(arg0);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FileUtils_isAbsolutePath'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_FileUtils_getWritablePath(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::FileUtils* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"FileUtils",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::FileUtils*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_FileUtils_getWritablePath'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		std::string ret = cobj->getWritablePath();
		tolua_pushcppstring(tolua_S,ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FileUtils_getWritablePath'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_FileUtils_addSearchPath(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::FileUtils* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"FileUtils",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::FileUtils*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_FileUtils_addSearchPath'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		const char* arg0;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		if(!ok)
			return 0;
		cobj->addSearchPath(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FileUtils_addSearchPath'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_FileUtils_setPopupNotify(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::FileUtils* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"FileUtils",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::FileUtils*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_FileUtils_setPopupNotify'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setPopupNotify(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FileUtils_setPopupNotify'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_FileUtils_loadFilenameLookupDictionaryFromFile(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::FileUtils* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"FileUtils",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::FileUtils*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_FileUtils_loadFilenameLookupDictionaryFromFile'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		const char* arg0;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		if(!ok)
			return 0;
		cobj->loadFilenameLookupDictionaryFromFile(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FileUtils_loadFilenameLookupDictionaryFromFile'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_FileUtils_destroyInstance(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"FileUtils",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 0) {
		if(!ok)
			return 0;
		cocos2d::FileUtils::destroyInstance();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FileUtils_destroyInstance'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_FileUtils_getInstance(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"FileUtils",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 0) {
		if(!ok)
			return 0;
		cocos2d::FileUtils* ret = cocos2d::FileUtils::getInstance();
		tolua_pushusertype(tolua_S,ret,"FileUtils");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_FileUtils_getInstance'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_FileUtils_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (FileUtils)");
	return 0;
}

int lua_register_cocos2dx_FileUtils(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"FileUtils");
	tolua_cclass(tolua_S,"FileUtils","FileUtils","",NULL);

	tolua_beginmodule(tolua_S,"FileUtils");
		tolua_function(tolua_S,"isFileExist",lua_cocos2dx_FileUtils_isFileExist);
		tolua_function(tolua_S,"isPopupNotify",lua_cocos2dx_FileUtils_isPopupNotify);
		tolua_function(tolua_S,"purgeCachedEntries",lua_cocos2dx_FileUtils_purgeCachedEntries);
		tolua_function(tolua_S,"fullPathFromRelativeFile",lua_cocos2dx_FileUtils_fullPathFromRelativeFile);
		tolua_function(tolua_S,"getFileData",lua_cocos2dx_FileUtils_getFileData);
		tolua_function(tolua_S,"setFilenameLookupDictionary",lua_cocos2dx_FileUtils_setFilenameLookupDictionary);
		tolua_function(tolua_S,"addSearchResolutionsOrder",lua_cocos2dx_FileUtils_addSearchResolutionsOrder);
		tolua_function(tolua_S,"getFileDataFromZip",lua_cocos2dx_FileUtils_getFileDataFromZip);
		tolua_function(tolua_S,"fullPathForFilename",lua_cocos2dx_FileUtils_fullPathForFilename);
		tolua_function(tolua_S,"isAbsolutePath",lua_cocos2dx_FileUtils_isAbsolutePath);
		tolua_function(tolua_S,"getWritablePath",lua_cocos2dx_FileUtils_getWritablePath);
		tolua_function(tolua_S,"addSearchPath",lua_cocos2dx_FileUtils_addSearchPath);
		tolua_function(tolua_S,"setPopupNotify",lua_cocos2dx_FileUtils_setPopupNotify);
		tolua_function(tolua_S,"loadFilenameLookup",lua_cocos2dx_FileUtils_loadFilenameLookupDictionaryFromFile);
		tolua_function(tolua_S,"destroyInstance", lua_cocos2dx_FileUtils_destroyInstance);
		tolua_function(tolua_S,"getInstance", lua_cocos2dx_FileUtils_getInstance);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_Application_getTargetPlatform(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Application* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Application",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Application*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Application_getTargetPlatform'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		int ret = (int)cobj->getTargetPlatform();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Application_getTargetPlatform'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Application_setAnimationInterval(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Application* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Application",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Application*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Application_setAnimationInterval'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setAnimationInterval(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Application_setAnimationInterval'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Application_getCurrentLanguage(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Application* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Application",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Application*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Application_getCurrentLanguage'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		int ret = (int)cobj->getCurrentLanguage();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Application_getCurrentLanguage'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Application_getInstance(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"Application",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 0) {
		if(!ok)
			return 0;
		cocos2d::Application* ret = cocos2d::Application::getInstance();
		tolua_pushusertype(tolua_S,ret,"Application");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Application_getInstance'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_Application_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (Application)");
	return 0;
}

int lua_register_cocos2dx_Application(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"Application");
	tolua_cclass(tolua_S,"Application","Application","",NULL);

	tolua_beginmodule(tolua_S,"Application");
		tolua_function(tolua_S,"getTargetPlatform",lua_cocos2dx_Application_getTargetPlatform);
		tolua_function(tolua_S,"setAnimationInterval",lua_cocos2dx_Application_setAnimationInterval);
		tolua_function(tolua_S,"getCurrentLanguage",lua_cocos2dx_Application_getCurrentLanguage);
		tolua_function(tolua_S,"getInstance", lua_cocos2dx_Application_getInstance);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_ShaderCache_reloadDefaultShaders(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ShaderCache* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ShaderCache",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ShaderCache*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ShaderCache_reloadDefaultShaders'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->reloadDefaultShaders();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ShaderCache_reloadDefaultShaders'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ShaderCache_addProgram(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ShaderCache* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ShaderCache",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ShaderCache*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ShaderCache_addProgram'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		cocos2d::GLProgram* arg0;
		const char* arg1;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"GLProgram",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::GLProgram*)tolua_tousertype(tolua_S,2,0);
		};
		std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp); arg1 = arg1_tmp.c_str();
		if(!ok)
			return 0;
		cobj->addProgram(arg0, arg1);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ShaderCache_addProgram'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ShaderCache_programForKey(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ShaderCache* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ShaderCache",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ShaderCache*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ShaderCache_programForKey'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		const char* arg0;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		if(!ok)
			return 0;
		cocos2d::GLProgram* ret = cobj->programForKey(arg0);
		tolua_pushusertype(tolua_S,ret,"GLProgram");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ShaderCache_programForKey'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ShaderCache_loadDefaultShaders(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ShaderCache* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ShaderCache",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ShaderCache*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ShaderCache_loadDefaultShaders'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->loadDefaultShaders();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ShaderCache_loadDefaultShaders'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ShaderCache_destroyInstance(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"ShaderCache",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 0) {
		if(!ok)
			return 0;
		cocos2d::ShaderCache::destroyInstance();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ShaderCache_destroyInstance'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_ShaderCache_getInstance(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"ShaderCache",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 0) {
		if(!ok)
			return 0;
		cocos2d::ShaderCache* ret = cocos2d::ShaderCache::getInstance();
		tolua_pushusertype(tolua_S,ret,"ShaderCache");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ShaderCache_getInstance'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_ShaderCache_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ShaderCache* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::ShaderCache();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"ShaderCache");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ShaderCache_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_ShaderCache_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (ShaderCache)");
	return 0;
}

int lua_register_cocos2dx_ShaderCache(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"ShaderCache");
	tolua_cclass(tolua_S,"ShaderCache","ShaderCache","",NULL);

	tolua_beginmodule(tolua_S,"ShaderCache");
		tolua_function(tolua_S,"reloadDefaultShaders",lua_cocos2dx_ShaderCache_reloadDefaultShaders);
		tolua_function(tolua_S,"addProgram",lua_cocos2dx_ShaderCache_addProgram);
		tolua_function(tolua_S,"getProgram",lua_cocos2dx_ShaderCache_programForKey);
		tolua_function(tolua_S,"loadDefaultShaders",lua_cocos2dx_ShaderCache_loadDefaultShaders);
		tolua_function(tolua_S,"new",lua_cocos2dx_ShaderCache_constructor);
		tolua_function(tolua_S,"destroyInstance", lua_cocos2dx_ShaderCache_destroyInstance);
		tolua_function(tolua_S,"getInstance", lua_cocos2dx_ShaderCache_getInstance);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_AnimationCache_animationByName(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::AnimationCache* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"AnimationCache",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::AnimationCache*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_AnimationCache_animationByName'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		const char* arg0;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		if(!ok)
			return 0;
		cocos2d::Animation* ret = cobj->animationByName(arg0);
		tolua_pushusertype(tolua_S,ret,"Animation");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_AnimationCache_animationByName'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_AnimationCache_addAnimation(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::AnimationCache* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"AnimationCache",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::AnimationCache*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_AnimationCache_addAnimation'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		cocos2d::Animation* arg0;
		const char* arg1;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Animation",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Animation*)tolua_tousertype(tolua_S,2,0);
		};
		std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp); arg1 = arg1_tmp.c_str();
		if(!ok)
			return 0;
		cobj->addAnimation(arg0, arg1);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_AnimationCache_addAnimation'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_AnimationCache_init(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::AnimationCache* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"AnimationCache",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::AnimationCache*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_AnimationCache_init'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->init();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_AnimationCache_init'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_AnimationCache_addAnimationsWithDictionary(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::AnimationCache* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"AnimationCache",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::AnimationCache*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_AnimationCache_addAnimationsWithDictionary'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Dictionary* arg0;
		ok &= luaval_to_dictionary(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->addAnimationsWithDictionary(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_AnimationCache_addAnimationsWithDictionary'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_AnimationCache_removeAnimationByName(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::AnimationCache* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"AnimationCache",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::AnimationCache*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_AnimationCache_removeAnimationByName'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		const char* arg0;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		if(!ok)
			return 0;
		cobj->removeAnimationByName(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_AnimationCache_removeAnimationByName'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_AnimationCache_addAnimationsWithFile(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::AnimationCache* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"AnimationCache",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::AnimationCache*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_AnimationCache_addAnimationsWithFile'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		const char* arg0;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		if(!ok)
			return 0;
		cobj->addAnimationsWithFile(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_AnimationCache_addAnimationsWithFile'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_AnimationCache_destroyInstance(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"AnimationCache",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 0) {
		if(!ok)
			return 0;
		cocos2d::AnimationCache::destroyInstance();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_AnimationCache_destroyInstance'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_AnimationCache_getInstance(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"AnimationCache",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 0) {
		if(!ok)
			return 0;
		cocos2d::AnimationCache* ret = cocos2d::AnimationCache::getInstance();
		tolua_pushusertype(tolua_S,ret,"AnimationCache");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_AnimationCache_getInstance'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_AnimationCache_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::AnimationCache* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::AnimationCache();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"AnimationCache");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_AnimationCache_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_AnimationCache_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (AnimationCache)");
	return 0;
}

int lua_register_cocos2dx_AnimationCache(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"AnimationCache");
	tolua_cclass(tolua_S,"AnimationCache","AnimationCache","",NULL);

	tolua_beginmodule(tolua_S,"AnimationCache");
		tolua_function(tolua_S,"getAnimation",lua_cocos2dx_AnimationCache_animationByName);
		tolua_function(tolua_S,"addAnimation",lua_cocos2dx_AnimationCache_addAnimation);
		tolua_function(tolua_S,"init",lua_cocos2dx_AnimationCache_init);
		tolua_function(tolua_S,"addAnimationsWithDictionary",lua_cocos2dx_AnimationCache_addAnimationsWithDictionary);
		tolua_function(tolua_S,"removeAnimation",lua_cocos2dx_AnimationCache_removeAnimationByName);
		tolua_function(tolua_S,"addAnimations",lua_cocos2dx_AnimationCache_addAnimationsWithFile);
		tolua_function(tolua_S,"new",lua_cocos2dx_AnimationCache_constructor);
		tolua_function(tolua_S,"destroyInstance", lua_cocos2dx_AnimationCache_destroyInstance);
		tolua_function(tolua_S,"getInstance", lua_cocos2dx_AnimationCache_getInstance);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_SpriteFrameCache_addSpriteFramesWithFile(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SpriteFrameCache* cobj = NULL;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SpriteFrameCache",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SpriteFrameCache*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SpriteFrameCache_addSpriteFramesWithFile'", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	do{
		if (argc == 2) {
			const char* arg0;
			std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();

			if (!ok) { ok = true; break; }
			const char* arg1;
			std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp); arg1 = arg1_tmp.c_str();

			if (!ok) { ok = true; break; }
		cobj->addSpriteFramesWithFile(arg0, arg1);
		return 0;
		}
	}while(0);
	do{
		if (argc == 1) {
			const char* arg0;
			std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();

			if (!ok) { ok = true; break; }
		cobj->addSpriteFramesWithFile(arg0);
		return 0;
		}
	}while(0);
	do{
		if (argc == 2) {
			const char* arg0;
			std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();

			if (!ok) { ok = true; break; }
			cocos2d::Texture2D* arg1;
			#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"Texture2D",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::Texture2D*)tolua_tousertype(tolua_S,3,0);
		};

			if (!ok) { ok = true; break; }
		cobj->addSpriteFramesWithFile(arg0, arg1);
		return 0;
		}
	}while(0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SpriteFrameCache_addSpriteFramesWithFile'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SpriteFrameCache_addSpriteFrame(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SpriteFrameCache* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SpriteFrameCache",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SpriteFrameCache*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SpriteFrameCache_addSpriteFrame'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		cocos2d::SpriteFrame* arg0;
		const char* arg1;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"SpriteFrame",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::SpriteFrame*)tolua_tousertype(tolua_S,2,0);
		};
		std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp); arg1 = arg1_tmp.c_str();
		if(!ok)
			return 0;
		cobj->addSpriteFrame(arg0, arg1);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SpriteFrameCache_addSpriteFrame'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SpriteFrameCache_removeUnusedSpriteFrames(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SpriteFrameCache* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SpriteFrameCache",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SpriteFrameCache*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SpriteFrameCache_removeUnusedSpriteFrames'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->removeUnusedSpriteFrames();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SpriteFrameCache_removeUnusedSpriteFrames'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SpriteFrameCache_getSpriteFrameByName(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SpriteFrameCache* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SpriteFrameCache",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SpriteFrameCache*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SpriteFrameCache_getSpriteFrameByName'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		const char* arg0;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		if(!ok)
			return 0;
		cocos2d::SpriteFrame* ret = cobj->getSpriteFrameByName(arg0);
		tolua_pushusertype(tolua_S,ret,"SpriteFrame");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SpriteFrameCache_getSpriteFrameByName'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SpriteFrameCache_removeSpriteFramesFromFile(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SpriteFrameCache* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SpriteFrameCache",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SpriteFrameCache*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SpriteFrameCache_removeSpriteFramesFromFile'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		const char* arg0;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		if(!ok)
			return 0;
		cobj->removeSpriteFramesFromFile(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SpriteFrameCache_removeSpriteFramesFromFile'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SpriteFrameCache_init(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SpriteFrameCache* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SpriteFrameCache",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SpriteFrameCache*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SpriteFrameCache_init'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->init();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SpriteFrameCache_init'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SpriteFrameCache_removeSpriteFrames(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SpriteFrameCache* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SpriteFrameCache",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SpriteFrameCache*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SpriteFrameCache_removeSpriteFrames'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->removeSpriteFrames();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SpriteFrameCache_removeSpriteFrames'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SpriteFrameCache_removeSpriteFramesFromTexture(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SpriteFrameCache* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SpriteFrameCache",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SpriteFrameCache*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SpriteFrameCache_removeSpriteFramesFromTexture'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Texture2D* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Texture2D",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Texture2D*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->removeSpriteFramesFromTexture(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SpriteFrameCache_removeSpriteFramesFromTexture'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SpriteFrameCache_removeSpriteFrameByName(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::SpriteFrameCache* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SpriteFrameCache",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::SpriteFrameCache*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SpriteFrameCache_removeSpriteFrameByName'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		const char* arg0;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		if(!ok)
			return 0;
		cobj->removeSpriteFrameByName(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SpriteFrameCache_removeSpriteFrameByName'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SpriteFrameCache_destroyInstance(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"SpriteFrameCache",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 0) {
		if(!ok)
			return 0;
		cocos2d::SpriteFrameCache::destroyInstance();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SpriteFrameCache_destroyInstance'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_SpriteFrameCache_getInstance(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"SpriteFrameCache",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 0) {
		if(!ok)
			return 0;
		cocos2d::SpriteFrameCache* ret = cocos2d::SpriteFrameCache::getInstance();
		tolua_pushusertype(tolua_S,ret,"SpriteFrameCache");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SpriteFrameCache_getInstance'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_SpriteFrameCache_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (SpriteFrameCache)");
	return 0;
}

int lua_register_cocos2dx_SpriteFrameCache(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"SpriteFrameCache");
	tolua_cclass(tolua_S,"SpriteFrameCache","SpriteFrameCache","",NULL);

	tolua_beginmodule(tolua_S,"SpriteFrameCache");
		tolua_function(tolua_S,"addSpriteFrames",lua_cocos2dx_SpriteFrameCache_addSpriteFramesWithFile);
		tolua_function(tolua_S,"addSpriteFrame",lua_cocos2dx_SpriteFrameCache_addSpriteFrame);
		tolua_function(tolua_S,"removeUnusedSpriteFrames",lua_cocos2dx_SpriteFrameCache_removeUnusedSpriteFrames);
		tolua_function(tolua_S,"getSpriteFrame",lua_cocos2dx_SpriteFrameCache_getSpriteFrameByName);
		tolua_function(tolua_S,"removeSpriteFramesFromFile",lua_cocos2dx_SpriteFrameCache_removeSpriteFramesFromFile);
		tolua_function(tolua_S,"init",lua_cocos2dx_SpriteFrameCache_init);
		tolua_function(tolua_S,"removeSpriteFrames",lua_cocos2dx_SpriteFrameCache_removeSpriteFrames);
		tolua_function(tolua_S,"removeSpriteFramesFromTexture",lua_cocos2dx_SpriteFrameCache_removeSpriteFramesFromTexture);
		tolua_function(tolua_S,"removeSpriteFrameByName",lua_cocos2dx_SpriteFrameCache_removeSpriteFrameByName);
		tolua_function(tolua_S,"destroyInstance", lua_cocos2dx_SpriteFrameCache_destroyInstance);
		tolua_function(tolua_S,"getInstance", lua_cocos2dx_SpriteFrameCache_getInstance);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_TextureCache_dumpCachedTextureInfo(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TextureCache* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TextureCache",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TextureCache*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TextureCache_dumpCachedTextureInfo'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->dumpCachedTextureInfo();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TextureCache_dumpCachedTextureInfo'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TextureCache_addUIImage(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TextureCache* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TextureCache",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TextureCache*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TextureCache_addUIImage'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		cocos2d::Image* arg0;
		const char* arg1;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Image",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Image*)tolua_tousertype(tolua_S,2,0);
		};
		std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp); arg1 = arg1_tmp.c_str();
		if(!ok)
			return 0;
		cocos2d::Texture2D* ret = cobj->addUIImage(arg0, arg1);
		tolua_pushusertype(tolua_S,ret,"Texture2D");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TextureCache_addUIImage'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TextureCache_removeTextureForKey(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TextureCache* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TextureCache",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TextureCache*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TextureCache_removeTextureForKey'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		const char* arg0;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		if(!ok)
			return 0;
		cobj->removeTextureForKey(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TextureCache_removeTextureForKey'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TextureCache_textureForKey(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TextureCache* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TextureCache",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TextureCache*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TextureCache_textureForKey'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		const char* arg0;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		if(!ok)
			return 0;
		cocos2d::Texture2D* ret = cobj->textureForKey(arg0);
		tolua_pushusertype(tolua_S,ret,"Texture2D");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TextureCache_textureForKey'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TextureCache_snapshotTextures(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TextureCache* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TextureCache",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TextureCache*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TextureCache_snapshotTextures'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Dictionary* ret = cobj->snapshotTextures();
		dictionary_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TextureCache_snapshotTextures'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TextureCache_addImage(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TextureCache* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TextureCache",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TextureCache*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TextureCache_addImage'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		const char* arg0;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		if(!ok)
			return 0;
		cocos2d::Texture2D* ret = cobj->addImage(arg0);
		tolua_pushusertype(tolua_S,ret,"Texture2D");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TextureCache_addImage'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TextureCache_removeAllTextures(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TextureCache* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TextureCache",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TextureCache*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TextureCache_removeAllTextures'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->removeAllTextures();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TextureCache_removeAllTextures'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TextureCache_removeUnusedTextures(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TextureCache* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TextureCache",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TextureCache*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TextureCache_removeUnusedTextures'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->removeUnusedTextures();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TextureCache_removeUnusedTextures'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TextureCache_removeTexture(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TextureCache* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TextureCache",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TextureCache*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TextureCache_removeTexture'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Texture2D* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Texture2D",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Texture2D*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->removeTexture(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TextureCache_removeTexture'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TextureCache_destroyInstance(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"TextureCache",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 0) {
		if(!ok)
			return 0;
		cocos2d::TextureCache::destroyInstance();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TextureCache_destroyInstance'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TextureCache_reloadAllTextures(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"TextureCache",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 0) {
		if(!ok)
			return 0;
		cocos2d::TextureCache::reloadAllTextures();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TextureCache_reloadAllTextures'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TextureCache_getInstance(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"TextureCache",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 0) {
		if(!ok)
			return 0;
		cocos2d::TextureCache* ret = cocos2d::TextureCache::getInstance();
		tolua_pushusertype(tolua_S,ret,"TextureCache");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TextureCache_getInstance'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TextureCache_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TextureCache* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::TextureCache();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"TextureCache");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TextureCache_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TextureCache_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (TextureCache)");
	return 0;
}

int lua_register_cocos2dx_TextureCache(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"TextureCache");
	tolua_cclass(tolua_S,"TextureCache","TextureCache","",NULL);

	tolua_beginmodule(tolua_S,"TextureCache");
		tolua_function(tolua_S,"dumpCachedTextureInfo",lua_cocos2dx_TextureCache_dumpCachedTextureInfo);
		tolua_function(tolua_S,"addUIImage",lua_cocos2dx_TextureCache_addUIImage);
		tolua_function(tolua_S,"removeTextureForKey",lua_cocos2dx_TextureCache_removeTextureForKey);
		tolua_function(tolua_S,"textureForKey",lua_cocos2dx_TextureCache_textureForKey);
		tolua_function(tolua_S,"snapshotTextures",lua_cocos2dx_TextureCache_snapshotTextures);
		tolua_function(tolua_S,"addImage",lua_cocos2dx_TextureCache_addImage);
		tolua_function(tolua_S,"removeAllTextures",lua_cocos2dx_TextureCache_removeAllTextures);
		tolua_function(tolua_S,"removeUnusedTextures",lua_cocos2dx_TextureCache_removeUnusedTextures);
		tolua_function(tolua_S,"removeTexture",lua_cocos2dx_TextureCache_removeTexture);
		tolua_function(tolua_S,"new",lua_cocos2dx_TextureCache_constructor);
		tolua_function(tolua_S,"destroyInstance", lua_cocos2dx_TextureCache_destroyInstance);
		tolua_function(tolua_S,"reloadAllTextures", lua_cocos2dx_TextureCache_reloadAllTextures);
		tolua_function(tolua_S,"getInstance", lua_cocos2dx_TextureCache_getInstance);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_ParallaxNode_addChild(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParallaxNode* cobj = NULL;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParallaxNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParallaxNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParallaxNode_addChild'", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	do{
		if (argc == 3) {
			cocos2d::Node* arg0;
			#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};

			if (!ok) { ok = true; break; }
			int arg1;
			ok &= luaval_to_int32(tolua_S, 3,(int*)&arg1);

			if (!ok) { ok = true; break; }
			int arg2;
			ok &= luaval_to_int32(tolua_S, 4,(int*)&arg2);

			if (!ok) { ok = true; break; }
		cobj->addChild(arg0, arg1, arg2);
		return 0;
		}
	}while(0);
	do{
		if (argc == 4) {
			cocos2d::Node* arg0;
			#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};

			if (!ok) { ok = true; break; }
			int arg1;
			ok &= luaval_to_int32(tolua_S, 3,(int*)&arg1);

			if (!ok) { ok = true; break; }
			cocos2d::Point arg2;
			ok &= luaval_to_point(tolua_S, 4, &arg2);

			if (!ok) { ok = true; break; }
			cocos2d::Point arg3;
			ok &= luaval_to_point(tolua_S, 5, &arg3);

			if (!ok) { ok = true; break; }
		cobj->addChild(arg0, arg1, arg2, arg3);
		return 0;
		}
	}while(0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 4);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParallaxNode_addChild'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParallaxNode_visit(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParallaxNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParallaxNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParallaxNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParallaxNode_visit'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->visit();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParallaxNode_visit'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParallaxNode_removeAllChildrenWithCleanup(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParallaxNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParallaxNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParallaxNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParallaxNode_removeAllChildrenWithCleanup'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->removeAllChildrenWithCleanup(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParallaxNode_removeAllChildrenWithCleanup'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParallaxNode_removeChild(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParallaxNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParallaxNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParallaxNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParallaxNode_removeChild'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		cocos2d::Node* arg0;
		bool arg1;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		ok &= luaval_to_boolean(tolua_S, 3,&arg1);
		if(!ok)
			return 0;
		cobj->removeChild(arg0, arg1);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParallaxNode_removeChild'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParallaxNode_getParallaxArray(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParallaxNode* cobj = NULL;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParallaxNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParallaxNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParallaxNode_getParallaxArray'", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	do{
		if (argc == 0) {
		const _ccArray* ret = cobj->getParallaxArray();
		#pragma warning NO CONVERSION FROM NATIVE FOR const _ccArray*;
	    return 1;
		}
	}while(0);
	do{
		if (argc == 0) {
		_ccArray* ret = cobj->getParallaxArray();
		#pragma warning NO CONVERSION FROM NATIVE FOR _ccArray*;
	    return 1;
		}
	}while(0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParallaxNode_getParallaxArray'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParallaxNode_setParallaxArray(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParallaxNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"ParallaxNode",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::ParallaxNode*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_ParallaxNode_setParallaxArray'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		_ccArray* arg0;
		#pragma warning NO CONVERSION TO NATIVE FOR _ccArray*;
		if(!ok)
			return 0;
		cobj->setParallaxArray(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParallaxNode_setParallaxArray'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_ParallaxNode_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"ParallaxNode",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 0) {
		if(!ok)
			return 0;
		cocos2d::ParallaxNode* ret = cocos2d::ParallaxNode::create();
		tolua_pushusertype(tolua_S,ret,"ParallaxNode");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParallaxNode_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_ParallaxNode_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::ParallaxNode* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::ParallaxNode();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"ParallaxNode");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_ParallaxNode_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_ParallaxNode_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (ParallaxNode)");
	return 0;
}

int lua_register_cocos2dx_ParallaxNode(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"ParallaxNode");
	tolua_cclass(tolua_S,"ParallaxNode","ParallaxNode","Node",NULL);

	tolua_beginmodule(tolua_S,"ParallaxNode");
		tolua_function(tolua_S,"addChild",lua_cocos2dx_ParallaxNode_addChild);
		tolua_function(tolua_S,"visit",lua_cocos2dx_ParallaxNode_visit);
		tolua_function(tolua_S,"removeAllChildrenWithCleanup",lua_cocos2dx_ParallaxNode_removeAllChildrenWithCleanup);
		tolua_function(tolua_S,"removeChild",lua_cocos2dx_ParallaxNode_removeChild);
		tolua_function(tolua_S,"getParallaxArray",lua_cocos2dx_ParallaxNode_getParallaxArray);
		tolua_function(tolua_S,"setParallaxArray",lua_cocos2dx_ParallaxNode_setParallaxArray);
		tolua_function(tolua_S,"new",lua_cocos2dx_ParallaxNode_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_ParallaxNode_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_TMXObjectGroup_setPositionOffset(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXObjectGroup* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXObjectGroup",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXObjectGroup*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXObjectGroup_setPositionOffset'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Point arg0;
		ok &= luaval_to_point(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->setPositionOffset(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXObjectGroup_setPositionOffset'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXObjectGroup_getProperty(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXObjectGroup* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXObjectGroup",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXObjectGroup*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXObjectGroup_getProperty'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		const char* arg0;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		if(!ok)
			return 0;
		cocos2d::String* ret = cobj->getProperty(arg0);
		tolua_pushusertype(tolua_S,ret,"String");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXObjectGroup_getProperty'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXObjectGroup_getPositionOffset(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXObjectGroup* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXObjectGroup",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXObjectGroup*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXObjectGroup_getPositionOffset'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Point ret = cobj->getPositionOffset();
		point_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXObjectGroup_getPositionOffset'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXObjectGroup_getObject(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXObjectGroup* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXObjectGroup",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXObjectGroup*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXObjectGroup_getObject'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		const char* arg0;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		if(!ok)
			return 0;
		cocos2d::Dictionary* ret = cobj->getObject(arg0);
		dictionary_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXObjectGroup_getObject'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXObjectGroup_getObjects(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXObjectGroup* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXObjectGroup",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXObjectGroup*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXObjectGroup_getObjects'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Array* ret = cobj->getObjects();
		array_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXObjectGroup_getObjects'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXObjectGroup_setGroupName(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXObjectGroup* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXObjectGroup",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXObjectGroup*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXObjectGroup_setGroupName'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		const char* arg0;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		if(!ok)
			return 0;
		cobj->setGroupName(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXObjectGroup_setGroupName'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXObjectGroup_getProperties(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXObjectGroup* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXObjectGroup",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXObjectGroup*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXObjectGroup_getProperties'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Dictionary* ret = cobj->getProperties();
		dictionary_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXObjectGroup_getProperties'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXObjectGroup_getGroupName(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXObjectGroup* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXObjectGroup",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXObjectGroup*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXObjectGroup_getGroupName'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		const char* ret = cobj->getGroupName();
		tolua_pushstring(tolua_S,(const char*)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXObjectGroup_getGroupName'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXObjectGroup_setProperties(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXObjectGroup* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXObjectGroup",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXObjectGroup*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXObjectGroup_setProperties'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Dictionary* arg0;
		ok &= luaval_to_dictionary(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->setProperties(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXObjectGroup_setProperties'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXObjectGroup_setObjects(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXObjectGroup* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXObjectGroup",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXObjectGroup*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXObjectGroup_setObjects'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Array* arg0;
		ok &= luaval_to_array(tolua_S,  2, &arg0);
		if(!ok)
			return 0;
		cobj->setObjects(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXObjectGroup_setObjects'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXObjectGroup_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXObjectGroup* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::TMXObjectGroup();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"TMXObjectGroup");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXObjectGroup_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TMXObjectGroup_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (TMXObjectGroup)");
	return 0;
}

int lua_register_cocos2dx_TMXObjectGroup(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"TMXObjectGroup");
	tolua_cclass(tolua_S,"TMXObjectGroup","TMXObjectGroup","",NULL);

	tolua_beginmodule(tolua_S,"TMXObjectGroup");
		tolua_function(tolua_S,"setPositionOffset",lua_cocos2dx_TMXObjectGroup_setPositionOffset);
		tolua_function(tolua_S,"getProperty",lua_cocos2dx_TMXObjectGroup_getProperty);
		tolua_function(tolua_S,"getPositionOffset",lua_cocos2dx_TMXObjectGroup_getPositionOffset);
		tolua_function(tolua_S,"getObject",lua_cocos2dx_TMXObjectGroup_getObject);
		tolua_function(tolua_S,"getObjects",lua_cocos2dx_TMXObjectGroup_getObjects);
		tolua_function(tolua_S,"setGroupName",lua_cocos2dx_TMXObjectGroup_setGroupName);
		tolua_function(tolua_S,"getProperties",lua_cocos2dx_TMXObjectGroup_getProperties);
		tolua_function(tolua_S,"getGroupName",lua_cocos2dx_TMXObjectGroup_getGroupName);
		tolua_function(tolua_S,"setProperties",lua_cocos2dx_TMXObjectGroup_setProperties);
		tolua_function(tolua_S,"setObjects",lua_cocos2dx_TMXObjectGroup_setObjects);
		tolua_function(tolua_S,"new",lua_cocos2dx_TMXObjectGroup_constructor);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_TMXLayerInfo_setProperties(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXLayerInfo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXLayerInfo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXLayerInfo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXLayerInfo_setProperties'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Dictionary* arg0;
		ok &= luaval_to_dictionary(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->setProperties(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXLayerInfo_setProperties'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXLayerInfo_getProperties(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXLayerInfo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXLayerInfo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXLayerInfo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXLayerInfo_getProperties'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Dictionary* ret = cobj->getProperties();
		dictionary_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXLayerInfo_getProperties'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXLayerInfo_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXLayerInfo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::TMXLayerInfo();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"TMXLayerInfo");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXLayerInfo_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TMXLayerInfo_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (TMXLayerInfo)");
	return 0;
}

int lua_register_cocos2dx_TMXLayerInfo(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"TMXLayerInfo");
	tolua_cclass(tolua_S,"TMXLayerInfo","TMXLayerInfo","",NULL);

	tolua_beginmodule(tolua_S,"TMXLayerInfo");
		tolua_function(tolua_S,"setProperties",lua_cocos2dx_TMXLayerInfo_setProperties);
		tolua_function(tolua_S,"getProperties",lua_cocos2dx_TMXLayerInfo_getProperties);
		tolua_function(tolua_S,"new",lua_cocos2dx_TMXLayerInfo_constructor);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_TMXTilesetInfo_rectForGID(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXTilesetInfo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXTilesetInfo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXTilesetInfo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXTilesetInfo_rectForGID'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		unsigned int arg0;
		ok &= luaval_to_uint32(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cocos2d::Rect ret = cobj->rectForGID(arg0);
		rect_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXTilesetInfo_rectForGID'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXTilesetInfo_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXTilesetInfo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::TMXTilesetInfo();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"TMXTilesetInfo");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXTilesetInfo_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TMXTilesetInfo_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (TMXTilesetInfo)");
	return 0;
}

int lua_register_cocos2dx_TMXTilesetInfo(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"TMXTilesetInfo");
	tolua_cclass(tolua_S,"TMXTilesetInfo","TMXTilesetInfo","",NULL);

	tolua_beginmodule(tolua_S,"TMXTilesetInfo");
		tolua_function(tolua_S,"rectForGID",lua_cocos2dx_TMXTilesetInfo_rectForGID);
		tolua_function(tolua_S,"new",lua_cocos2dx_TMXTilesetInfo_constructor);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_TMXMapInfo_setObjectGroups(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXMapInfo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXMapInfo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXMapInfo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXMapInfo_setObjectGroups'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Array* arg0;
		ok &= luaval_to_array(tolua_S,  2, &arg0);
		if(!ok)
			return 0;
		cobj->setObjectGroups(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXMapInfo_setObjectGroups'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXMapInfo_setTileSize(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXMapInfo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXMapInfo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXMapInfo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXMapInfo_setTileSize'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Size arg0;
		ok &= luaval_to_size(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->setTileSize(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXMapInfo_setTileSize'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXMapInfo_initWithTMXFile(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXMapInfo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXMapInfo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXMapInfo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXMapInfo_initWithTMXFile'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		const char* arg0;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		if(!ok)
			return 0;
		bool ret = cobj->initWithTMXFile(arg0);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXMapInfo_initWithTMXFile'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXMapInfo_getOrientation(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXMapInfo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXMapInfo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXMapInfo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXMapInfo_getOrientation'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		int ret = cobj->getOrientation();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXMapInfo_getOrientation'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXMapInfo_isStoringCharacters(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXMapInfo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXMapInfo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXMapInfo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXMapInfo_isStoringCharacters'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->isStoringCharacters();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXMapInfo_isStoringCharacters'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXMapInfo_setLayers(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXMapInfo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXMapInfo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXMapInfo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXMapInfo_setLayers'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Array* arg0;
		ok &= luaval_to_array(tolua_S,  2, &arg0);
		if(!ok)
			return 0;
		cobj->setLayers(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXMapInfo_setLayers'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXMapInfo_parseXMLFile(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXMapInfo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXMapInfo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXMapInfo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXMapInfo_parseXMLFile'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		const char* arg0;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		if(!ok)
			return 0;
		bool ret = cobj->parseXMLFile(arg0);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXMapInfo_parseXMLFile'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXMapInfo_getParentElement(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXMapInfo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXMapInfo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXMapInfo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXMapInfo_getParentElement'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		int ret = cobj->getParentElement();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXMapInfo_getParentElement'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXMapInfo_setTMXFileName(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXMapInfo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXMapInfo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXMapInfo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXMapInfo_setTMXFileName'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		const char* arg0;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		if(!ok)
			return 0;
		cobj->setTMXFileName(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXMapInfo_setTMXFileName'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXMapInfo_parseXMLString(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXMapInfo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXMapInfo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXMapInfo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXMapInfo_parseXMLString'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		const char* arg0;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		if(!ok)
			return 0;
		bool ret = cobj->parseXMLString(arg0);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXMapInfo_parseXMLString'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXMapInfo_getLayers(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXMapInfo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXMapInfo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXMapInfo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXMapInfo_getLayers'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Array* ret = cobj->getLayers();
		array_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXMapInfo_getLayers'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXMapInfo_getTilesets(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXMapInfo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXMapInfo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXMapInfo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXMapInfo_getTilesets'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Array* ret = cobj->getTilesets();
		array_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXMapInfo_getTilesets'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXMapInfo_getParentGID(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXMapInfo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXMapInfo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXMapInfo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXMapInfo_getParentGID'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		unsigned int ret = cobj->getParentGID();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXMapInfo_getParentGID'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXMapInfo_setParentElement(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXMapInfo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXMapInfo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXMapInfo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXMapInfo_setParentElement'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		int arg0;
		ok &= luaval_to_int32(tolua_S, 2,(int*)&arg0);
		if(!ok)
			return 0;
		cobj->setParentElement(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXMapInfo_setParentElement'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXMapInfo_initWithXML(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXMapInfo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXMapInfo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXMapInfo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXMapInfo_initWithXML'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		const char* arg0;
		const char* arg1;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp); arg1 = arg1_tmp.c_str();
		if(!ok)
			return 0;
		bool ret = cobj->initWithXML(arg0, arg1);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXMapInfo_initWithXML'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXMapInfo_setParentGID(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXMapInfo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXMapInfo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXMapInfo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXMapInfo_setParentGID'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		unsigned int arg0;
		ok &= luaval_to_uint32(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setParentGID(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXMapInfo_setParentGID'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXMapInfo_getLayerAttribs(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXMapInfo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXMapInfo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXMapInfo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXMapInfo_getLayerAttribs'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		int ret = cobj->getLayerAttribs();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXMapInfo_getLayerAttribs'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXMapInfo_getTileSize(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXMapInfo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXMapInfo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXMapInfo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXMapInfo_getTileSize'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Size ret = cobj->getTileSize();
		size_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXMapInfo_getTileSize'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXMapInfo_getTileProperties(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXMapInfo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXMapInfo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXMapInfo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXMapInfo_getTileProperties'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Dictionary* ret = cobj->getTileProperties();
		dictionary_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXMapInfo_getTileProperties'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXMapInfo_getObjectGroups(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXMapInfo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXMapInfo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXMapInfo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXMapInfo_getObjectGroups'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Array* ret = cobj->getObjectGroups();
		array_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXMapInfo_getObjectGroups'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXMapInfo_getTMXFileName(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXMapInfo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXMapInfo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXMapInfo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXMapInfo_getTMXFileName'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		const char* ret = cobj->getTMXFileName();
		tolua_pushstring(tolua_S,(const char*)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXMapInfo_getTMXFileName'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXMapInfo_setCurrentString(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXMapInfo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXMapInfo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXMapInfo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXMapInfo_setCurrentString'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		const char* arg0;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		if(!ok)
			return 0;
		cobj->setCurrentString(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXMapInfo_setCurrentString'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXMapInfo_setProperties(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXMapInfo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXMapInfo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXMapInfo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXMapInfo_setProperties'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Dictionary* arg0;
		ok &= luaval_to_dictionary(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->setProperties(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXMapInfo_setProperties'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXMapInfo_setOrientation(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXMapInfo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXMapInfo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXMapInfo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXMapInfo_setOrientation'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		int arg0;
		ok &= luaval_to_int32(tolua_S, 2,(int*)&arg0);
		if(!ok)
			return 0;
		cobj->setOrientation(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXMapInfo_setOrientation'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXMapInfo_setTileProperties(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXMapInfo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXMapInfo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXMapInfo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXMapInfo_setTileProperties'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Dictionary* arg0;
		ok &= luaval_to_dictionary(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->setTileProperties(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXMapInfo_setTileProperties'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXMapInfo_setMapSize(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXMapInfo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXMapInfo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXMapInfo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXMapInfo_setMapSize'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Size arg0;
		ok &= luaval_to_size(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->setMapSize(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXMapInfo_setMapSize'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXMapInfo_setStoringCharacters(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXMapInfo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXMapInfo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXMapInfo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXMapInfo_setStoringCharacters'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setStoringCharacters(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXMapInfo_setStoringCharacters'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXMapInfo_getMapSize(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXMapInfo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXMapInfo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXMapInfo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXMapInfo_getMapSize'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Size ret = cobj->getMapSize();
		size_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXMapInfo_getMapSize'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXMapInfo_setTilesets(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXMapInfo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXMapInfo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXMapInfo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXMapInfo_setTilesets'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Array* arg0;
		ok &= luaval_to_array(tolua_S,  2, &arg0);
		if(!ok)
			return 0;
		cobj->setTilesets(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXMapInfo_setTilesets'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXMapInfo_getProperties(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXMapInfo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXMapInfo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXMapInfo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXMapInfo_getProperties'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Dictionary* ret = cobj->getProperties();
		dictionary_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXMapInfo_getProperties'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXMapInfo_getCurrentString(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXMapInfo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXMapInfo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXMapInfo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXMapInfo_getCurrentString'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		const char* ret = cobj->getCurrentString();
		tolua_pushstring(tolua_S,(const char*)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXMapInfo_getCurrentString'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXMapInfo_setLayerAttribs(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXMapInfo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXMapInfo",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXMapInfo*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXMapInfo_setLayerAttribs'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		int arg0;
		ok &= luaval_to_int32(tolua_S, 2,(int*)&arg0);
		if(!ok)
			return 0;
		cobj->setLayerAttribs(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXMapInfo_setLayerAttribs'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXMapInfo_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"TMXMapInfo",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 1) {
		const char* arg0;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		if(!ok)
			return 0;
		cocos2d::TMXMapInfo* ret = cocos2d::TMXMapInfo::create(arg0);
		tolua_pushusertype(tolua_S,ret,"TMXMapInfo");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXMapInfo_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TMXMapInfo_createWithXML(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"TMXMapInfo",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 2) {
		const char* arg0;
		const char* arg1;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp); arg1 = arg1_tmp.c_str();
		if(!ok)
			return 0;
		cocos2d::TMXMapInfo* ret = cocos2d::TMXMapInfo::createWithXML(arg0, arg1);
		tolua_pushusertype(tolua_S,ret,"TMXMapInfo");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXMapInfo_createWithXML'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TMXMapInfo_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXMapInfo* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::TMXMapInfo();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"TMXMapInfo");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXMapInfo_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TMXMapInfo_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (TMXMapInfo)");
	return 0;
}

int lua_register_cocos2dx_TMXMapInfo(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"TMXMapInfo");
	tolua_cclass(tolua_S,"TMXMapInfo","TMXMapInfo","",NULL);

	tolua_beginmodule(tolua_S,"TMXMapInfo");
		tolua_function(tolua_S,"setObjectGroups",lua_cocos2dx_TMXMapInfo_setObjectGroups);
		tolua_function(tolua_S,"setTileSize",lua_cocos2dx_TMXMapInfo_setTileSize);
		tolua_function(tolua_S,"initWithTMXFile",lua_cocos2dx_TMXMapInfo_initWithTMXFile);
		tolua_function(tolua_S,"getOrientation",lua_cocos2dx_TMXMapInfo_getOrientation);
		tolua_function(tolua_S,"isStoringCharacters",lua_cocos2dx_TMXMapInfo_isStoringCharacters);
		tolua_function(tolua_S,"setLayers",lua_cocos2dx_TMXMapInfo_setLayers);
		tolua_function(tolua_S,"parseXMLFile",lua_cocos2dx_TMXMapInfo_parseXMLFile);
		tolua_function(tolua_S,"getParentElement",lua_cocos2dx_TMXMapInfo_getParentElement);
		tolua_function(tolua_S,"setTMXFileName",lua_cocos2dx_TMXMapInfo_setTMXFileName);
		tolua_function(tolua_S,"parseXMLString",lua_cocos2dx_TMXMapInfo_parseXMLString);
		tolua_function(tolua_S,"getLayers",lua_cocos2dx_TMXMapInfo_getLayers);
		tolua_function(tolua_S,"getTilesets",lua_cocos2dx_TMXMapInfo_getTilesets);
		tolua_function(tolua_S,"getParentGID",lua_cocos2dx_TMXMapInfo_getParentGID);
		tolua_function(tolua_S,"setParentElement",lua_cocos2dx_TMXMapInfo_setParentElement);
		tolua_function(tolua_S,"initWithXML",lua_cocos2dx_TMXMapInfo_initWithXML);
		tolua_function(tolua_S,"setParentGID",lua_cocos2dx_TMXMapInfo_setParentGID);
		tolua_function(tolua_S,"getLayerAttribs",lua_cocos2dx_TMXMapInfo_getLayerAttribs);
		tolua_function(tolua_S,"getTileSize",lua_cocos2dx_TMXMapInfo_getTileSize);
		tolua_function(tolua_S,"getTileProperties",lua_cocos2dx_TMXMapInfo_getTileProperties);
		tolua_function(tolua_S,"getObjectGroups",lua_cocos2dx_TMXMapInfo_getObjectGroups);
		tolua_function(tolua_S,"getTMXFileName",lua_cocos2dx_TMXMapInfo_getTMXFileName);
		tolua_function(tolua_S,"setCurrentString",lua_cocos2dx_TMXMapInfo_setCurrentString);
		tolua_function(tolua_S,"setProperties",lua_cocos2dx_TMXMapInfo_setProperties);
		tolua_function(tolua_S,"setOrientation",lua_cocos2dx_TMXMapInfo_setOrientation);
		tolua_function(tolua_S,"setTileProperties",lua_cocos2dx_TMXMapInfo_setTileProperties);
		tolua_function(tolua_S,"setMapSize",lua_cocos2dx_TMXMapInfo_setMapSize);
		tolua_function(tolua_S,"setStoringCharacters",lua_cocos2dx_TMXMapInfo_setStoringCharacters);
		tolua_function(tolua_S,"getMapSize",lua_cocos2dx_TMXMapInfo_getMapSize);
		tolua_function(tolua_S,"setTilesets",lua_cocos2dx_TMXMapInfo_setTilesets);
		tolua_function(tolua_S,"getProperties",lua_cocos2dx_TMXMapInfo_getProperties);
		tolua_function(tolua_S,"getCurrentString",lua_cocos2dx_TMXMapInfo_getCurrentString);
		tolua_function(tolua_S,"setLayerAttribs",lua_cocos2dx_TMXMapInfo_setLayerAttribs);
		tolua_function(tolua_S,"new",lua_cocos2dx_TMXMapInfo_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_TMXMapInfo_create);
		tolua_function(tolua_S,"createWithXML", lua_cocos2dx_TMXMapInfo_createWithXML);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_TMXLayer_addChild(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXLayer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXLayer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXLayer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXLayer_addChild'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 3) {
		cocos2d::Node* arg0;
		int arg1;
		int arg2;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		ok &= luaval_to_int32(tolua_S, 3,(int*)&arg1);
		ok &= luaval_to_int32(tolua_S, 4,(int*)&arg2);
		if(!ok)
			return 0;
		cobj->addChild(arg0, arg1, arg2);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 3);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXLayer_addChild'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXLayer_getTileGIDAt(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXLayer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXLayer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXLayer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXLayer_getTileGIDAt'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Point arg0;
		ok &= luaval_to_point(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		unsigned int ret = cobj->getTileGIDAt(arg0);
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	if (argc == 2) {
		cocos2d::Point arg0;
		cocos2d::ccTMXTileFlags* arg1;
		ok &= luaval_to_point(tolua_S, 2, &arg0);
		#pragma warning NO CONVERSION TO NATIVE FOR cocos2d::ccTMXTileFlags*;
		if(!ok)
			return 0;
		unsigned int ret = cobj->getTileGIDAt(arg0, arg1);
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXLayer_getTileGIDAt'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXLayer_getPositionAt(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXLayer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXLayer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXLayer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXLayer_getPositionAt'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Point arg0;
		ok &= luaval_to_point(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cocos2d::Point ret = cobj->getPositionAt(arg0);
		point_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXLayer_getPositionAt'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXLayer_setLayerOrientation(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXLayer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXLayer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXLayer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXLayer_setLayerOrientation'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		unsigned int arg0;
		ok &= luaval_to_uint32(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setLayerOrientation(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXLayer_setLayerOrientation'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXLayer_releaseMap(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXLayer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXLayer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXLayer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXLayer_releaseMap'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->releaseMap();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXLayer_releaseMap'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXLayer_setTiles(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXLayer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXLayer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXLayer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXLayer_setTiles'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		unsigned int* arg0;
		#pragma warning NO CONVERSION TO NATIVE FOR unsigned int*;
		if(!ok)
			return 0;
		cobj->setTiles(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXLayer_setTiles'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXLayer_getLayerSize(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXLayer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXLayer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXLayer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXLayer_getLayerSize'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Size ret = cobj->getLayerSize();
		size_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXLayer_getLayerSize'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXLayer_setMapTileSize(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXLayer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXLayer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXLayer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXLayer_setMapTileSize'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Size arg0;
		ok &= luaval_to_size(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->setMapTileSize(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXLayer_setMapTileSize'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXLayer_getLayerOrientation(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXLayer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXLayer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXLayer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXLayer_getLayerOrientation'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		unsigned int ret = cobj->getLayerOrientation();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXLayer_getLayerOrientation'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXLayer_setProperties(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXLayer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXLayer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXLayer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXLayer_setProperties'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Dictionary* arg0;
		ok &= luaval_to_dictionary(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->setProperties(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXLayer_setProperties'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXLayer_setLayerName(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXLayer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXLayer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXLayer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXLayer_setLayerName'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		const char* arg0;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		if(!ok)
			return 0;
		cobj->setLayerName(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXLayer_setLayerName'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXLayer_removeTileAt(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXLayer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXLayer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXLayer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXLayer_removeTileAt'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Point arg0;
		ok &= luaval_to_point(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->removeTileAt(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXLayer_removeTileAt'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXLayer_initWithTilesetInfo(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXLayer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXLayer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXLayer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXLayer_initWithTilesetInfo'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 3) {
		cocos2d::TMXTilesetInfo* arg0;
		cocos2d::TMXLayerInfo* arg1;
		cocos2d::TMXMapInfo* arg2;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"TMXTilesetInfo",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::TMXTilesetInfo*)tolua_tousertype(tolua_S,2,0);
		};
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"TMXLayerInfo",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::TMXLayerInfo*)tolua_tousertype(tolua_S,3,0);
		};
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,4,"TMXMapInfo",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg2 = (cocos2d::TMXMapInfo*)tolua_tousertype(tolua_S,4,0);
		};
		if(!ok)
			return 0;
		bool ret = cobj->initWithTilesetInfo(arg0, arg1, arg2);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 3);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXLayer_initWithTilesetInfo'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXLayer_setupTiles(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXLayer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXLayer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXLayer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXLayer_setupTiles'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->setupTiles();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXLayer_setupTiles'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXLayer_setTileGID(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXLayer* cobj = NULL;
    bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXLayer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXLayer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXLayer_setTileGID'", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	do{
		if (argc == 3) {
			unsigned int arg0;
			ok &= luaval_to_uint32(tolua_S, 2,&arg0);

			if (!ok) { ok = true; break; }
			cocos2d::Point arg1;
			ok &= luaval_to_point(tolua_S, 3, &arg1);

			if (!ok) { ok = true; break; }
			cocos2d::ccTMXTileFlags arg2;
			ok &= luaval_to_int32(tolua_S, 4,(int*)&arg2);

			if (!ok) { ok = true; break; }
		cobj->setTileGID(arg0, arg1, arg2);
		return 0;
		}
	}while(0);
	do{
		if (argc == 2) {
			unsigned int arg0;
			ok &= luaval_to_uint32(tolua_S, 2,&arg0);

			if (!ok) { ok = true; break; }
			cocos2d::Point arg1;
			ok &= luaval_to_point(tolua_S, 3, &arg1);

			if (!ok) { ok = true; break; }
		cobj->setTileGID(arg0, arg1);
		return 0;
		}
	}while(0);
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXLayer_setTileGID'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXLayer_getMapTileSize(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXLayer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXLayer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXLayer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXLayer_getMapTileSize'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Size ret = cobj->getMapTileSize();
		size_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXLayer_getMapTileSize'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXLayer_getProperty(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXLayer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXLayer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXLayer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXLayer_getProperty'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		const char* arg0;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		if(!ok)
			return 0;
		cocos2d::String* ret = cobj->getProperty(arg0);
		tolua_pushusertype(tolua_S,ret,"String");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXLayer_getProperty'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXLayer_setLayerSize(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXLayer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXLayer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXLayer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXLayer_setLayerSize'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Size arg0;
		ok &= luaval_to_size(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->setLayerSize(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXLayer_setLayerSize'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXLayer_getLayerName(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXLayer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXLayer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXLayer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXLayer_getLayerName'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		const char* ret = cobj->getLayerName();
		tolua_pushstring(tolua_S,(const char*)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXLayer_getLayerName'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXLayer_setTileSet(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXLayer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXLayer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXLayer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXLayer_setTileSet'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::TMXTilesetInfo* arg0;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"TMXTilesetInfo",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::TMXTilesetInfo*)tolua_tousertype(tolua_S,2,0);
		};
		if(!ok)
			return 0;
		cobj->setTileSet(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXLayer_setTileSet'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXLayer_removeChild(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXLayer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXLayer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXLayer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXLayer_removeChild'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		cocos2d::Node* arg0;
		bool arg1;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"Node",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::Node*)tolua_tousertype(tolua_S,2,0);
		};
		ok &= luaval_to_boolean(tolua_S, 3,&arg1);
		if(!ok)
			return 0;
		cobj->removeChild(arg0, arg1);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXLayer_removeChild'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXLayer_getTileSet(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXLayer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXLayer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXLayer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXLayer_getTileSet'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::TMXTilesetInfo* ret = cobj->getTileSet();
		tolua_pushusertype(tolua_S,ret,"TMXTilesetInfo");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXLayer_getTileSet'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXLayer_getProperties(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXLayer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXLayer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXLayer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXLayer_getProperties'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Dictionary* ret = cobj->getProperties();
		dictionary_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXLayer_getProperties'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXLayer_getTileAt(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXLayer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXLayer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXLayer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXLayer_getTileAt'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Point arg0;
		ok &= luaval_to_point(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cocos2d::Sprite* ret = cobj->getTileAt(arg0);
		tolua_pushusertype(tolua_S,ret,"Sprite");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXLayer_getTileAt'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXLayer_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"TMXLayer",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 3) {
		cocos2d::TMXTilesetInfo* arg0;
		cocos2d::TMXLayerInfo* arg1;
		cocos2d::TMXMapInfo* arg2;
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,2,"TMXTilesetInfo",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg0 = (cocos2d::TMXTilesetInfo*)tolua_tousertype(tolua_S,2,0);
		};
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,3,"TMXLayerInfo",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg1 = (cocos2d::TMXLayerInfo*)tolua_tousertype(tolua_S,3,0);
		};
		#if COCOS2D_DEBUG >= 1
		if (!tolua_isusertype(tolua_S,4,"TMXMapInfo",0,&tolua_err)){
			tolua_error(tolua_S,"#ferror:",&tolua_err);
			ok = false;
		}
		#endif
		if(ok){
			arg2 = (cocos2d::TMXMapInfo*)tolua_tousertype(tolua_S,4,0);
		};
		if(!ok)
			return 0;
		cocos2d::TMXLayer* ret = cocos2d::TMXLayer::create(arg0, arg1, arg2);
		tolua_pushusertype(tolua_S,ret,"TMXLayer");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 3);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXLayer_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TMXLayer_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXLayer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::TMXLayer();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"TMXLayer");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXLayer_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TMXLayer_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (TMXLayer)");
	return 0;
}

int lua_register_cocos2dx_TMXLayer(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"TMXLayer");
	tolua_cclass(tolua_S,"TMXLayer","TMXLayer","SpriteBatchNode",NULL);

	tolua_beginmodule(tolua_S,"TMXLayer");
		tolua_function(tolua_S,"addChild",lua_cocos2dx_TMXLayer_addChild);
		tolua_function(tolua_S,"getTileGIDAt",lua_cocos2dx_TMXLayer_getTileGIDAt);
		tolua_function(tolua_S,"getPositionAt",lua_cocos2dx_TMXLayer_getPositionAt);
		tolua_function(tolua_S,"setLayerOrientation",lua_cocos2dx_TMXLayer_setLayerOrientation);
		tolua_function(tolua_S,"releaseMap",lua_cocos2dx_TMXLayer_releaseMap);
		tolua_function(tolua_S,"setTiles",lua_cocos2dx_TMXLayer_setTiles);
		tolua_function(tolua_S,"getLayerSize",lua_cocos2dx_TMXLayer_getLayerSize);
		tolua_function(tolua_S,"setMapTileSize",lua_cocos2dx_TMXLayer_setMapTileSize);
		tolua_function(tolua_S,"getLayerOrientation",lua_cocos2dx_TMXLayer_getLayerOrientation);
		tolua_function(tolua_S,"setProperties",lua_cocos2dx_TMXLayer_setProperties);
		tolua_function(tolua_S,"setLayerName",lua_cocos2dx_TMXLayer_setLayerName);
		tolua_function(tolua_S,"removeTileAt",lua_cocos2dx_TMXLayer_removeTileAt);
		tolua_function(tolua_S,"initWithTilesetInfo",lua_cocos2dx_TMXLayer_initWithTilesetInfo);
		tolua_function(tolua_S,"setupTiles",lua_cocos2dx_TMXLayer_setupTiles);
		tolua_function(tolua_S,"setTileGID",lua_cocos2dx_TMXLayer_setTileGID);
		tolua_function(tolua_S,"getMapTileSize",lua_cocos2dx_TMXLayer_getMapTileSize);
		tolua_function(tolua_S,"getProperty",lua_cocos2dx_TMXLayer_getProperty);
		tolua_function(tolua_S,"setLayerSize",lua_cocos2dx_TMXLayer_setLayerSize);
		tolua_function(tolua_S,"getLayerName",lua_cocos2dx_TMXLayer_getLayerName);
		tolua_function(tolua_S,"setTileSet",lua_cocos2dx_TMXLayer_setTileSet);
		tolua_function(tolua_S,"removeChild",lua_cocos2dx_TMXLayer_removeChild);
		tolua_function(tolua_S,"getTileSet",lua_cocos2dx_TMXLayer_getTileSet);
		tolua_function(tolua_S,"getProperties",lua_cocos2dx_TMXLayer_getProperties);
		tolua_function(tolua_S,"getTileAt",lua_cocos2dx_TMXLayer_getTileAt);
		tolua_function(tolua_S,"new",lua_cocos2dx_TMXLayer_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_TMXLayer_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_TMXTiledMap_setObjectGroups(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXTiledMap* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXTiledMap",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXTiledMap*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXTiledMap_setObjectGroups'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Array* arg0;
		ok &= luaval_to_array(tolua_S,  2, &arg0);
		if(!ok)
			return 0;
		cobj->setObjectGroups(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXTiledMap_setObjectGroups'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXTiledMap_getProperty(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXTiledMap* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXTiledMap",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXTiledMap*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXTiledMap_getProperty'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		const char* arg0;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		if(!ok)
			return 0;
		cocos2d::String* ret = cobj->getProperty(arg0);
		tolua_pushusertype(tolua_S,ret,"String");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXTiledMap_getProperty'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXTiledMap_setMapSize(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXTiledMap* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXTiledMap",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXTiledMap*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXTiledMap_setMapSize'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Size arg0;
		ok &= luaval_to_size(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->setMapSize(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXTiledMap_setMapSize'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXTiledMap_getObjectGroup(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXTiledMap* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXTiledMap",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXTiledMap*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXTiledMap_getObjectGroup'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		const char* arg0;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		if(!ok)
			return 0;
		cocos2d::TMXObjectGroup* ret = cobj->getObjectGroup(arg0);
		tolua_pushusertype(tolua_S,ret,"TMXObjectGroup");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXTiledMap_getObjectGroup'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXTiledMap_getPropertiesForGID(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXTiledMap* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXTiledMap",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXTiledMap*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXTiledMap_getPropertiesForGID'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		int arg0;
		ok &= luaval_to_int32(tolua_S, 2,(int*)&arg0);
		if(!ok)
			return 0;
		cocos2d::Dictionary* ret = cobj->getPropertiesForGID(arg0);
		dictionary_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXTiledMap_getPropertiesForGID'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXTiledMap_getObjectGroups(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXTiledMap* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXTiledMap",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXTiledMap*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXTiledMap_getObjectGroups'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Array* ret = cobj->getObjectGroups();
		array_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXTiledMap_getObjectGroups'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXTiledMap_initWithTMXFile(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXTiledMap* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXTiledMap",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXTiledMap*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXTiledMap_initWithTMXFile'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		const char* arg0;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		if(!ok)
			return 0;
		bool ret = cobj->initWithTMXFile(arg0);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXTiledMap_initWithTMXFile'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXTiledMap_getTileSize(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXTiledMap* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXTiledMap",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXTiledMap*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXTiledMap_getTileSize'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Size ret = cobj->getTileSize();
		size_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXTiledMap_getTileSize'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXTiledMap_getMapSize(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXTiledMap* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXTiledMap",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXTiledMap*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXTiledMap_getMapSize'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Size ret = cobj->getMapSize();
		size_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXTiledMap_getMapSize'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXTiledMap_getProperties(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXTiledMap* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXTiledMap",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXTiledMap*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXTiledMap_getProperties'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cocos2d::Dictionary* ret = cobj->getProperties();
		dictionary_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXTiledMap_getProperties'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXTiledMap_setTileSize(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXTiledMap* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXTiledMap",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXTiledMap*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXTiledMap_setTileSize'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Size arg0;
		ok &= luaval_to_size(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->setTileSize(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXTiledMap_setTileSize'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXTiledMap_initWithXML(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXTiledMap* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXTiledMap",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXTiledMap*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXTiledMap_initWithXML'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		const char* arg0;
		const char* arg1;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp); arg1 = arg1_tmp.c_str();
		if(!ok)
			return 0;
		bool ret = cobj->initWithXML(arg0, arg1);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXTiledMap_initWithXML'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXTiledMap_getLayer(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXTiledMap* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXTiledMap",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXTiledMap*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXTiledMap_getLayer'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		const char* arg0;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		if(!ok)
			return 0;
		cocos2d::TMXLayer* ret = cobj->getLayer(arg0);
		tolua_pushusertype(tolua_S,ret,"TMXLayer");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXTiledMap_getLayer'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXTiledMap_getMapOrientation(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXTiledMap* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXTiledMap",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXTiledMap*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXTiledMap_getMapOrientation'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		int ret = cobj->getMapOrientation();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXTiledMap_getMapOrientation'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXTiledMap_setMapOrientation(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXTiledMap* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXTiledMap",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXTiledMap*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXTiledMap_setMapOrientation'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		int arg0;
		ok &= luaval_to_int32(tolua_S, 2,(int*)&arg0);
		if(!ok)
			return 0;
		cobj->setMapOrientation(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXTiledMap_setMapOrientation'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXTiledMap_setProperties(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXTiledMap* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TMXTiledMap",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TMXTiledMap*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TMXTiledMap_setProperties'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Dictionary* arg0;
		ok &= luaval_to_dictionary(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cobj->setProperties(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXTiledMap_setProperties'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TMXTiledMap_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"TMXTiledMap",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 1) {
		const char* arg0;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		if(!ok)
			return 0;
		cocos2d::TMXTiledMap* ret = cocos2d::TMXTiledMap::create(arg0);
		tolua_pushusertype(tolua_S,ret,"TMXTiledMap");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXTiledMap_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TMXTiledMap_createWithXML(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"TMXTiledMap",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 2) {
		const char* arg0;
		const char* arg1;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp); arg1 = arg1_tmp.c_str();
		if(!ok)
			return 0;
		cocos2d::TMXTiledMap* ret = cocos2d::TMXTiledMap::createWithXML(arg0, arg1);
		tolua_pushusertype(tolua_S,ret,"TMXTiledMap");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXTiledMap_createWithXML'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TMXTiledMap_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TMXTiledMap* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::TMXTiledMap();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"TMXTiledMap");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TMXTiledMap_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TMXTiledMap_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (TMXTiledMap)");
	return 0;
}

int lua_register_cocos2dx_TMXTiledMap(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"TMXTiledMap");
	tolua_cclass(tolua_S,"TMXTiledMap","TMXTiledMap","Node",NULL);

	tolua_beginmodule(tolua_S,"TMXTiledMap");
		tolua_function(tolua_S,"setObjectGroups",lua_cocos2dx_TMXTiledMap_setObjectGroups);
		tolua_function(tolua_S,"getProperty",lua_cocos2dx_TMXTiledMap_getProperty);
		tolua_function(tolua_S,"setMapSize",lua_cocos2dx_TMXTiledMap_setMapSize);
		tolua_function(tolua_S,"getObjectGroup",lua_cocos2dx_TMXTiledMap_getObjectGroup);
		tolua_function(tolua_S,"getPropertiesForGID",lua_cocos2dx_TMXTiledMap_getPropertiesForGID);
		tolua_function(tolua_S,"getObjectGroups",lua_cocos2dx_TMXTiledMap_getObjectGroups);
		tolua_function(tolua_S,"initWithTMXFile",lua_cocos2dx_TMXTiledMap_initWithTMXFile);
		tolua_function(tolua_S,"getTileSize",lua_cocos2dx_TMXTiledMap_getTileSize);
		tolua_function(tolua_S,"getMapSize",lua_cocos2dx_TMXTiledMap_getMapSize);
		tolua_function(tolua_S,"getProperties",lua_cocos2dx_TMXTiledMap_getProperties);
		tolua_function(tolua_S,"setTileSize",lua_cocos2dx_TMXTiledMap_setTileSize);
		tolua_function(tolua_S,"initWithXML",lua_cocos2dx_TMXTiledMap_initWithXML);
		tolua_function(tolua_S,"getLayer",lua_cocos2dx_TMXTiledMap_getLayer);
		tolua_function(tolua_S,"getMapOrientation",lua_cocos2dx_TMXTiledMap_getMapOrientation);
		tolua_function(tolua_S,"setMapOrientation",lua_cocos2dx_TMXTiledMap_setMapOrientation);
		tolua_function(tolua_S,"setProperties",lua_cocos2dx_TMXTiledMap_setProperties);
		tolua_function(tolua_S,"new",lua_cocos2dx_TMXTiledMap_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_TMXTiledMap_create);
		tolua_function(tolua_S,"createWithXML", lua_cocos2dx_TMXTiledMap_createWithXML);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_TileMapAtlas_initWithTileFile(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TileMapAtlas* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TileMapAtlas",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TileMapAtlas*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TileMapAtlas_initWithTileFile'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 4) {
		const char* arg0;
		const char* arg1;
		int arg2;
		int arg3;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp); arg1 = arg1_tmp.c_str();
		ok &= luaval_to_int32(tolua_S, 4,(int*)&arg2);
		ok &= luaval_to_int32(tolua_S, 5,(int*)&arg3);
		if(!ok)
			return 0;
		bool ret = cobj->initWithTileFile(arg0, arg1, arg2, arg3);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 4);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TileMapAtlas_initWithTileFile'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TileMapAtlas_releaseMap(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TileMapAtlas* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TileMapAtlas",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TileMapAtlas*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TileMapAtlas_releaseMap'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->releaseMap();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TileMapAtlas_releaseMap'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TileMapAtlas_getTGAInfo(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TileMapAtlas* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TileMapAtlas",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TileMapAtlas*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TileMapAtlas_getTGAInfo'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		sImageTGA* ret = cobj->getTGAInfo();
		#pragma warning NO CONVERSION FROM NATIVE FOR sImageTGA*;
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TileMapAtlas_getTGAInfo'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TileMapAtlas_getTileAt(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TileMapAtlas* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TileMapAtlas",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TileMapAtlas*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TileMapAtlas_getTileAt'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		cocos2d::Point arg0;
		ok &= luaval_to_point(tolua_S, 2, &arg0);
		if(!ok)
			return 0;
		cocos2d::Color3B ret = cobj->getTileAt(arg0);
		color3b_to_luaval(tolua_S, ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TileMapAtlas_getTileAt'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TileMapAtlas_setTile(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TileMapAtlas* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TileMapAtlas",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TileMapAtlas*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TileMapAtlas_setTile'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		cocos2d::Color3B arg0;
		cocos2d::Point arg1;
		ok &= luaval_to_color3b(tolua_S, 2, &arg0);
		ok &= luaval_to_point(tolua_S, 3, &arg1);
		if(!ok)
			return 0;
		cobj->setTile(arg0, arg1);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TileMapAtlas_setTile'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TileMapAtlas_setTGAInfo(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TileMapAtlas* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"TileMapAtlas",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::TileMapAtlas*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_TileMapAtlas_setTGAInfo'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		sImageTGA* arg0;
		#pragma warning NO CONVERSION TO NATIVE FOR sImageTGA*;
		if(!ok)
			return 0;
		cobj->setTGAInfo(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TileMapAtlas_setTGAInfo'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_TileMapAtlas_create(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"TileMapAtlas",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 4) {
		const char* arg0;
		const char* arg1;
		int arg2;
		int arg3;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		std::string arg1_tmp; ok &= luaval_to_std_string(tolua_S, 3, &arg1_tmp); arg1 = arg1_tmp.c_str();
		ok &= luaval_to_int32(tolua_S, 4,(int*)&arg2);
		ok &= luaval_to_int32(tolua_S, 5,(int*)&arg3);
		if(!ok)
			return 0;
		cocos2d::TileMapAtlas* ret = cocos2d::TileMapAtlas::create(arg0, arg1, arg2, arg3);
		tolua_pushusertype(tolua_S,ret,"TileMapAtlas");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 4);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TileMapAtlas_create'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TileMapAtlas_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::TileMapAtlas* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::TileMapAtlas();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"TileMapAtlas");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_TileMapAtlas_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_TileMapAtlas_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (TileMapAtlas)");
	return 0;
}

int lua_register_cocos2dx_TileMapAtlas(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"TileMapAtlas");
	tolua_cclass(tolua_S,"TileMapAtlas","TileMapAtlas","AtlasNode",NULL);

	tolua_beginmodule(tolua_S,"TileMapAtlas");
		tolua_function(tolua_S,"initWithTileFile",lua_cocos2dx_TileMapAtlas_initWithTileFile);
		tolua_function(tolua_S,"releaseMap",lua_cocos2dx_TileMapAtlas_releaseMap);
		tolua_function(tolua_S,"getTGAInfo",lua_cocos2dx_TileMapAtlas_getTGAInfo);
		tolua_function(tolua_S,"getTileAt",lua_cocos2dx_TileMapAtlas_getTileAt);
		tolua_function(tolua_S,"setTile",lua_cocos2dx_TileMapAtlas_setTile);
		tolua_function(tolua_S,"setTGAInfo",lua_cocos2dx_TileMapAtlas_setTGAInfo);
		tolua_function(tolua_S,"new",lua_cocos2dx_TileMapAtlas_constructor);
		tolua_function(tolua_S,"create", lua_cocos2dx_TileMapAtlas_create);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_Timer_getInterval(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Timer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Timer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Timer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Timer_getInterval'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getInterval();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Timer_getInterval'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Timer_setInterval(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Timer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Timer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Timer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Timer_setInterval'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setInterval(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Timer_setInterval'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Timer_initWithScriptHandler(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Timer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Timer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Timer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Timer_initWithScriptHandler'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 2) {
		int arg0;
		double arg1;
		ok &= luaval_to_int32(tolua_S, 2,(int*)&arg0);
		ok &= luaval_to_number(tolua_S, 3,&arg1);
		if(!ok)
			return 0;
		bool ret = cobj->initWithScriptHandler(arg0, arg1);
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 2);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Timer_initWithScriptHandler'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Timer_update(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Timer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Timer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Timer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Timer_update'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->update(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Timer_update'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Timer_getScriptHandler(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Timer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Timer",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Timer*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Timer_getScriptHandler'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		int ret = cobj->getScriptHandler();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Timer_getScriptHandler'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Timer_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Timer* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::Timer();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"Timer");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Timer_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_Timer_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (Timer)");
	return 0;
}

int lua_register_cocos2dx_Timer(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"Timer");
	tolua_cclass(tolua_S,"Timer","Timer","",NULL);

	tolua_beginmodule(tolua_S,"Timer");
		tolua_function(tolua_S,"getInterval",lua_cocos2dx_Timer_getInterval);
		tolua_function(tolua_S,"setInterval",lua_cocos2dx_Timer_setInterval);
		tolua_function(tolua_S,"initWithScriptHandler",lua_cocos2dx_Timer_initWithScriptHandler);
		tolua_function(tolua_S,"update",lua_cocos2dx_Timer_update);
		tolua_function(tolua_S,"getScriptHandler",lua_cocos2dx_Timer_getScriptHandler);
		tolua_function(tolua_S,"new",lua_cocos2dx_Timer_constructor);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_Scheduler_setTimeScale(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Scheduler* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Scheduler",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Scheduler*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Scheduler_setTimeScale'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setTimeScale(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Scheduler_setTimeScale'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Scheduler_getTimeScale(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Scheduler* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"Scheduler",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (cocos2d::Scheduler*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_Scheduler_getTimeScale'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getTimeScale();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Scheduler_getTimeScale'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_Scheduler_constructor(lua_State* tolua_S)
{
	int argc = 0;
	cocos2d::Scheduler* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj = new cocos2d::Scheduler();
		cocos2d::Object *cobj = dynamic_cast<cocos2d::Object *>(cobj);
		if (cobj) {
			cobj->autorelease();
		}
	    int ID = (cobj) ? (int)cobj->_ID : -1;
	    int* luaID = (cobj) ? &cobj->_luaID : NULL;
	    toluafix_pushusertype_ccobject(tolua_S, ID, luaID, (void*)cobj,"Scheduler");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_Scheduler_constructor'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_Scheduler_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (Scheduler)");
	return 0;
}

int lua_register_cocos2dx_Scheduler(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"Scheduler");
	tolua_cclass(tolua_S,"Scheduler","Scheduler","",NULL);

	tolua_beginmodule(tolua_S,"Scheduler");
		tolua_function(tolua_S,"setTimeScale",lua_cocos2dx_Scheduler_setTimeScale);
		tolua_function(tolua_S,"getTimeScale",lua_cocos2dx_Scheduler_getTimeScale);
		tolua_function(tolua_S,"new",lua_cocos2dx_Scheduler_constructor);
	tolua_endmodule(tolua_S);
	return 1;
}


static int lua_cocos2dx_SimpleAudioEngine_stopAllEffects(lua_State* tolua_S)
{
	int argc = 0;
	CocosDenshion::SimpleAudioEngine* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SimpleAudioEngine",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (CocosDenshion::SimpleAudioEngine*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SimpleAudioEngine_stopAllEffects'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->stopAllEffects();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SimpleAudioEngine_stopAllEffects'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SimpleAudioEngine_getBackgroundMusicVolume(lua_State* tolua_S)
{
	int argc = 0;
	CocosDenshion::SimpleAudioEngine* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SimpleAudioEngine",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (CocosDenshion::SimpleAudioEngine*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SimpleAudioEngine_getBackgroundMusicVolume'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getBackgroundMusicVolume();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SimpleAudioEngine_getBackgroundMusicVolume'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SimpleAudioEngine_isBackgroundMusicPlaying(lua_State* tolua_S)
{
	int argc = 0;
	CocosDenshion::SimpleAudioEngine* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SimpleAudioEngine",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (CocosDenshion::SimpleAudioEngine*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SimpleAudioEngine_isBackgroundMusicPlaying'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->isBackgroundMusicPlaying();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SimpleAudioEngine_isBackgroundMusicPlaying'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SimpleAudioEngine_getEffectsVolume(lua_State* tolua_S)
{
	int argc = 0;
	CocosDenshion::SimpleAudioEngine* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SimpleAudioEngine",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (CocosDenshion::SimpleAudioEngine*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SimpleAudioEngine_getEffectsVolume'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		float ret = cobj->getEffectsVolume();
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SimpleAudioEngine_getEffectsVolume'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SimpleAudioEngine_setBackgroundMusicVolume(lua_State* tolua_S)
{
	int argc = 0;
	CocosDenshion::SimpleAudioEngine* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SimpleAudioEngine",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (CocosDenshion::SimpleAudioEngine*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SimpleAudioEngine_setBackgroundMusicVolume'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setBackgroundMusicVolume(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SimpleAudioEngine_setBackgroundMusicVolume'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SimpleAudioEngine_stopEffect(lua_State* tolua_S)
{
	int argc = 0;
	CocosDenshion::SimpleAudioEngine* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SimpleAudioEngine",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (CocosDenshion::SimpleAudioEngine*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SimpleAudioEngine_stopEffect'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		unsigned int arg0;
		ok &= luaval_to_uint32(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->stopEffect(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SimpleAudioEngine_stopEffect'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SimpleAudioEngine_stopBackgroundMusic(lua_State* tolua_S)
{
	int argc = 0;
	CocosDenshion::SimpleAudioEngine* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SimpleAudioEngine",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (CocosDenshion::SimpleAudioEngine*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SimpleAudioEngine_stopBackgroundMusic'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->stopBackgroundMusic();
		return 0;
	}
	if (argc == 1) {
		bool arg0;
		ok &= luaval_to_boolean(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->stopBackgroundMusic(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SimpleAudioEngine_stopBackgroundMusic'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SimpleAudioEngine_playBackgroundMusic(lua_State* tolua_S)
{
	int argc = 0;
	CocosDenshion::SimpleAudioEngine* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SimpleAudioEngine",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (CocosDenshion::SimpleAudioEngine*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SimpleAudioEngine_playBackgroundMusic'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		const char* arg0;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		if(!ok)
			return 0;
		cobj->playBackgroundMusic(arg0);
		return 0;
	}
	if (argc == 2) {
		const char* arg0;
		bool arg1;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		ok &= luaval_to_boolean(tolua_S, 3,&arg1);
		if(!ok)
			return 0;
		cobj->playBackgroundMusic(arg0, arg1);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SimpleAudioEngine_playBackgroundMusic'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SimpleAudioEngine_pauseAllEffects(lua_State* tolua_S)
{
	int argc = 0;
	CocosDenshion::SimpleAudioEngine* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SimpleAudioEngine",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (CocosDenshion::SimpleAudioEngine*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SimpleAudioEngine_pauseAllEffects'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->pauseAllEffects();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SimpleAudioEngine_pauseAllEffects'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SimpleAudioEngine_preloadBackgroundMusic(lua_State* tolua_S)
{
	int argc = 0;
	CocosDenshion::SimpleAudioEngine* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SimpleAudioEngine",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (CocosDenshion::SimpleAudioEngine*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SimpleAudioEngine_preloadBackgroundMusic'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		const char* arg0;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		if(!ok)
			return 0;
		cobj->preloadBackgroundMusic(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SimpleAudioEngine_preloadBackgroundMusic'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SimpleAudioEngine_resumeBackgroundMusic(lua_State* tolua_S)
{
	int argc = 0;
	CocosDenshion::SimpleAudioEngine* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SimpleAudioEngine",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (CocosDenshion::SimpleAudioEngine*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SimpleAudioEngine_resumeBackgroundMusic'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->resumeBackgroundMusic();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SimpleAudioEngine_resumeBackgroundMusic'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SimpleAudioEngine_playEffect(lua_State* tolua_S)
{
	int argc = 0;
	CocosDenshion::SimpleAudioEngine* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SimpleAudioEngine",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (CocosDenshion::SimpleAudioEngine*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SimpleAudioEngine_playEffect'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		const char* arg0;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		if(!ok)
			return 0;
		unsigned int ret = cobj->playEffect(arg0);
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	if (argc == 2) {
		const char* arg0;
		bool arg1;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		ok &= luaval_to_boolean(tolua_S, 3,&arg1);
		if(!ok)
			return 0;
		unsigned int ret = cobj->playEffect(arg0, arg1);
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	if (argc == 3) {
		const char* arg0;
		bool arg1;
		double arg2;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		ok &= luaval_to_boolean(tolua_S, 3,&arg1);
		ok &= luaval_to_number(tolua_S, 4,&arg2);
		if(!ok)
			return 0;
		unsigned int ret = cobj->playEffect(arg0, arg1, arg2);
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	if (argc == 4) {
		const char* arg0;
		bool arg1;
		double arg2;
		double arg3;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		ok &= luaval_to_boolean(tolua_S, 3,&arg1);
		ok &= luaval_to_number(tolua_S, 4,&arg2);
		ok &= luaval_to_number(tolua_S, 5,&arg3);
		if(!ok)
			return 0;
		unsigned int ret = cobj->playEffect(arg0, arg1, arg2, arg3);
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	if (argc == 5) {
		const char* arg0;
		bool arg1;
		double arg2;
		double arg3;
		double arg4;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		ok &= luaval_to_boolean(tolua_S, 3,&arg1);
		ok &= luaval_to_number(tolua_S, 4,&arg2);
		ok &= luaval_to_number(tolua_S, 5,&arg3);
		ok &= luaval_to_number(tolua_S, 6,&arg4);
		if(!ok)
			return 0;
		unsigned int ret = cobj->playEffect(arg0, arg1, arg2, arg3, arg4);
		tolua_pushnumber(tolua_S,(lua_Number)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SimpleAudioEngine_playEffect'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SimpleAudioEngine_rewindBackgroundMusic(lua_State* tolua_S)
{
	int argc = 0;
	CocosDenshion::SimpleAudioEngine* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SimpleAudioEngine",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (CocosDenshion::SimpleAudioEngine*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SimpleAudioEngine_rewindBackgroundMusic'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->rewindBackgroundMusic();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SimpleAudioEngine_rewindBackgroundMusic'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SimpleAudioEngine_willPlayBackgroundMusic(lua_State* tolua_S)
{
	int argc = 0;
	CocosDenshion::SimpleAudioEngine* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SimpleAudioEngine",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (CocosDenshion::SimpleAudioEngine*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SimpleAudioEngine_willPlayBackgroundMusic'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		bool ret = cobj->willPlayBackgroundMusic();
		tolua_pushboolean(tolua_S,(bool)ret);
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SimpleAudioEngine_willPlayBackgroundMusic'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SimpleAudioEngine_unloadEffect(lua_State* tolua_S)
{
	int argc = 0;
	CocosDenshion::SimpleAudioEngine* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SimpleAudioEngine",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (CocosDenshion::SimpleAudioEngine*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SimpleAudioEngine_unloadEffect'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		const char* arg0;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		if(!ok)
			return 0;
		cobj->unloadEffect(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SimpleAudioEngine_unloadEffect'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SimpleAudioEngine_preloadEffect(lua_State* tolua_S)
{
	int argc = 0;
	CocosDenshion::SimpleAudioEngine* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SimpleAudioEngine",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (CocosDenshion::SimpleAudioEngine*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SimpleAudioEngine_preloadEffect'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		const char* arg0;
		std::string arg0_tmp; ok &= luaval_to_std_string(tolua_S, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
		if(!ok)
			return 0;
		cobj->preloadEffect(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SimpleAudioEngine_preloadEffect'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SimpleAudioEngine_setEffectsVolume(lua_State* tolua_S)
{
	int argc = 0;
	CocosDenshion::SimpleAudioEngine* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SimpleAudioEngine",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (CocosDenshion::SimpleAudioEngine*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SimpleAudioEngine_setEffectsVolume'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		double arg0;
		ok &= luaval_to_number(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->setEffectsVolume(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SimpleAudioEngine_setEffectsVolume'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SimpleAudioEngine_pauseEffect(lua_State* tolua_S)
{
	int argc = 0;
	CocosDenshion::SimpleAudioEngine* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SimpleAudioEngine",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (CocosDenshion::SimpleAudioEngine*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SimpleAudioEngine_pauseEffect'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		unsigned int arg0;
		ok &= luaval_to_uint32(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->pauseEffect(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SimpleAudioEngine_pauseEffect'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SimpleAudioEngine_resumeAllEffects(lua_State* tolua_S)
{
	int argc = 0;
	CocosDenshion::SimpleAudioEngine* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SimpleAudioEngine",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (CocosDenshion::SimpleAudioEngine*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SimpleAudioEngine_resumeAllEffects'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->resumeAllEffects();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SimpleAudioEngine_resumeAllEffects'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SimpleAudioEngine_pauseBackgroundMusic(lua_State* tolua_S)
{
	int argc = 0;
	CocosDenshion::SimpleAudioEngine* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SimpleAudioEngine",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (CocosDenshion::SimpleAudioEngine*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SimpleAudioEngine_pauseBackgroundMusic'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 0) {
		cobj->pauseBackgroundMusic();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SimpleAudioEngine_pauseBackgroundMusic'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SimpleAudioEngine_resumeEffect(lua_State* tolua_S)
{
	int argc = 0;
	CocosDenshion::SimpleAudioEngine* cobj = nullptr;
	bool ok  = true;
#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif
#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertype(tolua_S,1,"SimpleAudioEngine",0,&tolua_err)) goto tolua_lerror;
#endif
	cobj = (CocosDenshion::SimpleAudioEngine*)tolua_tousertype(tolua_S,1,0);
#if COCOS2D_DEBUG >= 1
	if (!cobj) {
		tolua_error(tolua_S,"invalid 'cobj' in function 'lua_cocos2dx_SimpleAudioEngine_resumeEffect'\n", NULL);
		return 0;
	}
#endif
	argc = lua_gettop(tolua_S)-1;
	if (argc == 1) {
		unsigned int arg0;
		ok &= luaval_to_uint32(tolua_S, 2,&arg0);
		if(!ok)
			return 0;
		cobj->resumeEffect(arg0);
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 1);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SimpleAudioEngine_resumeEffect'.\n",&tolua_err);
#endif
	return 0;
}
static int lua_cocos2dx_SimpleAudioEngine_end(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"SimpleAudioEngine",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 0) {
		if(!ok)
			return 0;
		CocosDenshion::SimpleAudioEngine::end();
		return 0;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SimpleAudioEngine_end'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_SimpleAudioEngine_getInstance(lua_State* tolua_S)
{
	int argc = 0;
	bool ok  = true;

#if COCOS2D_DEBUG >= 1
	tolua_Error tolua_err;
#endif

#if COCOS2D_DEBUG >= 1
	if (!tolua_isusertable(tolua_S,1,"SimpleAudioEngine",0,&tolua_err)) goto tolua_lerror;
#endif

	argc = lua_gettop(tolua_S) - 1;

	if (argc == 0) {
		if(!ok)
			return 0;
		CocosDenshion::SimpleAudioEngine* ret = CocosDenshion::SimpleAudioEngine::getInstance();
		tolua_pushusertype(tolua_S,ret,"SimpleAudioEngine");
	    return 1;
	}
	printf("wrong number of arguments: %d, was expecting %d\n", argc, 0);
	return 0;
#if COCOS2D_DEBUG >= 1
	tolua_lerror:
	tolua_error(tolua_S,"#ferror in function 'lua_cocos2dx_SimpleAudioEngine_getInstance'.\n",&tolua_err);
#endif
	return 0;
}

static int lua_cocos2dx_SimpleAudioEngine_finalize(lua_State* tolua_S)
{
    printf("luabindings: finalizing LUA object (SimpleAudioEngine)");
	return 0;
}

int lua_register_cocos2dx_SimpleAudioEngine(lua_State* tolua_S)
{
	tolua_usertype(tolua_S,"SimpleAudioEngine");
	tolua_cclass(tolua_S,"SimpleAudioEngine","SimpleAudioEngine","",NULL);

	tolua_beginmodule(tolua_S,"SimpleAudioEngine");
		tolua_function(tolua_S,"stopAllEffects",lua_cocos2dx_SimpleAudioEngine_stopAllEffects);
		tolua_function(tolua_S,"getMusicVolume",lua_cocos2dx_SimpleAudioEngine_getBackgroundMusicVolume);
		tolua_function(tolua_S,"isMusicPlaying",lua_cocos2dx_SimpleAudioEngine_isBackgroundMusicPlaying);
		tolua_function(tolua_S,"getEffectsVolume",lua_cocos2dx_SimpleAudioEngine_getEffectsVolume);
		tolua_function(tolua_S,"setMusicVolume",lua_cocos2dx_SimpleAudioEngine_setBackgroundMusicVolume);
		tolua_function(tolua_S,"stopEffect",lua_cocos2dx_SimpleAudioEngine_stopEffect);
		tolua_function(tolua_S,"stopMusic",lua_cocos2dx_SimpleAudioEngine_stopBackgroundMusic);
		tolua_function(tolua_S,"playMusic",lua_cocos2dx_SimpleAudioEngine_playBackgroundMusic);
		tolua_function(tolua_S,"pauseAllEffects",lua_cocos2dx_SimpleAudioEngine_pauseAllEffects);
		tolua_function(tolua_S,"preloadMusic",lua_cocos2dx_SimpleAudioEngine_preloadBackgroundMusic);
		tolua_function(tolua_S,"resumeMusic",lua_cocos2dx_SimpleAudioEngine_resumeBackgroundMusic);
		tolua_function(tolua_S,"playEffect",lua_cocos2dx_SimpleAudioEngine_playEffect);
		tolua_function(tolua_S,"rewindMusic",lua_cocos2dx_SimpleAudioEngine_rewindBackgroundMusic);
		tolua_function(tolua_S,"willPlayMusic",lua_cocos2dx_SimpleAudioEngine_willPlayBackgroundMusic);
		tolua_function(tolua_S,"unloadEffect",lua_cocos2dx_SimpleAudioEngine_unloadEffect);
		tolua_function(tolua_S,"preloadEffect",lua_cocos2dx_SimpleAudioEngine_preloadEffect);
		tolua_function(tolua_S,"setEffectsVolume",lua_cocos2dx_SimpleAudioEngine_setEffectsVolume);
		tolua_function(tolua_S,"pauseEffect",lua_cocos2dx_SimpleAudioEngine_pauseEffect);
		tolua_function(tolua_S,"resumeAllEffects",lua_cocos2dx_SimpleAudioEngine_resumeAllEffects);
		tolua_function(tolua_S,"pauseMusic",lua_cocos2dx_SimpleAudioEngine_pauseBackgroundMusic);
		tolua_function(tolua_S,"resumeEffect",lua_cocos2dx_SimpleAudioEngine_resumeEffect);
		tolua_function(tolua_S,"end", lua_cocos2dx_SimpleAudioEngine_end);
		tolua_function(tolua_S,"getInstance", lua_cocos2dx_SimpleAudioEngine_getInstance);
	tolua_endmodule(tolua_S);
	return 1;
}

TOLUA_API int register_all_cocos2dx(lua_State* tolua_S)
{
	tolua_open(tolua_S);
	
	tolua_module(tolua_S,"cc",0);
	tolua_beginmodule(tolua_S,"cc");

	lua_register_cocos2dx_Action(tolua_S);
	lua_register_cocos2dx_FiniteTimeAction(tolua_S);
	lua_register_cocos2dx_ActionInstant(tolua_S);
	lua_register_cocos2dx_Hide(tolua_S);
	lua_register_cocos2dx_Node(tolua_S);
	lua_register_cocos2dx_Scene(tolua_S);
	lua_register_cocos2dx_TransitionScene(tolua_S);
	lua_register_cocos2dx_TransitionEaseScene(tolua_S);
	lua_register_cocos2dx_TransitionMoveInL(tolua_S);
	lua_register_cocos2dx_TransitionMoveInB(tolua_S);
	lua_register_cocos2dx_NodeRGBA(tolua_S);
	lua_register_cocos2dx_AtlasNode(tolua_S);
	lua_register_cocos2dx_TileMapAtlas(tolua_S);
	lua_register_cocos2dx_TransitionMoveInT(tolua_S);
	lua_register_cocos2dx_TransitionMoveInR(tolua_S);
	lua_register_cocos2dx_ParticleSystem(tolua_S);
	lua_register_cocos2dx_ParticleSystemQuad(tolua_S);
	lua_register_cocos2dx_ParticleSnow(tolua_S);
	lua_register_cocos2dx_ActionInterval(tolua_S);
	lua_register_cocos2dx_ActionCamera(tolua_S);
	lua_register_cocos2dx_ProgressFromTo(tolua_S);
	lua_register_cocos2dx_MoveBy(tolua_S);
	lua_register_cocos2dx_MoveTo(tolua_S);
	lua_register_cocos2dx_JumpBy(tolua_S);
	lua_register_cocos2dx_ActionEase(tolua_S);
	lua_register_cocos2dx_EaseBounce(tolua_S);
	lua_register_cocos2dx_EaseBounceIn(tolua_S);
	lua_register_cocos2dx_TransitionRotoZoom(tolua_S);
	lua_register_cocos2dx_Director(tolua_S);
	lua_register_cocos2dx_Scheduler(tolua_S);
	lua_register_cocos2dx_Texture2D(tolua_S);
	lua_register_cocos2dx_EaseElastic(tolua_S);
	lua_register_cocos2dx_EaseElasticOut(tolua_S);
	lua_register_cocos2dx_EaseBackOut(tolua_S);
	lua_register_cocos2dx_TransitionSceneOriented(tolua_S);
	lua_register_cocos2dx_TransitionFlipX(tolua_S);
	lua_register_cocos2dx_Spawn(tolua_S);
	lua_register_cocos2dx_SimpleAudioEngine(tolua_S);
	lua_register_cocos2dx_SkewTo(tolua_S);
	lua_register_cocos2dx_SkewBy(tolua_S);
	lua_register_cocos2dx_TransitionProgress(tolua_S);
	lua_register_cocos2dx_TransitionProgressVertical(tolua_S);
	lua_register_cocos2dx_Layer(tolua_S);
	lua_register_cocos2dx_TMXTiledMap(tolua_S);
	lua_register_cocos2dx_GridAction(tolua_S);
	lua_register_cocos2dx_Grid3DAction(tolua_S);
	lua_register_cocos2dx_FadeIn(tolua_S);
	lua_register_cocos2dx_AnimationCache(tolua_S);
	lua_register_cocos2dx_FlipX3D(tolua_S);
	lua_register_cocos2dx_FlipY3D(tolua_S);
	lua_register_cocos2dx_EaseSineInOut(tolua_S);
	lua_register_cocos2dx_TransitionFlipAngular(tolua_S);
	lua_register_cocos2dx_EaseElasticInOut(tolua_S);
	lua_register_cocos2dx_Show(tolua_S);
	lua_register_cocos2dx_FadeOut(tolua_S);
	lua_register_cocos2dx_CallFunc(tolua_S);
	lua_register_cocos2dx_Waves3D(tolua_S);
	lua_register_cocos2dx_ParticleFireworks(tolua_S);
	lua_register_cocos2dx_MenuItem(tolua_S);
	lua_register_cocos2dx_MenuItemSprite(tolua_S);
	lua_register_cocos2dx_MenuItemImage(tolua_S);
	lua_register_cocos2dx_ParticleFire(tolua_S);
	lua_register_cocos2dx_TransitionZoomFlipAngular(tolua_S);
	lua_register_cocos2dx_EaseRateAction(tolua_S);
	lua_register_cocos2dx_EaseIn(tolua_S);
	lua_register_cocos2dx_EaseExponentialInOut(tolua_S);
	lua_register_cocos2dx_EaseBackInOut(tolua_S);
	lua_register_cocos2dx_EaseExponentialOut(tolua_S);
	lua_register_cocos2dx_SpriteBatchNode(tolua_S);
	lua_register_cocos2dx_Label(tolua_S);
	lua_register_cocos2dx_Application(tolua_S);
	lua_register_cocos2dx_DelayTime(tolua_S);
	lua_register_cocos2dx_LabelAtlas(tolua_S);
	lua_register_cocos2dx_LabelBMFont(tolua_S);
	lua_register_cocos2dx_TransitionFadeTR(tolua_S);
	lua_register_cocos2dx_TransitionFadeBL(tolua_S);
	lua_register_cocos2dx_EaseElasticIn(tolua_S);
	lua_register_cocos2dx_ParticleSpiral(tolua_S);
	lua_register_cocos2dx_TiledGrid3DAction(tolua_S);
	lua_register_cocos2dx_FadeOutTRTiles(tolua_S);
	lua_register_cocos2dx_FadeOutUpTiles(tolua_S);
	lua_register_cocos2dx_FadeOutDownTiles(tolua_S);
	lua_register_cocos2dx_TextureCache(tolua_S);
	lua_register_cocos2dx_LayerRGBA(tolua_S);
	lua_register_cocos2dx_ActionTween(tolua_S);
	lua_register_cocos2dx_TransitionFadeDown(tolua_S);
	lua_register_cocos2dx_ParticleSun(tolua_S);
	lua_register_cocos2dx_TransitionProgressHorizontal(tolua_S);
	lua_register_cocos2dx_TMXObjectGroup(tolua_S);
	lua_register_cocos2dx_TMXLayer(tolua_S);
	lua_register_cocos2dx_FlipX(tolua_S);
	lua_register_cocos2dx_FlipY(tolua_S);
	lua_register_cocos2dx_TransitionSplitCols(tolua_S);
	lua_register_cocos2dx_Timer(tolua_S);
	lua_register_cocos2dx_FadeTo(tolua_S);
	lua_register_cocos2dx_Repeat(tolua_S);
	lua_register_cocos2dx_Place(tolua_S);
	lua_register_cocos2dx_GLProgram(tolua_S);
	lua_register_cocos2dx_EaseBounceOut(tolua_S);
	lua_register_cocos2dx_RenderTexture(tolua_S);
	lua_register_cocos2dx_TintBy(tolua_S);
	lua_register_cocos2dx_TransitionShrinkGrow(tolua_S);
	lua_register_cocos2dx_Sprite(tolua_S);
	lua_register_cocos2dx_LabelTTF(tolua_S);
	lua_register_cocos2dx_ClippingNode(tolua_S);
	lua_register_cocos2dx_ParticleFlower(tolua_S);
	lua_register_cocos2dx_ParticleSmoke(tolua_S);
	lua_register_cocos2dx_LayerMultiplex(tolua_S);
	lua_register_cocos2dx_Blink(tolua_S);
	lua_register_cocos2dx_ShaderCache(tolua_S);
	lua_register_cocos2dx_JumpTo(tolua_S);
	lua_register_cocos2dx_ParticleExplosion(tolua_S);
	lua_register_cocos2dx_TransitionJumpZoom(tolua_S);
	lua_register_cocos2dx_Touch(tolua_S);
	lua_register_cocos2dx_AnimationFrame(tolua_S);
	lua_register_cocos2dx_TMXLayerInfo(tolua_S);
	lua_register_cocos2dx_TMXTilesetInfo(tolua_S);
	lua_register_cocos2dx_Camera(tolua_S);
	lua_register_cocos2dx_GridBase(tolua_S);
	lua_register_cocos2dx_TiledGrid3D(tolua_S);
	lua_register_cocos2dx_ParticleGalaxy(tolua_S);
	lua_register_cocos2dx_Twirl(tolua_S);
	lua_register_cocos2dx_MenuItemLabel(tolua_S);
	lua_register_cocos2dx_LayerColor(tolua_S);
	lua_register_cocos2dx_FadeOutBLTiles(tolua_S);
	lua_register_cocos2dx_LayerGradient(tolua_S);
	lua_register_cocos2dx_TargetedAction(tolua_S);
	lua_register_cocos2dx_RepeatForever(tolua_S);
	lua_register_cocos2dx_CardinalSplineTo(tolua_S);
	lua_register_cocos2dx_CardinalSplineBy(tolua_S);
	lua_register_cocos2dx_TransitionFlipY(tolua_S);
	lua_register_cocos2dx_TurnOffTiles(tolua_S);
	lua_register_cocos2dx_TintTo(tolua_S);
	lua_register_cocos2dx_CatmullRomTo(tolua_S);
	lua_register_cocos2dx_ToggleVisibility(tolua_S);
	lua_register_cocos2dx_DrawNode(tolua_S);
	lua_register_cocos2dx_TransitionTurnOffTiles(tolua_S);
	lua_register_cocos2dx_RotateTo(tolua_S);
	lua_register_cocos2dx_TransitionSplitRows(tolua_S);
	lua_register_cocos2dx_TransitionProgressRadialCCW(tolua_S);
	lua_register_cocos2dx_ScaleTo(tolua_S);
	lua_register_cocos2dx_TransitionPageTurn(tolua_S);
	lua_register_cocos2dx_BezierBy(tolua_S);
	lua_register_cocos2dx_BezierTo(tolua_S);
	lua_register_cocos2dx_Menu(tolua_S);
	lua_register_cocos2dx_SpriteFrame(tolua_S);
	lua_register_cocos2dx_ActionManager(tolua_S);
	lua_register_cocos2dx_TransitionFade(tolua_S);
	lua_register_cocos2dx_TransitionZoomFlipX(tolua_S);
	lua_register_cocos2dx_SpriteFrameCache(tolua_S);
	lua_register_cocos2dx_TransitionCrossFade(tolua_S);
	lua_register_cocos2dx_Ripple3D(tolua_S);
	lua_register_cocos2dx_TransitionSlideInL(tolua_S);
	lua_register_cocos2dx_TransitionSlideInT(tolua_S);
	lua_register_cocos2dx_StopGrid(tolua_S);
	lua_register_cocos2dx_Set(tolua_S);
	lua_register_cocos2dx_ShakyTiles3D(tolua_S);
	lua_register_cocos2dx_PageTurn3D(tolua_S);
	lua_register_cocos2dx_Grid3D(tolua_S);
	lua_register_cocos2dx_TransitionProgressInOut(tolua_S);
	lua_register_cocos2dx_EaseBackIn(tolua_S);
	lua_register_cocos2dx_SplitRows(tolua_S);
	lua_register_cocos2dx_Follow(tolua_S);
	lua_register_cocos2dx_Animate(tolua_S);
	lua_register_cocos2dx_ShuffleTiles(tolua_S);
	lua_register_cocos2dx_ProgressTimer(tolua_S);
	lua_register_cocos2dx_ParticleMeteor(tolua_S);
	lua_register_cocos2dx_EaseInOut(tolua_S);
	lua_register_cocos2dx_TransitionZoomFlipY(tolua_S);
	lua_register_cocos2dx_ScaleBy(tolua_S);
	lua_register_cocos2dx_Lens3D(tolua_S);
	lua_register_cocos2dx_Animation(tolua_S);
	lua_register_cocos2dx_TMXMapInfo(tolua_S);
	lua_register_cocos2dx_EaseExponentialIn(tolua_S);
	lua_register_cocos2dx_ReuseGrid(tolua_S);
	lua_register_cocos2dx_MenuItemAtlasFont(tolua_S);
	lua_register_cocos2dx_Liquid(tolua_S);
	lua_register_cocos2dx_OrbitCamera(tolua_S);
	lua_register_cocos2dx_ParticleBatchNode(tolua_S);
	lua_register_cocos2dx_ParticleRain(tolua_S);
	lua_register_cocos2dx_Waves(tolua_S);
	lua_register_cocos2dx_EaseOut(tolua_S);
	lua_register_cocos2dx_MenuItemFont(tolua_S);
	lua_register_cocos2dx_TransitionFadeUp(tolua_S);
	lua_register_cocos2dx_EaseSineOut(tolua_S);
	lua_register_cocos2dx_JumpTiles3D(tolua_S);
	lua_register_cocos2dx_MenuItemToggle(tolua_S);
	lua_register_cocos2dx_RemoveSelf(tolua_S);
	lua_register_cocos2dx_SplitCols(tolua_S);
	lua_register_cocos2dx_MotionStreak(tolua_S);
	lua_register_cocos2dx_RotateBy(tolua_S);
	lua_register_cocos2dx_FileUtils(tolua_S);
	lua_register_cocos2dx_ProgressTo(tolua_S);
	lua_register_cocos2dx_TransitionProgressOutIn(tolua_S);
	lua_register_cocos2dx_CatmullRomBy(tolua_S);
	lua_register_cocos2dx_Sequence(tolua_S);
	lua_register_cocos2dx_Shaky3D(tolua_S);
	lua_register_cocos2dx_TransitionProgressRadialCW(tolua_S);
	lua_register_cocos2dx_EaseBounceInOut(tolua_S);
	lua_register_cocos2dx_TransitionSlideInR(tolua_S);
	lua_register_cocos2dx_ParallaxNode(tolua_S);
	lua_register_cocos2dx_EaseSineIn(tolua_S);
	lua_register_cocos2dx_WavesTiles3D(tolua_S);
	lua_register_cocos2dx_TransitionSlideInB(tolua_S);
	lua_register_cocos2dx_Speed(tolua_S);
	lua_register_cocos2dx_ShatteredTiles3D(tolua_S);

	tolua_endmodule(tolua_S);
	return 1;
}

