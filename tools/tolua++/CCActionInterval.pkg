
class CCActionInterval : public CCAction
{
    ccTime getElapsed(void);
    void setAmplitudeRate(CGFloat amp);
    CGFloat getAmplitudeRate(void);

    static CCActionInterval* actionWithDuration(ccTime d);
};

class CCSequence : public CCAction
{
    static CCSequence* actionOneTwo(CCFiniteTimeAction *pActionOne, CCFiniteTimeAction *pActionTwo);
    static CCFiniteTimeAction* actionsWithArray(CCArray *actions);
};

class CCRepeat : public CCAction
{
    static CCRepeat* actionWithAction(CCFiniteTimeAction *pAction, unsigned int times);
};

class CCRepeatForever : public CCAction
{
    static CCRepeatForever* actionWithAction(CCActionInterval *pAction);
};

class CCSpawn : public CCAction
{
    static CCSpawn* actionOneTwo(CCFiniteTimeAction *pAction1, CCFiniteTimeAction *pAction2);
    static CCFiniteTimeAction* actionsWithArray(CCArray *actions);
};

class CCRotateTo : public CCAction
{
    static CCRotateTo* actionWithDuration(ccTime duration, float fDeltaAngle);
};

class CCRotateBy : public CCAction
{
    static CCRotateBy* actionWithDuration(ccTime duration, float fDeltaAngle);
};

class CCMoveTo : public CCAction
{
    static CCMoveTo* actionWithDuration(ccTime duration, CCPoint position);
};

class CCMoveBy : public CCAction
{
    static CCMoveBy* actionWithDuration(ccTime duration, CCPoint position);
};

class CCSkewTo : public CCAction
{
    static CCSkewTo* actionWithDuration(ccTime t, float sx, float sy);
};

class CCSkewBy : public CCAction
{
    static CCSkewBy* actionWithDuration(ccTime t, float deltaSkewX, float deltaSkewY);
};

class CCJumpBy : public CCAction
{
    static CCJumpBy* actionWithDuration(ccTime duration, CCPoint position, ccTime height, int jumps);
};

class CCJumpTo : public CCAction
{
    static CCJumpTo* actionWithDuration(ccTime duration, CCPoint position, ccTime height, int jumps);
};

typedef struct _ccBezierConfig {
    CCPoint endPosition;
    CCPoint controlPoint_1;
    CCPoint controlPoint_2;
} ccBezierConfig;

class CCBezierBy : public CCAction
{
    static CCBezierBy* actionWithDuration(ccTime t, ccBezierConfig c);
};

class CCBezierTo : public CCAction
{
    static CCBezierTo* actionWithDuration(ccTime t, ccBezierConfig c);
};

class CCScaleTo : public CCAction
{
    static CCScaleTo* actionWithDuration(ccTime duration, float s);
    static CCScaleTo* actionWithDuration(ccTime duration, float sx, float sy);
};

class CCScaleBy : public CCAction
{
    static CCScaleBy* actionWithDuration(ccTime duration, float s);
    static CCScaleBy* actionWithDuration(ccTime duration, float sx, float sy);
};

class CCBlink : public CCAction
{
    static CCBlink* actionWithDuration(ccTime duration, unsigned int uBlinks);
};

class CCFadeIn : public CCAction
{
    static CCFadeIn* actionWithDuration(ccTime d);
};

class CCFadeOut : public CCAction
{
    static CCFadeOut* actionWithDuration(ccTime d);
};

class CCFadeTo : public CCAction
{
    static CCFadeTo* actionWithDuration(ccTime duration, GLubyte opacity);
};

class CCTintTo : public CCAction
{
    static CCTintTo* actionWithDuration(ccTime duration, GLubyte red, GLubyte green, GLubyte blue);
};

class CCTintBy : public CCAction
{
    static CCTintBy* actionWithDuration(ccTime duration, GLshort deltaRed, GLshort deltaGreen, GLshort deltaBlue);
};

class CCDelayTime : public CCAction
{
    static CCDelayTime* actionWithDuration(ccTime d);
};

class CCReverseTime : public CCAction
{
    static CCReverseTime* actionWithAction(CCFiniteTimeAction *pAction);
};

class CCAnimate : public CCAction
{
    CCAnimation* getAnimation(void);
    void setAnimation(CCAnimation *pAnimation);

    static CCAnimate* actionWithAnimation(CCAnimation *pAnimation);
    static CCAnimate* actionWithAnimation(CCAnimation *pAnimation, bool bRestoreOriginalFrame);
    static CCAnimate* actionWithDuration(ccTime duration, CCAnimation *pAnimation, bool bRestoreOriginalFrame);
};
